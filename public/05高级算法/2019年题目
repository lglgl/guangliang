<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no">

    
      <link rel="icon" href="/favicon.png" />
    

    <title>
        
          2019年题目 - 李广良
        
    </title>

    <!-- Spectre.css framework -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.9/spectre.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.9/spectre-exp.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.9/spectre-icons.min.css">

    <!-- theme css & js -->

    
<link rel="stylesheet" href="/css/book.css">

    
<script src="/js/book.js"></script>


    <!-- tocbot -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.4.2/tocbot.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.4.2/tocbot.css">
    
    <!-- katex -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.css">

    
    
<script src="https://cdnjs.cloudflare.com/ajax/libs/zooming/2.1.1/zooming.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const zooming = new Zooming()
    zooming.listen('.book-content img')
})
</script>

<meta name="generator" content="Hexo 7.3.0"></head>

<body>

<div class="book-container">
  <div class="book-sidebar">
    <div class="book-brand">
  <a href="/">
    <img src="/favicon.png">
    <span>李广良</span>
  </a>
</div>
    <div id="menu" class="book-menu hide">
  <h3 id="04操作系统">04操作系统</h3>
<ul>
<li><a href="/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.1.%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA.html">4.1.系统加固</a></li>
<li><a href="/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4.2.%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA2.html">4.2.系统加固2</a></li>
</ul>
<h3 id="05高级算法">05高级算法</h3>
<ul>
<li><a href="/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95%E7%9B%AE%E5%BD%95.html">高级算法目录</a></li>
<li><a href="/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA.html">图论</a></li>
<li><a href="/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/Kruskal%E7%AE%97%E6%B3%95.html">Kruskal算法</a></li>
</ul>
<h3 id="06虚拟化">06虚拟化</h3>
<ul>
<li><a href="/06%E8%99%9A%E6%8B%9F%E5%8C%96/6.1.%E8%99%9A%E6%8B%9F%E5%8C%96ESXi%E4%B8%8EKVM%E5%AF%B9%E6%AF%94.html">6.1.虚拟化ESXi与KVM对比</a></li>
</ul>
<h3 id="07中间件">07中间件</h3>
<ul>
<li><a href="/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.1.Zookeeper%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html">7.1.Zookeeper集群环境部署</a></li>
<li><a href="/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.2.Mysql%E5%8F%8C%E4%B8%BB%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.html">7.2.Mysql双主集群部署</a></li>
</ul>
<h3 id="08自动化工具">08自动化工具</h3>
<ul>
<li><a href="/08%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/Ansible%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html">Ansible安装配置</a></li>
</ul>
<h3 id="09异常处理">09异常处理</h3>
<ul>
<li><a href="/09%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/docker%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3.html">docker提示磁盘空间不足</a></li>
</ul>
<h3 id="10未分类">10未分类</h3>
<ul>
<li><a href="/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.1.linux%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E5%88%B0NAS%E6%9C%8D%E5%8A%A1%E5%99%A8.html">linux系统备份到NAS服务器</a></li>
<li><a href="/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.2.openssh%E5%8D%87%E7%BA%A7.html">openssh升级-openssh-9.0p1</a></li>
</ul>
<h3 id="99关于面试">99关于面试</h3>
<ul>
<li><a href="/99%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/01.linux.html">99.1.linux系列</a></li>
</ul>

</div>


<script src="/js/book-menu.js"></script>

  </div>

  <div class="sidebar-toggle" onclick="sidebar_toggle()" onmouseover="add_inner()" onmouseleave="remove_inner()">
  <div class="sidebar-toggle-inner"></div>
</div>

<script>
function add_inner() {
  let inner = document.querySelector('.sidebar-toggle-inner')
  inner.classList.add('show')  
}

function remove_inner() {
  let inner = document.querySelector('.sidebar-toggle-inner')
  inner.classList.remove('show')
}

function sidebar_toggle() {
    let sidebar_toggle = document.querySelector('.sidebar-toggle')
    let sidebar = document.querySelector('.book-sidebar')
    let content = document.querySelector('.off-canvas-content')
    if (sidebar_toggle.classList.contains('extend')) { // show
        sidebar_toggle.classList.remove('extend')
        sidebar.classList.remove('hide')
        content.classList.remove('extend')
    }
    else { // hide
        sidebar_toggle.classList.add('extend')
        sidebar.classList.add('hide')
        content.classList.add('extend')
    }
}
</script>

  <div class="off-canvas-content">
    <div class="columns">
      <div class="column col-10 col-lg-12">
        <div class="book-navbar">
          <!-- For Responsive Layout -->

<header class="navbar">
  <section class="navbar-section">
    <a onclick="open_sidebar()">
      <i class="icon icon-menu"></i>
    </a>
  </section>
</header>

        </div>
        <div class="book-content">
          <div class="book-post">
  <p><strong>EN:</strong></p>
<p>(a) Write a straightforward recursive function to calculate Fibonacci number.</p>
<p>(b) What is the time complexity of the function in (1)(a) above, in big O? Explain your answer.</p>
<p>© What is dynamic programming? Apply dynamic programming approach to calculate a Fibonacci number, and describe the way dynamic programming calculates the Fibonacci number using an appropriate example.</p>
<p><strong>ZH:</strong></p>
<p>（a）写一个直接的递归函数来计算斐波那契数。</p>
<p>（b）上面（1）（a）中的函数的时间复杂度是什么，大 O 是多少？解释你的答案。</p>
<p>（c）什么是动态规划？应用动态规划方法来计算斐波那契数，并描述动态规划使用适当的示例计算斐波那契数的方法。</p>
<p><strong>中文解释：</strong></p>
<p><strong>（a）斐波那契数的递归函数</strong></p>
<p>斐波那契数列是一个数列，其中前两个数为 0 和 1，而从第三个数开始，每个数都是前两个数的和。一个简单的递归函数可以用于计算斐波那契数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>（b）时间复杂度</strong></p>
<p>给定自然数 n，递归函数 fibonacci(n) 的时间复杂度为 O(2^n)。这是因为对于每个输入 n，该函数都会递归地调用自身两次，并且这种模式会一直重复到 n 达到 0 或 1。</p>
<p><strong>（c）动态规划</strong></p>
<p>动态规划是一种解决优化问题的技术，它将问题分解成子问题，然后通过存储子问题的解决方案来避免重复计算。对于斐波那契数，我们可以使用动态规划来计算斐波那契数，方法是存储已计算出的斐波那契数。</p>
<p>以下是动态规划方法计算斐波那契数的一个示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_dp</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">fib_cache = [<span class="number">0</span>, <span class="number">1</span>]  <span class="comment"># 存储已计算出的斐波那契数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &gt;= <span class="built_in">len</span>(fib_cache):</span><br><span class="line"></span><br><span class="line">next_fib = fib_cache[-<span class="number">1</span>] + fib_cache[-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">fib_cache.append(next_fib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fib_cache[n]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在该实现中，fib_cache 列表存储已计算出的斐波那契数。当 n 大于 fib_cache 的长度时，它将计算并存储下一个斐波那契数。通过使用 fib_cache，动态规划方法避免了重复计算，从而将时间复杂度从 O(2^n) 降低到 O(n)。</p>

</div>


  <div class="book-comments">
    




  </div>



<script src="/js/book-post.js"></script>

        </div>
      </div>
      <div class="column col-2 hide-lg">
        <div class="book-post-info">
  
    <div class="book-post-meta">

  <div class="author">

    <!-- Author image-->
    <div class="author-img">
      
        <figure
          class="avatar avatar-lg"
          data-initial="J"
          style="background-color: #3b4351;">
        </figure>
      
    </div>

    <!-- Author title -->
    <div class="author-title">
      <div>空空</div>
      <div>2024-07-10</div>
    </div>
  </div>

  

  <div class="divider"></div>
</div>
  

  <div class="book-tocbot">
</div>
<div class="book-tocbot-menu">
  <a class="book-toc-expand" onclick="expand_toc()">EXPAND</a>
  <a onclick="go_top()">TOP</a>
  <a onclick="go_bottom()">BOTTOM</a>
</div>


<script src="/js/book-toc.js"></script>

</div>
      </div>
    </div>
  </div>
  
  <a class="off-canvas-overlay" onclick="hide_canvas()"></a>
</div>

</body>
</html>


<script src="/js/book.js"></script>
