{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/book/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/book/source/css/book.scss","path":"css/book.scss","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-post.js","path":"js/book-post.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-menu.js","path":"js/book-menu.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book.js","path":"js/book.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-toc.js","path":"js/book-toc.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/05高级算法/Kruskal算法.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720604777464},{"_id":"source/_posts/06虚拟化/云原生.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721053896334},{"_id":"source/menu.md","hash":"c186143ce2f8d695f02b28ea514362673e46b7a7","modified":1721465083097},{"_id":"source/.DS_Store","hash":"fc7fe3f941a998037ff2878be1750be55923a30b","modified":1721292775824},{"_id":"source/home.md","hash":"f2d76677c0e11a66448a912f4024b9127321726e","modified":1720453816682},{"_id":"source/_posts/.DS_Store","hash":"b388b00f927a165324602f5f7d8a979525fe6d61","modified":1721457762968},{"_id":"source/_posts/04操作系统/0402系统加固2.md","hash":"82042b0320ab5b5bda6d0a43ec12a9302d780092","modified":1721455935741},{"_id":"source/_posts/模板.md","hash":"ab75c70ed94cbf2212dd999153d349fa0938ef54","modified":1721457485653},{"_id":"source/_posts/04操作系统/0403系统安装初始化.md","hash":"b76e9d56afada39bb39b08db80923c0412b8b935","modified":1721455951287},{"_id":"source/_posts/07中间件/7.1.Zookeeper集群环境部署.md","hash":"c2debba9d97532c7ec090131199c328a0a22a5ab","modified":1721282551876},{"_id":"source/_posts/04操作系统/0401系统加固.md","hash":"076fb1c60786059f5671f9b6eed342e5c100eabb","modified":1721455932024},{"_id":"source/_posts/07中间件/7.0.中间件版本选型.md","hash":"ec0958120988a5808c10ab1fd016fd658903333c","modified":1721456864850},{"_id":"source/_posts/07中间件/7.2.Mysql双主集群部署.md","hash":"b13b117698e54c91d4b2ef2ee1d7c15595f54d85","modified":1721283046527},{"_id":"source/_posts/07中间件/7.4.Elasticsearch集群容器部署.md","hash":"4db00e8d9bdd5400d93b19fcb7925eaaf40fbabb","modified":1721461528340},{"_id":"source/_posts/07中间件/.DS_Store","hash":"fc653e18b37cff77d603b65aa3d6d7a340afee7e","modified":1721282711539},{"_id":"source/_posts/07中间件/7.3.Redis集群环境部署.md","hash":"cc01bda73b31e599521781a0867323257e9946e4","modified":1721456116364},{"_id":"source/_posts/05高级算法/2019年题目.md","hash":"8b55c91c2f0b671d3ff974cf10c94458f4f9dc04","modified":1720606535708},{"_id":"source/_posts/07中间件/7.5.Kafka集群容器部署.md","hash":"9672f543a723d1204949375f505095b2a9a5c64c","modified":1721464536954},{"_id":"source/_posts/08自动化工具/8.1.Ansible安装配置.md","hash":"ca9a53ffe4ec868c3f2c2de74d715f0674779610","modified":1721460862563},{"_id":"source/_posts/05高级算法/BFS.md","hash":"089cffb2a6ee9bb9b2586baa9c9a17ba3d4e9d9a","modified":1720606036856},{"_id":"source/_posts/05高级算法/图论.md","hash":"7be90fc14c6399c848e77be6bfd6200e77eb5a6f","modified":1720774154489},{"_id":"source/_posts/05高级算法/PrimJarnik算法.md","hash":"ed7740d9e744b8a6beb8c08964061bb85561445e","modified":1720780583243},{"_id":"source/_posts/05高级算法/P-NP问题.md","hash":"6ab6e24f14fce38918505279ccbce0f91b9e688f","modified":1720606036874},{"_id":"source/_posts/05高级算法/GreedyAlgorithm.md","hash":"89fd450b2019d2587839c60aebffc1ce815740e4","modified":1720785800580},{"_id":"source/_posts/05高级算法/高级算法目录.md","hash":"214d9bf46de62eab699d0775287c04b4f75f9d56","modified":1720606131419},{"_id":"source/_posts/06虚拟化/6.2.Docker-compose环境配置.md","hash":"79523d0abc82ae01d0104840e2e16f9bc1823ff1","modified":1721458336920},{"_id":"source/_posts/05高级算法/队栈.md","hash":"f6043aea395533eee6fbc5422e0012bf3cf03c44","modified":1720773518483},{"_id":"source/_posts/06虚拟化/K8S安装.md","hash":"ee696d56a203abaddfdb031603a857abc3dfc1c6","modified":1721277873310},{"_id":"source/_posts/06虚拟化/6.1.虚拟化ESXi与KVM对比.md","hash":"8208ddb4ee9d81eee32a9b3f642fa463305cbb50","modified":1721284124720},{"_id":"source/_posts/10未分类/10.1.linux系统备份到NAS服务器.md","hash":"bfc3d442d9ece025ca24709602756e851c05f4f5","modified":1721385335646},{"_id":"source/_posts/09异常处理/9.1.docker提示磁盘空间不足.md","hash":"06754fdacec186c8be1e717669ef2f2c2d433c11","modified":1721460340783},{"_id":"source/_posts/06虚拟化/岗位摘要.md","hash":"a60f09560e722e2335f27998d083abbf2e6545b4","modified":1721277886802},{"_id":"source/_posts/10未分类/10.2.openssh升级.md","hash":"b5c83912ab473c9eacd7ef476554f92e95c6725b","modified":1721408704272},{"_id":"source/_posts/07中间件/7.6.Minio集群容器部署.md","hash":"867794264d17866f117f2107158b596dc09581ea","modified":1721464786529},{"_id":"source/_posts/21数字取证/考试内容.md","hash":"3a9bc72b1c38cf95ab19a1f34a382652472ee5e5","modified":1720853365923},{"_id":"source/_posts/99关于面试/99.1.linux.md","hash":"778dfcc668257f99f60082dd93434e808eba3e62","modified":1721407168856},{"_id":"source/_posts/99关于面试/99.2.网络知识.md","hash":"919990b9eaca401070c6ceb5f612188c8e2b74d9","modified":1721466629870},{"_id":"source/_posts/08自动化工具/8.2.Ansible基础使用.md","hash":"2f488689bd85bc901c8bde02985997db91eb8871","modified":1721460559405},{"_id":"source/_posts/99关于面试/传音控股.md","hash":"8545716752f52811d09cee9f91e8851758227e25","modified":1721272947213},{"_id":"source/_posts/99关于面试/99.3.基础脚本.md","hash":"43fa8f2646dc70601b85b172dfa507f31ec8e8ea","modified":1721467852633},{"_id":"source/_posts/99关于面试/nginx.md","hash":"a65de2728b647ac25073f1bc27c8a575fcc7edd1","modified":1721382598802},{"_id":"themes/book/scripts/merge-configs.js","hash":"73d4d9c35cedfe4ed99c849c73fcee4012738a1c","modified":1720447350101},{"_id":"themes/book/scripts/render.js","hash":"0190cae64d12ac47b601b9fb0f1434a09c5ac168","modified":1720447350101},{"_id":"themes/book/README.md","hash":"a8506b68e699aabf38beec0f4150d4dd1477f85d","modified":1720447350098},{"_id":"themes/book/layout/index.ejs","hash":"ce0892216ca0cd664796c873190d26f2430e4959","modified":1720447350100},{"_id":"themes/book/LICENSE","hash":"03157c4b6e91d27f69508dbdc62c09bc38fd78fc","modified":1720447350098},{"_id":"themes/book/_config.yml","hash":"993945ea4495d087f680681c2f897401e6c95ca9","modified":1721279904081},{"_id":"themes/book/layout/layout.ejs","hash":"6b197a2edf59592f3061ea521fa216fef1a3b168","modified":1720447350100},{"_id":"themes/book/layout/page.ejs","hash":"2e53811dda487a8faf75b3c3372fc8b8726d1f55","modified":1720447350101},{"_id":"themes/book/layout/post.ejs","hash":"37ea12159553023f07d1f99815a5a9b82a9c3ef7","modified":1720447350101},{"_id":"themes/book/layout/tags.ejs","hash":"f2744252f6de3451c19d695f8f518c5a054f58b7","modified":1720447350101},{"_id":"themes/book/layout/categories.ejs","hash":"e3e1aa97b9a21f5bd85c4f0c56d79e7096eda48c","modified":1720447350100},{"_id":"themes/book/layout/archive.ejs","hash":"dec48c24f9f94a2ddd733f70a96fba0886f563e5","modified":1720447350100},{"_id":"themes/book/layout/_components/brand.ejs","hash":"a5272fbc584e7b89c0ccf205661e90f2c99354a1","modified":1720447350098},{"_id":"themes/book/layout/_components/menu.ejs","hash":"c2c0efd59fed898cb41ad6a0ec94c49aca3e7fea","modified":1720447350098},{"_id":"themes/book/layout/_components/sidebar-toggle.ejs","hash":"53d6fc0e8bfb8f36942d2d7afcbb306dd0f89c31","modified":1720447350099},{"_id":"themes/book/layout/_lib/comments.ejs","hash":"823afb4dcbee4e8b2258671aaf1332fed038774e","modified":1720447350099},{"_id":"themes/book/layout/_lib/google-analytics.ejs","hash":"8fac33b80001d1eba38ec7f35e9bd22d79705f43","modified":1720447350099},{"_id":"themes/book/layout/_lib/zooming-image.ejs","hash":"c9b2c4772bac30ca2a8939e6e305c9c9397d9003","modified":1720447350099},{"_id":"themes/book/layout/_partials/navbar.ejs","hash":"10eae8b5ed78e82a38b58d9525422f10b9be89cf","modified":1720447350100},{"_id":"themes/book/layout/_partials/post-info.ejs","hash":"d9ff5a91882a47ceb2144dcdccdd9b56191e4228","modified":1720447350100},{"_id":"themes/book/source/css/_variables.scss","hash":"1e24fa7f2467f06be7ab6d034a47ff2438384d51","modified":1720447350104},{"_id":"themes/book/layout/_components/post-meta.ejs","hash":"21ea1b2ef05c9a0ab79305db9e6d74530d2969e1","modified":1721385179491},{"_id":"themes/book/layout/_partials/head.ejs","hash":"41fecd85cd1540c811937b4f9df5061d3df2207b","modified":1720453233490},{"_id":"themes/book/source/css/book.scss","hash":"cac0f32677c1e3ede2700a0dd02dec6aba6997cd","modified":1720447350104},{"_id":"themes/book/source/js/book-post.js","hash":"d239e79163ceb5a37c9274c0c83010eea80554d8","modified":1720447350104},{"_id":"themes/book/layout/_components/toc.ejs","hash":"ba5d3b1bef6df34db98e17273c4858f6258f4bed","modified":1721385218345},{"_id":"themes/book/source/js/book-menu.js","hash":"deebd62833f484c84e08357291ccc797c7544eb6","modified":1720447350104},{"_id":"themes/book/source/js/book-toc.js","hash":"fcbf2a88d9bab50dbd1337150a5909e8b9eecd13","modified":1720447350104},{"_id":"themes/book/source/css/_components/brand.scss","hash":"d6d944b2ce367bc67249dcb917c2a36df2c7d285","modified":1720447350102},{"_id":"themes/book/source/js/book.js","hash":"c150427c7397aea35ad83624f8db8f4b19846bb6","modified":1720447350104},{"_id":"themes/book/source/css/_components/comments.scss","hash":"1e5204db1a98e70ccb3027df8eb5a0fbfa3530c1","modified":1720447350102},{"_id":"themes/book/source/css/_components/post-meta.scss","hash":"489673d51d470fc6c47c0c5e942fb027f6f9846b","modified":1720447350102},{"_id":"themes/book/source/css/_components/menu.scss","hash":"0b9ba0d7f5df5f9a1a4321b9f5ede89fc92be0b4","modified":1720447350102},{"_id":"themes/book/source/css/_components/toc.scss","hash":"30c6fa4a4d9ed70b43ac26bd869ac8f58e3e0214","modified":1720447350103},{"_id":"themes/book/source/css/_components/post.scss","hash":"ad6e61a4a7fa6259577dc34263be727a4afc8b03","modified":1720447350103},{"_id":"themes/book/source/css/_partials/book-archive.scss","hash":"c5ac27a8769860174af70d8111b2c2beee2921d6","modified":1720447350103},{"_id":"themes/book/source/css/_partials/book-sidebar.scss","hash":"3e4b1b06404b084df7cbc4a31cfaf7db3594e75c","modified":1720447350103},{"_id":"themes/book/source/css/_partials/book-content.scss","hash":"8e7a53eb11d87925d2bf940bb29ea5a9ea8a22f4","modified":1720447350103},{"_id":"themes/book/source/css/_components/sidebar-toggle.scss","hash":"de42090bb8e3184722922da28419f3e270da2e06","modified":1721460256301},{"_id":"themes/book/source/css/_components/highlight/theme.scss","hash":"ec78a76370e44d9f1978c6f4ec2f3d523286f23a","modified":1720447350102},{"_id":"themes/book/source/css/_partials/book-navbar.scss","hash":"c7311a76fc29a262ed03091661b4dea30d53d4f7","modified":1720447350103},{"_id":"themes/book/source/css/_components/highlight/diff.scss","hash":"e1a087d44e499beb05d0906b8a64fff62a7ba01d","modified":1720447350102},{"_id":"themes/book/source/css/_components/highlight/highlight.scss","hash":"5d7851dec993537f0e32d0301bae70ac0ccbb52d","modified":1720447350102},{"_id":"themes/book/source/favicon.png","hash":"2dbd6cb7b96c11aafd3d66ea99a35480c81da822","modified":1720598723199},{"_id":"public/99关于面试/99.3.基础脚本.html","hash":"cd2fd28a056a73bd9ba1653a17f5a2dc07264dd6","modified":1721541535622},{"_id":"public/99关于面试/99.2.网络知识.html","hash":"1abf8bca19e5681fb0035569a5eb790dd1c11384","modified":1721541535622},{"_id":"public/07中间件/7.6.Minio集群容器部署.html","hash":"13abd517a51f789c1ab6b0d72ab0ae8b20efc880","modified":1721541535622},{"_id":"public/模板.html","hash":"23313aa96442d92d919c0cc22fb004b13362269b","modified":1721541535622},{"_id":"public/04操作系统/0402系统加固2.html","hash":"10fd4220a92e091c75f21a4f541bfdc4a3d0a438","modified":1721541535622},{"_id":"public/99关于面试/nginx.html","hash":"2366cf543a44470b8acc70c0b9746fc0871e5d28","modified":1721541535622},{"_id":"public/06虚拟化/6.1.虚拟化ESXi与KVM对比.html","hash":"a5ef89a6ab4c629cadd64e942758cd4fb2ecdfe0","modified":1721541535622},{"_id":"public/08自动化工具/8.2.Ansible基础使用.html","hash":"494f3b7bc213162bb0337deb9da6eb89a7ecc00a","modified":1721541535622},{"_id":"public/06虚拟化/岗位摘要.html","hash":"6dea6315d98bdbf8612b594302ac040387fc6baf","modified":1721541535622},{"_id":"public/06虚拟化/K8S安装.html","hash":"73980be3502c63cd66c266cb403aed948d712754","modified":1721541535622},{"_id":"public/06虚拟化/云原生.html","hash":"95834ddf5f8ceac3adb9cf6b3cdb4b8c938bf700","modified":1721541535622},{"_id":"public/99关于面试/传音控股.html","hash":"f0b66fe30af739b52f6536f1b5da8d3899288742","modified":1721541535622},{"_id":"public/21数字取证/考试内容.html","hash":"e71ef348df61b54508dc8f4682b77ec248ed1737","modified":1721541535622},{"_id":"public/05高级算法/GreedyAlgorithm.html","hash":"77b4079bfe5db5e065ae1f3ae5d9bb3809dc5238","modified":1721541535622},{"_id":"public/05高级算法/PrimJarnik算法.html","hash":"15be1f1889769812ec6ae14e2647f13de4298773","modified":1721541535622},{"_id":"public/05高级算法/队栈.html","hash":"82aadb8a6dfcca6f435cb3273d9ded31ae972423","modified":1721541535622},{"_id":"public/05高级算法/P-NP问题.html","hash":"b129d1ef5ce435d845d7854d43fb858751d8db13","modified":1721541535622},{"_id":"public/05高级算法/高级算法目录.html","hash":"732bca1901193e236d4dc3180c6a013152c98d60","modified":1721541535622},{"_id":"public/05高级算法/Kruskal算法.html","hash":"51d3036b12502488f3db87fb155ac1ebb9f6a945","modified":1721541535622},{"_id":"public/05高级算法/2019年题目.html","hash":"3f7b9827db12cf035c6c1b05df9f52f63ed4b6cc","modified":1721541535622},{"_id":"public/05高级算法/图论.html","hash":"e2cf29a2ce3851c89d2b65695fc0324c152ba617","modified":1721541535622},{"_id":"public/04操作系统/0401系统加固.html","hash":"873cb4c54ab49727eee3c4a170e40efc22b609fb","modified":1721541535622},{"_id":"public/10未分类/10.1.linux系统备份到NAS服务器.html","hash":"e273f377b981dee730dea113018d8e8b146f93f0","modified":1721541535622},{"_id":"public/categories/技术/index.html","hash":"41980b6bd5ed96f2433e799135048853a3fa7685","modified":1721541535622},{"_id":"public/categories/技术/容器化/index.html","hash":"648955cf8be87642d8beef8875b80a44c85295b9","modified":1721541535622},{"_id":"public/index.html","hash":"ab067a5f0b3ddf021f032181bd257f64762b2e5f","modified":1721541535622},{"_id":"public/page/2/index.html","hash":"4a22c19c2c1c669e35f85ec996fda942fb898e77","modified":1721541535622},{"_id":"public/page/3/index.html","hash":"4a22c19c2c1c669e35f85ec996fda942fb898e77","modified":1721541535622},{"_id":"public/page/4/index.html","hash":"4a22c19c2c1c669e35f85ec996fda942fb898e77","modified":1721541535622},{"_id":"public/tags/Docker/index.html","hash":"84934e23887995aab5d42fd0c7541af40461026a","modified":1721541535622},{"_id":"public/tags/Docker-Compose/index.html","hash":"0a444e42d51dc01e02c58f2e97897b8969ce9360","modified":1721541535622},{"_id":"public/tags/安装指南/index.html","hash":"c5be461d7419d772e7ad68c99da476bcac93495d","modified":1721541535622},{"_id":"public/07中间件/7.5.Kafka集群容器部署.html","hash":"b4dddf3fc58648a55331fabe23169c118dfb0ff8","modified":1721541535622},{"_id":"public/07中间件/7.4.Elasticsearch集群容器部署.html","hash":"ffe0bb862270ff08ea2107aae0497b326c8a573a","modified":1721541535622},{"_id":"public/04操作系统/0403系统安装初始化.html","hash":"445fe8590cf1676bd6d16b71ee23fa59a5e2cd09","modified":1721541535622},{"_id":"public/10未分类/10.2.openssh升级.html","hash":"b285ceb6364438f3de3dadf8298cc9a1e81deb55","modified":1721541535622},{"_id":"public/99关于面试/99.1.linux.html","hash":"c330024d39a40aa34ca603fcfd62a5355bc77033","modified":1721541535622},{"_id":"public/07中间件/7.1.Zookeeper集群环境部署.html","hash":"ade045f6bb202cc90f7fb72a60595902bd957eba","modified":1721541535622},{"_id":"public/08自动化工具/8.1.Ansible安装配置.html","hash":"38d9070c41649026448181c6d18abb46f5c5ce50","modified":1721541535622},{"_id":"public/09异常处理/9.1.docker提示磁盘空间不足.html","hash":"47c7e2d8f3e57e3f6edc4fb9169965e5ed14775b","modified":1721541535622},{"_id":"public/05高级算法/BFS.html","hash":"12850a457147da31531e57894d9c8c98e3479213","modified":1721541535622},{"_id":"public/07中间件/7.2.Mysql双主集群部署.html","hash":"b82936e699a08991f6c34809c5e0f7b866aa2077","modified":1721541535622},{"_id":"public/07中间件/7.3.Redis集群环境部署.html","hash":"a131802c8f64ffe7edcb66d6f42f61371f40aa3a","modified":1721541535622},{"_id":"public/07中间件/7.0.中间件版本选型.html","hash":"84bb1bf2af79296f7fd8a540d4e8efd98552a580","modified":1721541535622},{"_id":"public/06虚拟化/6.2.Docker-compose环境配置.html","hash":"a1b0bc2bb922c78afa42ab82a656ee1e1986f896","modified":1721541535622},{"_id":"public/archives/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/page/2/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/page/3/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/page/4/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2018/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2018/05/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2023/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2023/06/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2023/07/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2023/09/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/page/2/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/page/3/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/07/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/07/page/2/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/archives/2024/07/page/3/index.html","hash":"a8c55a2ada0380e7f54779fb94541663debada6f","modified":1721541535622},{"_id":"public/favicon.png","hash":"2dbd6cb7b96c11aafd3d66ea99a35480c81da822","modified":1721541535622},{"_id":"public/js/book-post.js","hash":"d239e79163ceb5a37c9274c0c83010eea80554d8","modified":1721541535622},{"_id":"public/js/book-menu.js","hash":"deebd62833f484c84e08357291ccc797c7544eb6","modified":1721541535622},{"_id":"public/css/book.css","hash":"190c7e7d65e8fc42322fccd5d0b4c450eab3dd00","modified":1721541535622},{"_id":"public/js/book.js","hash":"c150427c7397aea35ad83624f8db8f4b19846bb6","modified":1721541535622},{"_id":"public/js/book-toc.js","hash":"fcbf2a88d9bab50dbd1337150a5909e8b9eecd13","modified":1721541535622}],"Category":[{"name":"技术","_id":"clyv5dqqz000rj38a88ir1lzx"},{"name":"容器化","parent":"clyv5dqqz000rj38a88ir1lzx","_id":"clyv5dqrd000yj38a1fk483sf"}],"Data":[],"Page":[{"_content":"\n\n# 04操作系统\n* [0401系统加固](/04操作系统/0401系统加固)\n* [0402系统加固2](/04操作系统/0402系统加固2)\n* [0403系统安装初始化](/04操作系统/0403系统安装初始化)\n\n### 05高级算法\n- [高级算法目录](/05高级算法/高级算法目录)\n- [图论](/05高级算法/图论)\n- [Kruskal算法](/05高级算法/Kruskal算法)\n\n# 06虚拟化\n* [6.1.虚拟化ESXi与KVM对比](/06虚拟化/6.1.虚拟化ESXi与KVM对比)\n* [6.2.Docker-compose环境配置](/06虚拟化/6.2.Docker-compose环境配置)\n\n\n# 07中间件\n* [7.0.中间件版本选型](/07中间件/7.0.中间件版本选型)\n* [7.1.Zookeeper集群环境部署](/07中间件/7.1.Zookeeper集群环境部署)\n* [7.2.Mysql双主集群部署](/07中间件/7.2.Mysql双主集群部署)\n* [7.3.Redis集群环境部署](/07中间件/7.3.Redis集群环境部署)\n* [7.4.Elasticsearch集群容器部署](/07中间件/7.4.Elasticsearch集群容器部署)\n* [7.5.Kafka集群容器部署](/07中间件/7.5.Kafka集群容器部署)\n* [7.6.Minio集群容器部署](/07中间件/7.6.Minio集群容器部署)\n\n\n# 08自动化工具\n* [8.1.Ansible安装配置](/08自动化工具/8.1.Ansible安装配置)\n\n\n# 09异常处理\n* [9.1.docker提示磁盘空间不足](/09异常处理/9.1.docker提示磁盘空间不足)\n\n\n# 10未分类\n* [linux系统备份到NAS服务器](/10未分类/10.1.linux系统备份到NAS服务器)\n* [openssh升级-openssh-9.0p1](/10未分类/10.2.openssh升级)\n\n\n# 99关于面试\n* [99.1.linux系列](/99关于面试/01.linux)\n","source":"menu.md","raw":"\n\n# 04操作系统\n* [0401系统加固](/04操作系统/0401系统加固)\n* [0402系统加固2](/04操作系统/0402系统加固2)\n* [0403系统安装初始化](/04操作系统/0403系统安装初始化)\n\n### 05高级算法\n- [高级算法目录](/05高级算法/高级算法目录)\n- [图论](/05高级算法/图论)\n- [Kruskal算法](/05高级算法/Kruskal算法)\n\n# 06虚拟化\n* [6.1.虚拟化ESXi与KVM对比](/06虚拟化/6.1.虚拟化ESXi与KVM对比)\n* [6.2.Docker-compose环境配置](/06虚拟化/6.2.Docker-compose环境配置)\n\n\n# 07中间件\n* [7.0.中间件版本选型](/07中间件/7.0.中间件版本选型)\n* [7.1.Zookeeper集群环境部署](/07中间件/7.1.Zookeeper集群环境部署)\n* [7.2.Mysql双主集群部署](/07中间件/7.2.Mysql双主集群部署)\n* [7.3.Redis集群环境部署](/07中间件/7.3.Redis集群环境部署)\n* [7.4.Elasticsearch集群容器部署](/07中间件/7.4.Elasticsearch集群容器部署)\n* [7.5.Kafka集群容器部署](/07中间件/7.5.Kafka集群容器部署)\n* [7.6.Minio集群容器部署](/07中间件/7.6.Minio集群容器部署)\n\n\n# 08自动化工具\n* [8.1.Ansible安装配置](/08自动化工具/8.1.Ansible安装配置)\n\n\n# 09异常处理\n* [9.1.docker提示磁盘空间不足](/09异常处理/9.1.docker提示磁盘空间不足)\n\n\n# 10未分类\n* [linux系统备份到NAS服务器](/10未分类/10.1.linux系统备份到NAS服务器)\n* [openssh升级-openssh-9.0p1](/10未分类/10.2.openssh升级)\n\n\n# 99关于面试\n* [99.1.linux系列](/99关于面试/01.linux)\n","date":"2024-07-20T08:44:43.097Z","updated":"2024-07-20T08:44:43.097Z","path":"menu.html","title":"","comments":1,"layout":"page","_id":"clyv5dqq60002j38a8395ckp7","content":"<h1>04操作系统</h1>\n<ul>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0401%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA\">0401系统加固</a></li>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0402%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA2\">0402系统加固2</a></li>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0403%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96\">0403系统安装初始化</a></li>\n</ul>\n<h3 id=\"05高级算法\">05高级算法</h3>\n<ul>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95%E7%9B%AE%E5%BD%95\">高级算法目录</a></li>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA\">图论</a></li>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/Kruskal%E7%AE%97%E6%B3%95\">Kruskal算法</a></li>\n</ul>\n<h1>06虚拟化</h1>\n<ul>\n<li><a href=\"/06%E8%99%9A%E6%8B%9F%E5%8C%96/6.1.%E8%99%9A%E6%8B%9F%E5%8C%96ESXi%E4%B8%8EKVM%E5%AF%B9%E6%AF%94\">6.1.虚拟化ESXi与KVM对比</a></li>\n<li><a href=\"/06%E8%99%9A%E6%8B%9F%E5%8C%96/6.2.Docker-compose%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">6.2.Docker-compose环境配置</a></li>\n</ul>\n<h1>07中间件</h1>\n<ul>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.0.%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%89%88%E6%9C%AC%E9%80%89%E5%9E%8B\">7.0.中间件版本选型</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.1.Zookeeper%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">7.1.Zookeeper集群环境部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.2.Mysql%E5%8F%8C%E4%B8%BB%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2\">7.2.Mysql双主集群部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.3.Redis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">7.3.Redis集群环境部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.4.Elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.4.Elasticsearch集群容器部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.5.Kafka%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.5.Kafka集群容器部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.6.Minio%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.6.Minio集群容器部署</a></li>\n</ul>\n<h1>08自动化工具</h1>\n<ul>\n<li><a href=\"/08%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/8.1.Ansible%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\">8.1.Ansible安装配置</a></li>\n</ul>\n<h1>09异常处理</h1>\n<ul>\n<li><a href=\"/09%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/9.1.docker%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3\">9.1.docker提示磁盘空间不足</a></li>\n</ul>\n<h1>10未分类</h1>\n<ul>\n<li><a href=\"/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.1.linux%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E5%88%B0NAS%E6%9C%8D%E5%8A%A1%E5%99%A8\">linux系统备份到NAS服务器</a></li>\n<li><a href=\"/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.2.openssh%E5%8D%87%E7%BA%A7\">openssh升级-openssh-9.0p1</a></li>\n</ul>\n<h1>99关于面试</h1>\n<ul>\n<li><a href=\"/99%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/01.linux\">99.1.linux系列</a></li>\n</ul>\n","excerpt":"","more":"<h1>04操作系统</h1>\n<ul>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0401%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA\">0401系统加固</a></li>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0402%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA2\">0402系统加固2</a></li>\n<li><a href=\"/04%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/0403%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%9D%E5%A7%8B%E5%8C%96\">0403系统安装初始化</a></li>\n</ul>\n<h3 id=\"05高级算法\">05高级算法</h3>\n<ul>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95%E7%9B%AE%E5%BD%95\">高级算法目录</a></li>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA\">图论</a></li>\n<li><a href=\"/05%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/Kruskal%E7%AE%97%E6%B3%95\">Kruskal算法</a></li>\n</ul>\n<h1>06虚拟化</h1>\n<ul>\n<li><a href=\"/06%E8%99%9A%E6%8B%9F%E5%8C%96/6.1.%E8%99%9A%E6%8B%9F%E5%8C%96ESXi%E4%B8%8EKVM%E5%AF%B9%E6%AF%94\">6.1.虚拟化ESXi与KVM对比</a></li>\n<li><a href=\"/06%E8%99%9A%E6%8B%9F%E5%8C%96/6.2.Docker-compose%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\">6.2.Docker-compose环境配置</a></li>\n</ul>\n<h1>07中间件</h1>\n<ul>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.0.%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%89%88%E6%9C%AC%E9%80%89%E5%9E%8B\">7.0.中间件版本选型</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.1.Zookeeper%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">7.1.Zookeeper集群环境部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.2.Mysql%E5%8F%8C%E4%B8%BB%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2\">7.2.Mysql双主集群部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.3.Redis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2\">7.3.Redis集群环境部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.4.Elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.4.Elasticsearch集群容器部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.5.Kafka%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.5.Kafka集群容器部署</a></li>\n<li><a href=\"/07%E4%B8%AD%E9%97%B4%E4%BB%B6/7.6.Minio%E9%9B%86%E7%BE%A4%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2\">7.6.Minio集群容器部署</a></li>\n</ul>\n<h1>08自动化工具</h1>\n<ul>\n<li><a href=\"/08%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/8.1.Ansible%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\">8.1.Ansible安装配置</a></li>\n</ul>\n<h1>09异常处理</h1>\n<ul>\n<li><a href=\"/09%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/9.1.docker%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3\">9.1.docker提示磁盘空间不足</a></li>\n</ul>\n<h1>10未分类</h1>\n<ul>\n<li><a href=\"/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.1.linux%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E5%88%B0NAS%E6%9C%8D%E5%8A%A1%E5%99%A8\">linux系统备份到NAS服务器</a></li>\n<li><a href=\"/10%E6%9C%AA%E5%88%86%E7%B1%BB/10.2.openssh%E5%8D%87%E7%BA%A7\">openssh升级-openssh-9.0p1</a></li>\n</ul>\n<h1>99关于面试</h1>\n<ul>\n<li><a href=\"/99%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/01.linux\">99.1.linux系列</a></li>\n</ul>\n"},{"title":"Hello World","weight":10,"_content":"## 高级算法目录\n\n\n### 1.1. BFS (Breadth-First Search)\n\n广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。\n\n**实现步骤：**\n1. 创建一个空队列 `queue` 和一个空集合 `visited`。\n2. 将起始节点放入队列和访问集合中。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中的节点，将其标记为已访问。\n   - 将所有未访问过的邻居节点加入队列和访问集合。\n\n\n### 1.2. DFS (Depth-First Search)\n\n深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。\n\n**实现步骤：**\n1. 创建一个空集合 `visited` 来记录访问过的节点。\n2. 从起始节点开始调用递归函数 `dfs`：\n   - 将当前节点标记为已访问。\n   - 对于当前节点的每个未访问的邻居节点，递归调用 `dfs` 函数。\n\n## 2. Shortest Path Algorithms\n\n\n### 2.1. Dijkstra\n\nDijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。\n\n**实现步骤：**\n1. 创建一个优先队列 `pq` 和距离字典 `distances`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 将起始节点和距离 0 放入队列。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中距离最小的节点。\n   - 对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。\n\n---\n\n### 2.2. Bellman-Ford\n\nBellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。\n\n**实现步骤：**\n1. 创建距离字典 `distance`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 进行 |V|-1 次迭代，每次迭代遍历所有边：\n   - 对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。\n3. 再次遍历所有边，检查是否存在负权环。\n\n## 3. Pattern Matching Algorithms\n\n\n### 3.1. KMP (Knuth-Morris-Pratt)\n\nKMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。\n\n**实现步骤：**\n1. 构建部分匹配表 `lps`，用于指示在匹配失败时模式串应移动的位置。\n2. 使用两个指针 i 和 j 分别遍历文本和模式串：\n   - 如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。\n   - 如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。\n   - 如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。\n\n\n\n### 3.2. Boyer-Moore\n\nBoyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。\n\n**实现步骤：**\n1. 构建字符到最后出现位置的映射表 `last`。\n2. 使用两个指针 s 和 j 分别遍历文本和模式串：\n   - 从右向左比较模式串和文本，当匹配失败时根据 `last` 表跳过一定的字符。\n   - 如果完全匹配，记录匹配的起始位置并移动 s。\n   - 如果部分匹配但未完全匹配，根据 `last` 表调整 j 的位置。\n\n这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。\n","source":"home.md","raw":"---\ntitle: Hello World\nweight: 10\n---\n## 高级算法目录\n\n\n### 1.1. BFS (Breadth-First Search)\n\n广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。\n\n**实现步骤：**\n1. 创建一个空队列 `queue` 和一个空集合 `visited`。\n2. 将起始节点放入队列和访问集合中。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中的节点，将其标记为已访问。\n   - 将所有未访问过的邻居节点加入队列和访问集合。\n\n\n### 1.2. DFS (Depth-First Search)\n\n深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。\n\n**实现步骤：**\n1. 创建一个空集合 `visited` 来记录访问过的节点。\n2. 从起始节点开始调用递归函数 `dfs`：\n   - 将当前节点标记为已访问。\n   - 对于当前节点的每个未访问的邻居节点，递归调用 `dfs` 函数。\n\n## 2. Shortest Path Algorithms\n\n\n### 2.1. Dijkstra\n\nDijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。\n\n**实现步骤：**\n1. 创建一个优先队列 `pq` 和距离字典 `distances`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 将起始节点和距离 0 放入队列。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中距离最小的节点。\n   - 对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。\n\n---\n\n### 2.2. Bellman-Ford\n\nBellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。\n\n**实现步骤：**\n1. 创建距离字典 `distance`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 进行 |V|-1 次迭代，每次迭代遍历所有边：\n   - 对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。\n3. 再次遍历所有边，检查是否存在负权环。\n\n## 3. Pattern Matching Algorithms\n\n\n### 3.1. KMP (Knuth-Morris-Pratt)\n\nKMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。\n\n**实现步骤：**\n1. 构建部分匹配表 `lps`，用于指示在匹配失败时模式串应移动的位置。\n2. 使用两个指针 i 和 j 分别遍历文本和模式串：\n   - 如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。\n   - 如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。\n   - 如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。\n\n\n\n### 3.2. Boyer-Moore\n\nBoyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。\n\n**实现步骤：**\n1. 构建字符到最后出现位置的映射表 `last`。\n2. 使用两个指针 s 和 j 分别遍历文本和模式串：\n   - 从右向左比较模式串和文本，当匹配失败时根据 `last` 表跳过一定的字符。\n   - 如果完全匹配，记录匹配的起始位置并移动 s。\n   - 如果部分匹配但未完全匹配，根据 `last` 表调整 j 的位置。\n\n这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。\n","date":"2024-07-10T07:57:56.385Z","updated":"2024-07-08T15:50:16.682Z","path":"home.html","comments":1,"layout":"page","_id":"clyv5dqqb0004j38adyh6d9gj","content":"<h2 id=\"高级算法目录\">高级算法目录</h2>\n<h3 id=\"1-1-BFS-Breadth-First-Search\">1.1. BFS (Breadth-First Search)</h3>\n<p>广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空队列 <code>queue</code> 和一个空集合 <code>visited</code>。</li>\n<li>将起始节点放入队列和访问集合中。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中的节点，将其标记为已访问。</li>\n<li>将所有未访问过的邻居节点加入队列和访问集合。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-2-DFS-Depth-First-Search\">1.2. DFS (Depth-First Search)</h3>\n<p>深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空集合 <code>visited</code> 来记录访问过的节点。</li>\n<li>从起始节点开始调用递归函数 <code>dfs</code>：\n<ul>\n<li>将当前节点标记为已访问。</li>\n<li>对于当前节点的每个未访问的邻居节点，递归调用 <code>dfs</code> 函数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-Shortest-Path-Algorithms\">2. Shortest Path Algorithms</h2>\n<h3 id=\"2-1-Dijkstra\">2.1. Dijkstra</h3>\n<p>Dijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个优先队列 <code>pq</code> 和距离字典 <code>distances</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>将起始节点和距离 0 放入队列。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中距离最小的节点。</li>\n<li>对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-Bellman-Ford\">2.2. Bellman-Ford</h3>\n<p>Bellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建距离字典 <code>distance</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>进行 |V|-1 次迭代，每次迭代遍历所有边：\n<ul>\n<li>对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。</li>\n</ul>\n</li>\n<li>再次遍历所有边，检查是否存在负权环。</li>\n</ol>\n<h2 id=\"3-Pattern-Matching-Algorithms\">3. Pattern Matching Algorithms</h2>\n<h3 id=\"3-1-KMP-Knuth-Morris-Pratt\">3.1. KMP (Knuth-Morris-Pratt)</h3>\n<p>KMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建部分匹配表 <code>lps</code>，用于指示在匹配失败时模式串应移动的位置。</li>\n<li>使用两个指针 i 和 j 分别遍历文本和模式串：\n<ul>\n<li>如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。</li>\n<li>如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。</li>\n<li>如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-Boyer-Moore\">3.2. Boyer-Moore</h3>\n<p>Boyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建字符到最后出现位置的映射表 <code>last</code>。</li>\n<li>使用两个指针 s 和 j 分别遍历文本和模式串：\n<ul>\n<li>从右向左比较模式串和文本，当匹配失败时根据 <code>last</code> 表跳过一定的字符。</li>\n<li>如果完全匹配，记录匹配的起始位置并移动 s。</li>\n<li>如果部分匹配但未完全匹配，根据 <code>last</code> 表调整 j 的位置。</li>\n</ul>\n</li>\n</ol>\n<p>这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。</p>\n","excerpt":"","more":"<h2 id=\"高级算法目录\">高级算法目录</h2>\n<h3 id=\"1-1-BFS-Breadth-First-Search\">1.1. BFS (Breadth-First Search)</h3>\n<p>广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空队列 <code>queue</code> 和一个空集合 <code>visited</code>。</li>\n<li>将起始节点放入队列和访问集合中。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中的节点，将其标记为已访问。</li>\n<li>将所有未访问过的邻居节点加入队列和访问集合。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-2-DFS-Depth-First-Search\">1.2. DFS (Depth-First Search)</h3>\n<p>深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空集合 <code>visited</code> 来记录访问过的节点。</li>\n<li>从起始节点开始调用递归函数 <code>dfs</code>：\n<ul>\n<li>将当前节点标记为已访问。</li>\n<li>对于当前节点的每个未访问的邻居节点，递归调用 <code>dfs</code> 函数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-Shortest-Path-Algorithms\">2. Shortest Path Algorithms</h2>\n<h3 id=\"2-1-Dijkstra\">2.1. Dijkstra</h3>\n<p>Dijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个优先队列 <code>pq</code> 和距离字典 <code>distances</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>将起始节点和距离 0 放入队列。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中距离最小的节点。</li>\n<li>对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-Bellman-Ford\">2.2. Bellman-Ford</h3>\n<p>Bellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建距离字典 <code>distance</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>进行 |V|-1 次迭代，每次迭代遍历所有边：\n<ul>\n<li>对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。</li>\n</ul>\n</li>\n<li>再次遍历所有边，检查是否存在负权环。</li>\n</ol>\n<h2 id=\"3-Pattern-Matching-Algorithms\">3. Pattern Matching Algorithms</h2>\n<h3 id=\"3-1-KMP-Knuth-Morris-Pratt\">3.1. KMP (Knuth-Morris-Pratt)</h3>\n<p>KMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建部分匹配表 <code>lps</code>，用于指示在匹配失败时模式串应移动的位置。</li>\n<li>使用两个指针 i 和 j 分别遍历文本和模式串：\n<ul>\n<li>如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。</li>\n<li>如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。</li>\n<li>如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-Boyer-Moore\">3.2. Boyer-Moore</h3>\n<p>Boyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建字符到最后出现位置的映射表 <code>last</code>。</li>\n<li>使用两个指针 s 和 j 分别遍历文本和模式串：\n<ul>\n<li>从右向左比较模式串和文本，当匹配失败时根据 <code>last</code> 表跳过一定的字符。</li>\n<li>如果完全匹配，记录匹配的起始位置并移动 s。</li>\n<li>如果部分匹配但未完全匹配，根据 <code>last</code> 表调整 j 的位置。</li>\n</ul>\n</li>\n</ol>\n<p>这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。</p>\n"}],"Post":[{"_content":"","source":"_posts/05高级算法/Kruskal算法.md","raw":"","slug":"05高级算法/Kruskal算法","published":1,"date":"2024-07-10T09:46:17.464Z","updated":"2024-07-10T09:46:17.464Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqpj0000j38a58npfoa3","content":"","excerpt":"","more":""},{"_content":"","source":"_posts/06虚拟化/云原生.md","raw":"","slug":"06虚拟化/云原生","published":1,"date":"2024-07-15T14:31:36.334Z","updated":"2024-07-15T14:31:36.334Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqpv0001j38afq192llb","content":"","excerpt":"","more":""},{"title":"0401系统加固","author":"空空","date":"2024-07-20T06:37:52.270Z","_content":"","source":"_posts/模板.md","raw":"---\ntitle: 0401系统加固\nauthor: 空空\ndate: 2023--\n---","slug":"模板","published":1,"updated":"2024-07-20T06:38:05.653Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqq80003j38a9bqp83h5","content":"","excerpt":"","more":""},{"title":"0401系统加固","author":"空空","_content":"### 1. 设置密码复杂度\n```bash\nvi /etc/pam.d/system-auth\n\npassword    requisite     pam_pwquality.so dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8 try_first_pass local_users_only retry=10 authtok_type='设置账号（要求：大小写+特殊字符+数字>8位）'\n\ndcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8\n\nretry=5      定义登录、或修改密码失败后，可以重复的次数\ntype=        选项，定义用户修改密码时的提示内容，一般不管\ndcredit=-1   至少一个数字\nlcredit=-1   至少一个小写\nucredit=-1   至少一个大写\nocredit=-1   至少一个特殊字符\nminlen=8     密码最短长度为5位\nremember=5   不能重复使用前5次使用过的密码\n```\n\n- 验证\n```bash\n[root@dahouzi-node005 ~]# vi /etc/pam.d/system-auth\n[root@dahouzi-node005 ~]# passwd dahouzi\n更改用户 dahouzi 的密码 。\n新的 '设置密码要求：大小写+特殊字符+数字' 密码：\n```\n\n### 2. 设置系统日志保存时间\nvi /etc/logrotate.conf\n\n```bash\n# see \"man logrotate\" for details\n# rotate log files weekly\nweekly\n\n# keep 4 weeks worth of backlogs\n# 保存6个月\nrotate 24\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# use date as a suffix of the rotated file\ndateext\n\n# uncomment this if you want your log files compressed\n#compress\n\n# RPM packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# no packages own wtmp and btmp -- we'll rotate them here\n# 保存6个月\n/var/log/wtmp {\n    monthly\n    create 0664 root utmp\n        minsize 1M\n    rotate 6\n}\n# 保存6个月\n/var/log/btmp {\n    missingok\n    monthly\n    create 0600 root utmp\n    rotate 6\n}\n\n# system-specific logs may be also be configured here.\nservice rsyslog restart\n```\n\n### 3. MySQL审计\n- 开启\nset global general_log=on\n- 检查\nshow variables like '%general_log%'\n\n","source":"_posts/04操作系统/0401系统加固.md","raw":"---\ntitle: 0401系统加固\nauthor: 空空\n---\n### 1. 设置密码复杂度\n```bash\nvi /etc/pam.d/system-auth\n\npassword    requisite     pam_pwquality.so dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8 try_first_pass local_users_only retry=10 authtok_type='设置账号（要求：大小写+特殊字符+数字>8位）'\n\ndcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8\n\nretry=5      定义登录、或修改密码失败后，可以重复的次数\ntype=        选项，定义用户修改密码时的提示内容，一般不管\ndcredit=-1   至少一个数字\nlcredit=-1   至少一个小写\nucredit=-1   至少一个大写\nocredit=-1   至少一个特殊字符\nminlen=8     密码最短长度为5位\nremember=5   不能重复使用前5次使用过的密码\n```\n\n- 验证\n```bash\n[root@dahouzi-node005 ~]# vi /etc/pam.d/system-auth\n[root@dahouzi-node005 ~]# passwd dahouzi\n更改用户 dahouzi 的密码 。\n新的 '设置密码要求：大小写+特殊字符+数字' 密码：\n```\n\n### 2. 设置系统日志保存时间\nvi /etc/logrotate.conf\n\n```bash\n# see \"man logrotate\" for details\n# rotate log files weekly\nweekly\n\n# keep 4 weeks worth of backlogs\n# 保存6个月\nrotate 24\n\n# create new (empty) log files after rotating old ones\ncreate\n\n# use date as a suffix of the rotated file\ndateext\n\n# uncomment this if you want your log files compressed\n#compress\n\n# RPM packages drop log rotation information into this directory\ninclude /etc/logrotate.d\n\n# no packages own wtmp and btmp -- we'll rotate them here\n# 保存6个月\n/var/log/wtmp {\n    monthly\n    create 0664 root utmp\n        minsize 1M\n    rotate 6\n}\n# 保存6个月\n/var/log/btmp {\n    missingok\n    monthly\n    create 0600 root utmp\n    rotate 6\n}\n\n# system-specific logs may be also be configured here.\nservice rsyslog restart\n```\n\n### 3. MySQL审计\n- 开启\nset global general_log=on\n- 检查\nshow variables like '%general_log%'\n\n","slug":"04操作系统/0401系统加固","published":1,"date":"2023-09-01T13:06:38.230Z","updated":"2024-07-20T06:12:12.024Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqc0005j38a2c2l6keq","content":"<h3 id=\"1-设置密码复杂度\">1. 设置密码复杂度</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pam.d/system-auth</span><br><span class=\"line\"></span><br><span class=\"line\">password    requisite     pam_pwquality.so dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8 try_first_pass local_users_only retry=10 authtok_type=<span class=\"string\">&#x27;设置账号（要求：大小写+特殊字符+数字&gt;8位）&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8</span><br><span class=\"line\"></span><br><span class=\"line\">retry=5      定义登录、或修改密码失败后，可以重复的次数</span><br><span class=\"line\"><span class=\"built_in\">type</span>=        选项，定义用户修改密码时的提示内容，一般不管</span><br><span class=\"line\">dcredit=-1   至少一个数字</span><br><span class=\"line\">lcredit=-1   至少一个小写</span><br><span class=\"line\">ucredit=-1   至少一个大写</span><br><span class=\"line\">ocredit=-1   至少一个特殊字符</span><br><span class=\"line\">minlen=8     密码最短长度为5位</span><br><span class=\"line\">remember=5   不能重复使用前5次使用过的密码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-node005 ~]# vi /etc/pam.d/system-auth</span><br><span class=\"line\">[root@dahouzi-node005 ~]# passwd dahouzi</span><br><span class=\"line\">更改用户 dahouzi 的密码 。</span><br><span class=\"line\">新的 <span class=\"string\">&#x27;设置密码要求：大小写+特殊字符+数字&#x27;</span> 密码：</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置系统日志保存时间\">2. 设置系统日志保存时间</h3>\n<p>vi /etc/logrotate.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># see &quot;man logrotate&quot; for details</span></span><br><span class=\"line\"><span class=\"comment\"># rotate log files weekly</span></span><br><span class=\"line\">weekly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># keep 4 weeks worth of backlogs</span></span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">rotate 24</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create new (empty) log files after rotating old ones</span></span><br><span class=\"line\">create</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use date as a suffix of the rotated file</span></span><br><span class=\"line\">dateext</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># uncomment this if you want your log files compressed</span></span><br><span class=\"line\"><span class=\"comment\">#compress</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RPM packages drop log rotation information into this directory</span></span><br><span class=\"line\">include /etc/logrotate.d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no packages own wtmp and btmp -- we&#x27;ll rotate them here</span></span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">/var/log/wtmp &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0664 root utmp</span><br><span class=\"line\">        minsize 1M</span><br><span class=\"line\">    rotate 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">/var/log/btmp &#123;</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0600 root utmp</span><br><span class=\"line\">    rotate 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system-specific logs may be also be configured here.</span></span><br><span class=\"line\">service rsyslog restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-MySQL审计\">3. MySQL审计</h3>\n<ul>\n<li>开启<br>\nset global general_log=on</li>\n<li>检查<br>\nshow variables like ‘%general_log%’</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"1-设置密码复杂度\">1. 设置密码复杂度</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/pam.d/system-auth</span><br><span class=\"line\"></span><br><span class=\"line\">password    requisite     pam_pwquality.so dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8 try_first_pass local_users_only retry=10 authtok_type=<span class=\"string\">&#x27;设置账号（要求：大小写+特殊字符+数字&gt;8位）&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8</span><br><span class=\"line\"></span><br><span class=\"line\">retry=5      定义登录、或修改密码失败后，可以重复的次数</span><br><span class=\"line\"><span class=\"built_in\">type</span>=        选项，定义用户修改密码时的提示内容，一般不管</span><br><span class=\"line\">dcredit=-1   至少一个数字</span><br><span class=\"line\">lcredit=-1   至少一个小写</span><br><span class=\"line\">ucredit=-1   至少一个大写</span><br><span class=\"line\">ocredit=-1   至少一个特殊字符</span><br><span class=\"line\">minlen=8     密码最短长度为5位</span><br><span class=\"line\">remember=5   不能重复使用前5次使用过的密码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-node005 ~]# vi /etc/pam.d/system-auth</span><br><span class=\"line\">[root@dahouzi-node005 ~]# passwd dahouzi</span><br><span class=\"line\">更改用户 dahouzi 的密码 。</span><br><span class=\"line\">新的 <span class=\"string\">&#x27;设置密码要求：大小写+特殊字符+数字&#x27;</span> 密码：</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置系统日志保存时间\">2. 设置系统日志保存时间</h3>\n<p>vi /etc/logrotate.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># see &quot;man logrotate&quot; for details</span></span><br><span class=\"line\"><span class=\"comment\"># rotate log files weekly</span></span><br><span class=\"line\">weekly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># keep 4 weeks worth of backlogs</span></span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">rotate 24</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create new (empty) log files after rotating old ones</span></span><br><span class=\"line\">create</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use date as a suffix of the rotated file</span></span><br><span class=\"line\">dateext</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># uncomment this if you want your log files compressed</span></span><br><span class=\"line\"><span class=\"comment\">#compress</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RPM packages drop log rotation information into this directory</span></span><br><span class=\"line\">include /etc/logrotate.d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no packages own wtmp and btmp -- we&#x27;ll rotate them here</span></span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">/var/log/wtmp &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0664 root utmp</span><br><span class=\"line\">        minsize 1M</span><br><span class=\"line\">    rotate 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 保存6个月</span></span><br><span class=\"line\">/var/log/btmp &#123;</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    create 0600 root utmp</span><br><span class=\"line\">    rotate 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system-specific logs may be also be configured here.</span></span><br><span class=\"line\">service rsyslog restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-MySQL审计\">3. MySQL审计</h3>\n<ul>\n<li>开启<br>\nset global general_log=on</li>\n<li>检查<br>\nshow variables like ‘%general_log%’</li>\n</ul>\n"},{"title":"4.2.系统加固2","author":"空空","_content":"\n### 1、打开防火墙\n```shell\nfirewall-cmd --list-all\nfirewall-cmd --reload\nsystemctl restart firewalld.service\nsystemctl stop firewalld.service\nsystemctl start firewalld.service\nsystemctl status firewalld.service\n\n# 设置三台虚拟机互通（不做防火墙限制）\nfirewall-cmd --permanent --add-source=10.128.136.138\nfirewall-cmd --permanent --add-source=10.128.136.139\nfirewall-cmd --permanent --add-source=10.128.136.140\nfirewall-cmd --permanent --add-source=10.128.136.140\nfirewall-cmd --permanent --add-source=113.98.244.181\nfirewall-cmd --permanent --remove-port=60022/tcp\nfirewall-cmd --permanent --remove-port=22/tcp\nfirewall-cmd --reload\nfirewall-cmd --reload\n```\n\n### 2、检测到远端X服务正在运行中(CVE-1999-0526)\n```shell\n停止Xserver\nsystemctl stop gdm\nsystemctl disable gdm\nsystemctl status gdm\nsystemctl start gdm\nsystemctl enable gdm\n```\n\n### 3、可通过HTTP获取远端WWW服务信息\n关闭nginx 80/443端口\n\n注释以下路径的80端口侦听\n`/data/middleware/nginx/config/conf.d/`\n\n\n### 4、修改ssh版本号（版本欺骗）\n```shell\ncp /usr/bin/ssh /usr/bin/ssh.bak\ncp /usr/sbin/sshd /usr/sbin/sshd.bak\nsed -i 's/OpenSSH_7.4/OpenSSH_8.6/g' /usr/sbin/sshd\nsed -i 's/OpenSSH_7.4/OpenSSH_8.6/g' /usr/bin/ssh\n```\n\n\n### 5、SSH版本信息可被获取（修复）\n 修改源代码或者配置文件改变SSH服务的缺省banner。\n```shell\necho \"Welcome to XX Airport\" > /etc/ssh_banner_idszt\nvi /etc/ssh/sshd_config\necho \"Banner /etc/ssh_banner_idszt\" >> /etc/ssh/sshd_config\ntail -n 10 /etc/ssh/sshd_config\nsystemctl restart sshd\n```\n\n###  6、检测到远端RPCBIND/PORTMAP正在运行中(CVE-1999-0632)\n```shell\n关闭 rpcbind 服务\nsystemctl disable rpcbind\nsystemctl stop rpcbind.socket\n```\n### 7、修复ICMP timestamp请求响应漏洞\n* 在您的防火墙上过滤外来的ICMP timestamp（类型 13）报文以及外出的ICMP timestamp回复报文\n```shell\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-request -m comment --comment \"deny ICMP timestamp\" -j DROP\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-reply -m comment --comment \"deny ICMP timestamp\" -j DROP\n# 禁止Traceroute探测\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type 11 -m comment --comment \"deny traceroute\" -j DROP\nfirewall-cmd --reload\n\nfirewall-cmd --direct --get-all-rules\n```\n\n\n### 8、修改ssh端口（慎重选择）\n先操作一台机器，不同时操作。因为修改端口后，数据包不一定能通过防火墙。\n\n配置文件调整/etc/ssh/sshd_config\n```\nvi /etc/ssh/sshd_config\n\n#port 22\n#改为\nport 60022\n```\nsystemctl restart sshd\n\n检查： netstat -ntlp\n\n\n\n### 基线脚本执行\n\n\n\n1、上传文件夹Linux_配置规范_已修改_S3A3G3到root目录\n2、cd /root\n3、执行chmod +x ffabcdef-2021-1115-1707-aaa510893517.sh\n4、cd /tmp\n5、导出xml文件\n\n\n-----------------------------\n时间服务：10.128.143.33\n","source":"_posts/04操作系统/0402系统加固2.md","raw":"\n---\ntitle: 4.2.系统加固2\nauthor: 空空\n---\n\n### 1、打开防火墙\n```shell\nfirewall-cmd --list-all\nfirewall-cmd --reload\nsystemctl restart firewalld.service\nsystemctl stop firewalld.service\nsystemctl start firewalld.service\nsystemctl status firewalld.service\n\n# 设置三台虚拟机互通（不做防火墙限制）\nfirewall-cmd --permanent --add-source=10.128.136.138\nfirewall-cmd --permanent --add-source=10.128.136.139\nfirewall-cmd --permanent --add-source=10.128.136.140\nfirewall-cmd --permanent --add-source=10.128.136.140\nfirewall-cmd --permanent --add-source=113.98.244.181\nfirewall-cmd --permanent --remove-port=60022/tcp\nfirewall-cmd --permanent --remove-port=22/tcp\nfirewall-cmd --reload\nfirewall-cmd --reload\n```\n\n### 2、检测到远端X服务正在运行中(CVE-1999-0526)\n```shell\n停止Xserver\nsystemctl stop gdm\nsystemctl disable gdm\nsystemctl status gdm\nsystemctl start gdm\nsystemctl enable gdm\n```\n\n### 3、可通过HTTP获取远端WWW服务信息\n关闭nginx 80/443端口\n\n注释以下路径的80端口侦听\n`/data/middleware/nginx/config/conf.d/`\n\n\n### 4、修改ssh版本号（版本欺骗）\n```shell\ncp /usr/bin/ssh /usr/bin/ssh.bak\ncp /usr/sbin/sshd /usr/sbin/sshd.bak\nsed -i 's/OpenSSH_7.4/OpenSSH_8.6/g' /usr/sbin/sshd\nsed -i 's/OpenSSH_7.4/OpenSSH_8.6/g' /usr/bin/ssh\n```\n\n\n### 5、SSH版本信息可被获取（修复）\n 修改源代码或者配置文件改变SSH服务的缺省banner。\n```shell\necho \"Welcome to XX Airport\" > /etc/ssh_banner_idszt\nvi /etc/ssh/sshd_config\necho \"Banner /etc/ssh_banner_idszt\" >> /etc/ssh/sshd_config\ntail -n 10 /etc/ssh/sshd_config\nsystemctl restart sshd\n```\n\n###  6、检测到远端RPCBIND/PORTMAP正在运行中(CVE-1999-0632)\n```shell\n关闭 rpcbind 服务\nsystemctl disable rpcbind\nsystemctl stop rpcbind.socket\n```\n### 7、修复ICMP timestamp请求响应漏洞\n* 在您的防火墙上过滤外来的ICMP timestamp（类型 13）报文以及外出的ICMP timestamp回复报文\n```shell\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-request -m comment --comment \"deny ICMP timestamp\" -j DROP\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-reply -m comment --comment \"deny ICMP timestamp\" -j DROP\n# 禁止Traceroute探测\nfirewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type 11 -m comment --comment \"deny traceroute\" -j DROP\nfirewall-cmd --reload\n\nfirewall-cmd --direct --get-all-rules\n```\n\n\n### 8、修改ssh端口（慎重选择）\n先操作一台机器，不同时操作。因为修改端口后，数据包不一定能通过防火墙。\n\n配置文件调整/etc/ssh/sshd_config\n```\nvi /etc/ssh/sshd_config\n\n#port 22\n#改为\nport 60022\n```\nsystemctl restart sshd\n\n检查： netstat -ntlp\n\n\n\n### 基线脚本执行\n\n\n\n1、上传文件夹Linux_配置规范_已修改_S3A3G3到root目录\n2、cd /root\n3、执行chmod +x ffabcdef-2021-1115-1707-aaa510893517.sh\n4、cd /tmp\n5、导出xml文件\n\n\n-----------------------------\n时间服务：10.128.143.33\n","slug":"04操作系统/0402系统加固2","published":1,"date":"2024-07-19T16:43:00.065Z","updated":"2024-07-20T06:12:15.741Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqd0006j38abm0f3tbz","content":"<h3 id=\"1、打开防火墙\">1、打开防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">systemctl restart firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置三台虚拟机互通（不做防火墙限制）</span></span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.138</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.139</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.140</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.140</span><br><span class=\"line\">firewall-cmd --permanent --add-source=113.98.244.181</span><br><span class=\"line\">firewall-cmd --permanent --remove-port=60022/tcp</span><br><span class=\"line\">firewall-cmd --permanent --remove-port=22/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、检测到远端X服务正在运行中-CVE-1999-0526\">2、检测到远端X服务正在运行中(CVE-1999-0526)</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">停止Xserver</span><br><span class=\"line\">systemctl stop gdm</span><br><span class=\"line\">systemctl disable gdm</span><br><span class=\"line\">systemctl status gdm</span><br><span class=\"line\">systemctl start gdm</span><br><span class=\"line\">systemctl enable gdm</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、可通过HTTP获取远端WWW服务信息\">3、可通过HTTP获取远端WWW服务信息</h3>\n<p>关闭nginx 80/443端口</p>\n<p>注释以下路径的80端口侦听<br>\n<code>/data/middleware/nginx/config/conf.d/</code></p>\n<h3 id=\"4、修改ssh版本号（版本欺骗）\">4、修改ssh版本号（版本欺骗）</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/bin/ssh /usr/bin/ssh.bak</span><br><span class=\"line\">cp /usr/sbin/sshd /usr/sbin/sshd.bak</span><br><span class=\"line\">sed -i &#x27;s/OpenSSH_7.4/OpenSSH_8.6/g&#x27; /usr/sbin/sshd</span><br><span class=\"line\">sed -i &#x27;s/OpenSSH_7.4/OpenSSH_8.6/g&#x27; /usr/bin/ssh</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、SSH版本信息可被获取（修复）\">5、SSH版本信息可被获取（修复）</h3>\n<p>修改源代码或者配置文件改变SSH服务的缺省banner。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Welcome to XX Airport&quot; &gt; /etc/ssh_banner_idszt</span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\">echo &quot;Banner /etc/ssh_banner_idszt&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\">tail -n 10 /etc/ssh/sshd_config</span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、检测到远端RPCBIND-PORTMAP正在运行中-CVE-1999-0632\">6、检测到远端RPCBIND/PORTMAP正在运行中(CVE-1999-0632)</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关闭 rpcbind 服务</span><br><span class=\"line\">systemctl disable rpcbind</span><br><span class=\"line\">systemctl stop rpcbind.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、修复ICMP-timestamp请求响应漏洞\">7、修复ICMP timestamp请求响应漏洞</h3>\n<ul>\n<li>在您的防火墙上过滤外来的ICMP timestamp（类型 13）报文以及外出的ICMP timestamp回复报文</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-request -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-reply -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">禁止Traceroute探测</span></span><br><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type 11 -m comment --comment &quot;deny traceroute&quot; -j DROP</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --direct --get-all-rules</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、修改ssh端口（慎重选择）\">8、修改ssh端口（慎重选择）</h3>\n<p>先操作一台机器，不同时操作。因为修改端口后，数据包不一定能通过防火墙。</p>\n<p>配置文件调整/etc/ssh/sshd_config</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">#port 22</span><br><span class=\"line\">#改为</span><br><span class=\"line\">port 60022</span><br></pre></td></tr></table></figure>\n<p>systemctl restart sshd</p>\n<p>检查： netstat -ntlp</p>\n<h3 id=\"基线脚本执行\">基线脚本执行</h3>\n<p>1、上传文件夹Linux_配置规范_已修改_S3A3G3到root目录<br>\n2、cd /root<br>\n3、执行chmod +x <a href=\"http://ffabcdef-2021-1115-1707-aaa510893517.sh\">ffabcdef-2021-1115-1707-aaa510893517.sh</a><br>\n4、cd /tmp<br>\n5、导出xml文件</p>\n<hr>\n<p>时间服务：10.128.143.33</p>\n","excerpt":"","more":"<h3 id=\"1、打开防火墙\">1、打开防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">systemctl restart firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置三台虚拟机互通（不做防火墙限制）</span></span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.138</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.139</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.140</span><br><span class=\"line\">firewall-cmd --permanent --add-source=10.128.136.140</span><br><span class=\"line\">firewall-cmd --permanent --add-source=113.98.244.181</span><br><span class=\"line\">firewall-cmd --permanent --remove-port=60022/tcp</span><br><span class=\"line\">firewall-cmd --permanent --remove-port=22/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、检测到远端X服务正在运行中-CVE-1999-0526\">2、检测到远端X服务正在运行中(CVE-1999-0526)</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">停止Xserver</span><br><span class=\"line\">systemctl stop gdm</span><br><span class=\"line\">systemctl disable gdm</span><br><span class=\"line\">systemctl status gdm</span><br><span class=\"line\">systemctl start gdm</span><br><span class=\"line\">systemctl enable gdm</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、可通过HTTP获取远端WWW服务信息\">3、可通过HTTP获取远端WWW服务信息</h3>\n<p>关闭nginx 80/443端口</p>\n<p>注释以下路径的80端口侦听<br>\n<code>/data/middleware/nginx/config/conf.d/</code></p>\n<h3 id=\"4、修改ssh版本号（版本欺骗）\">4、修改ssh版本号（版本欺骗）</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/bin/ssh /usr/bin/ssh.bak</span><br><span class=\"line\">cp /usr/sbin/sshd /usr/sbin/sshd.bak</span><br><span class=\"line\">sed -i &#x27;s/OpenSSH_7.4/OpenSSH_8.6/g&#x27; /usr/sbin/sshd</span><br><span class=\"line\">sed -i &#x27;s/OpenSSH_7.4/OpenSSH_8.6/g&#x27; /usr/bin/ssh</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、SSH版本信息可被获取（修复）\">5、SSH版本信息可被获取（修复）</h3>\n<p>修改源代码或者配置文件改变SSH服务的缺省banner。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Welcome to XX Airport&quot; &gt; /etc/ssh_banner_idszt</span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\">echo &quot;Banner /etc/ssh_banner_idszt&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\">tail -n 10 /etc/ssh/sshd_config</span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、检测到远端RPCBIND-PORTMAP正在运行中-CVE-1999-0632\">6、检测到远端RPCBIND/PORTMAP正在运行中(CVE-1999-0632)</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关闭 rpcbind 服务</span><br><span class=\"line\">systemctl disable rpcbind</span><br><span class=\"line\">systemctl stop rpcbind.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、修复ICMP-timestamp请求响应漏洞\">7、修复ICMP timestamp请求响应漏洞</h3>\n<ul>\n<li>在您的防火墙上过滤外来的ICMP timestamp（类型 13）报文以及外出的ICMP timestamp回复报文</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-request -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type timestamp-reply -m comment --comment &quot;deny ICMP timestamp&quot; -j DROP</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">禁止Traceroute探测</span></span><br><span class=\"line\">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p ICMP --icmp-type 11 -m comment --comment &quot;deny traceroute&quot; -j DROP</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --direct --get-all-rules</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、修改ssh端口（慎重选择）\">8、修改ssh端口（慎重选择）</h3>\n<p>先操作一台机器，不同时操作。因为修改端口后，数据包不一定能通过防火墙。</p>\n<p>配置文件调整/etc/ssh/sshd_config</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">#port 22</span><br><span class=\"line\">#改为</span><br><span class=\"line\">port 60022</span><br></pre></td></tr></table></figure>\n<p>systemctl restart sshd</p>\n<p>检查： netstat -ntlp</p>\n<h3 id=\"基线脚本执行\">基线脚本执行</h3>\n<p>1、上传文件夹Linux_配置规范_已修改_S3A3G3到root目录<br>\n2、cd /root<br>\n3、执行chmod +x <a href=\"http://ffabcdef-2021-1115-1707-aaa510893517.sh\">ffabcdef-2021-1115-1707-aaa510893517.sh</a><br>\n4、cd /tmp<br>\n5、导出xml文件</p>\n<hr>\n<p>时间服务：10.128.143.33</p>\n"},{"author":"空空","_content":"## centos7系统初始化\n\n### 1. 修改国内源（阿里云）\n\n1. yum配置文件路径 `/etc/yum.repos.d/centos.repo`\n\n2. 备份源配置 `mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup`\n3. 阿里源配置\n4. 更新缓存 `yum makecache && yum update`\n\n```shell\n# CentOS-Base.repo\n[base]\nname=CentOS-$releasever - Base - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n[PowerTools]\nname=CentOS-$releasever - PowerTools - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n[AppStream]\nname=CentOS-$releasever - AppStream - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n```\n\n### 2. 主机命名\n\ndahouzi-node001，首位数字定义机房。\n\n\n\n### 3. 收集主机信息\n\n```\necho \"--------------防火墙---------------------\">>info.txt\nfirewall-cmd --state >>info.txt\necho \"--------------网卡---------------------\">>info.txt\nifconfig -a >>info.txt\necho \"---------------运行中的程序--------------------\">>info.txt\nsystemctl list-units -t service --state=running >>info.txt\necho \"---------------磁盘情况--------------------\" >>info.txt \ndf -Th | grep 'Filesystem\\|^/dev/sd*\\|^/dev/vd*\\|^/dev/hd*\\|^/dev/mapper*\\|^/dev/md*' >>info.txt\necho \"---------------内存情况--------------------\">>info.txt\nfree -h >>info.txt\necho \"---------------处理器情况--------------------\">>info.txt\ncat /proc/cpuinfo >>info.txt\necho \"---------------硬盘--------------------\">>info.txt\nfdisk -l >>info.txt\necho \"---------------结束--------------------\">>info.txt\n```\n\n\n\n### 4. 确认系统版本\n\n```\n  [root@node71 ~]# cat /etc/redhat-release\n  CentOS Linux release 7.9.2009 (Core)\n```\n\n\n### 5. 磁盘分区\n因服务主要以docker运行为主，建立最大磁盘挂载`/data`。所有数据均存于data目录。\n```shell\n[root@localhost ~]# lsblk\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda      8:0    0   20G  0 disk\n├─sda1   8:1    0  300M  0 part /boot\n└─sda2   8:2    0  5.9G  0 part [SWAP]\nsdb      8:16   0   40G  0 disk\n└─sdb1   8:17   0   40G  0 part /\nsr0     11:0    1 61.2M  0 rom\nsr1     11:1    1  4.4G  0 rom\n```\n\n### 6. 配置防火墙\n```shell\nsystemctl disable firewalld.service\nsystemctl status firewalld.service\nsystemctl stop firewalld.service\nsystemctl enable firewalld.service\nsystemctl start firewalld.service\n```\n\n### 7. 关闭交换分区\n```shell\n[root@ansible ~]# swapoff -a\n[root@ansible ~]# free -m\n               total        used        free      shared  buff/cache   available\nMem:            3631        3475         155          41         270         155\nSwap:              0           0           0\n```\n\n### 8. 添加管理员\n\n```bash\nadduser dahouzi\npasswd dahouzi\n\nsudo vim /etc/sudoers\n# 添加以下两行\ndahouzi\tALL=(ALL) \tNOPASSWD:ALL\n%dahouzi\tALL=(ALL) \tNOPASSWD:ALL\n```\n\n### 9. 升级openssh\n\n```bash\nyum install -y openssl-devel openssh --downloadonly --downloaddir=/root/software\n\nyum localinstall *.rpm -y\n```","source":"_posts/04操作系统/0403系统安装初始化.md","raw":"---\nauthor: 空空\n---\n## centos7系统初始化\n\n### 1. 修改国内源（阿里云）\n\n1. yum配置文件路径 `/etc/yum.repos.d/centos.repo`\n\n2. 备份源配置 `mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup`\n3. 阿里源配置\n4. 更新缓存 `yum makecache && yum update`\n\n```shell\n# CentOS-Base.repo\n[base]\nname=CentOS-$releasever - Base - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n#additional packages that extend functionality of existing packages\n[centosplus]\nname=CentOS-$releasever - Plus - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n \n[PowerTools]\nname=CentOS-$releasever - PowerTools - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/\ngpgcheck=1\nenabled=0\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n\n[AppStream]\nname=CentOS-$releasever - AppStream - mirrors.aliyun.com\n#failovermethod=priority\nbaseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\n        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official\n```\n\n### 2. 主机命名\n\ndahouzi-node001，首位数字定义机房。\n\n\n\n### 3. 收集主机信息\n\n```\necho \"--------------防火墙---------------------\">>info.txt\nfirewall-cmd --state >>info.txt\necho \"--------------网卡---------------------\">>info.txt\nifconfig -a >>info.txt\necho \"---------------运行中的程序--------------------\">>info.txt\nsystemctl list-units -t service --state=running >>info.txt\necho \"---------------磁盘情况--------------------\" >>info.txt \ndf -Th | grep 'Filesystem\\|^/dev/sd*\\|^/dev/vd*\\|^/dev/hd*\\|^/dev/mapper*\\|^/dev/md*' >>info.txt\necho \"---------------内存情况--------------------\">>info.txt\nfree -h >>info.txt\necho \"---------------处理器情况--------------------\">>info.txt\ncat /proc/cpuinfo >>info.txt\necho \"---------------硬盘--------------------\">>info.txt\nfdisk -l >>info.txt\necho \"---------------结束--------------------\">>info.txt\n```\n\n\n\n### 4. 确认系统版本\n\n```\n  [root@node71 ~]# cat /etc/redhat-release\n  CentOS Linux release 7.9.2009 (Core)\n```\n\n\n### 5. 磁盘分区\n因服务主要以docker运行为主，建立最大磁盘挂载`/data`。所有数据均存于data目录。\n```shell\n[root@localhost ~]# lsblk\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda      8:0    0   20G  0 disk\n├─sda1   8:1    0  300M  0 part /boot\n└─sda2   8:2    0  5.9G  0 part [SWAP]\nsdb      8:16   0   40G  0 disk\n└─sdb1   8:17   0   40G  0 part /\nsr0     11:0    1 61.2M  0 rom\nsr1     11:1    1  4.4G  0 rom\n```\n\n### 6. 配置防火墙\n```shell\nsystemctl disable firewalld.service\nsystemctl status firewalld.service\nsystemctl stop firewalld.service\nsystemctl enable firewalld.service\nsystemctl start firewalld.service\n```\n\n### 7. 关闭交换分区\n```shell\n[root@ansible ~]# swapoff -a\n[root@ansible ~]# free -m\n               total        used        free      shared  buff/cache   available\nMem:            3631        3475         155          41         270         155\nSwap:              0           0           0\n```\n\n### 8. 添加管理员\n\n```bash\nadduser dahouzi\npasswd dahouzi\n\nsudo vim /etc/sudoers\n# 添加以下两行\ndahouzi\tALL=(ALL) \tNOPASSWD:ALL\n%dahouzi\tALL=(ALL) \tNOPASSWD:ALL\n```\n\n### 9. 升级openssh\n\n```bash\nyum install -y openssl-devel openssh --downloadonly --downloaddir=/root/software\n\nyum localinstall *.rpm -y\n```","slug":"04操作系统/0403系统安装初始化","published":1,"date":"2024-07-20T06:02:46.329Z","updated":"2024-07-20T06:12:31.287Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqe0007j38a1vzv4buu","content":"<h2 id=\"centos7系统初始化\">centos7系统初始化</h2>\n<h3 id=\"1-修改国内源（阿里云）\">1. 修改国内源（阿里云）</h3>\n<ol>\n<li>\n<p>yum配置文件路径 <code>/etc/yum.repos.d/centos.repo</code></p>\n</li>\n<li>\n<p>备份源配置 <code>mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup</code></p>\n</li>\n<li>\n<p>阿里源配置</p>\n</li>\n<li>\n<p>更新缓存 <code>yum makecache &amp;&amp; yum update</code></p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS-Base.repo</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-$releasever - Base - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">additional packages that extend functionality of existing packages</span></span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-$releasever - Plus - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"> </span><br><span class=\"line\">[PowerTools]</span><br><span class=\"line\">name=CentOS-$releasever - PowerTools - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"></span><br><span class=\"line\">[AppStream]</span><br><span class=\"line\">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-主机命名\">2. 主机命名</h3>\n<p>dahouzi-node001，首位数字定义机房。</p>\n<h3 id=\"3-收集主机信息\">3. 收集主机信息</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;--------------防火墙---------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">firewall-cmd --state &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;--------------网卡---------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">ifconfig -a &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------运行中的程序--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">systemctl list-units -t service --state=running &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------磁盘情况--------------------&quot; &gt;&gt;info.txt </span><br><span class=\"line\">df -Th | grep &#x27;Filesystem\\|^/dev/sd*\\|^/dev/vd*\\|^/dev/hd*\\|^/dev/mapper*\\|^/dev/md*&#x27; &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------内存情况--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">free -h &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------处理器情况--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">cat /proc/cpuinfo &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------硬盘--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">fdisk -l &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------结束--------------------&quot;&gt;&gt;info.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-确认系统版本\">4. 确认系统版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-磁盘分区\">5. 磁盘分区</h3>\n<p>因服务主要以docker运行为主，建立最大磁盘挂载<code>/data</code>。所有数据均存于data目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lsblk</span><br><span class=\"line\">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">sda      8:0    0   20G  0 disk</span><br><span class=\"line\">├─sda1   8:1    0  300M  0 part /boot</span><br><span class=\"line\">└─sda2   8:2    0  5.9G  0 part [SWAP]</span><br><span class=\"line\">sdb      8:16   0   40G  0 disk</span><br><span class=\"line\">└─sdb1   8:17   0   40G  0 part /</span><br><span class=\"line\">sr0     11:0    1 61.2M  0 rom</span><br><span class=\"line\">sr1     11:1    1  4.4G  0 rom</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-配置防火墙\">6. 配置防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-关闭交换分区\">7. 关闭交换分区</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansible ~]# swapoff -a</span><br><span class=\"line\">[root@ansible ~]# free -m</span><br><span class=\"line\">               total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:            3631        3475         155          41         270         155</span><br><span class=\"line\">Swap:              0           0           0</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-添加管理员\">8. 添加管理员</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser dahouzi</span><br><span class=\"line\">passwd dahouzi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/sudoers</span><br><span class=\"line\"><span class=\"comment\"># 添加以下两行</span></span><br><span class=\"line\">dahouzi\tALL=(ALL) \tNOPASSWD:ALL</span><br><span class=\"line\">%dahouzi\tALL=(ALL) \tNOPASSWD:ALL</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-升级openssh\">9. 升级openssh</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl-devel openssh --downloadonly --downloaddir=/root/software</span><br><span class=\"line\"></span><br><span class=\"line\">yum localinstall *.rpm -y</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"centos7系统初始化\">centos7系统初始化</h2>\n<h3 id=\"1-修改国内源（阿里云）\">1. 修改国内源（阿里云）</h3>\n<ol>\n<li>\n<p>yum配置文件路径 <code>/etc/yum.repos.d/centos.repo</code></p>\n</li>\n<li>\n<p>备份源配置 <code>mv /etc/yum.repos.d/centos.repo /etc/yum.repos.d/centos.repo.backup</code></p>\n</li>\n<li>\n<p>阿里源配置</p>\n</li>\n<li>\n<p>更新缓存 <code>yum makecache &amp;&amp; yum update</code></p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CentOS-Base.repo</span></span><br><span class=\"line\">[base]</span><br><span class=\"line\">name=CentOS-$releasever - Base - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/BaseOS/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">additional packages that extend functionality of existing packages</span></span><br><span class=\"line\">[centosplus]</span><br><span class=\"line\">name=CentOS-$releasever - Plus - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/centosplus/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"> </span><br><span class=\"line\">[PowerTools]</span><br><span class=\"line\">name=CentOS-$releasever - PowerTools - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/PowerTools/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br><span class=\"line\"></span><br><span class=\"line\">[AppStream]</span><br><span class=\"line\">name=CentOS-$releasever - AppStream - mirrors.aliyun.com</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">failovermethod=priority</span></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">        http://mirrors.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">        http://mirrors.cloud.aliyuncs.com/centos-stream/$stream/AppStream/$basearch/os/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/centos-stream/RPM-GPG-KEY-CentOS-Official</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-主机命名\">2. 主机命名</h3>\n<p>dahouzi-node001，首位数字定义机房。</p>\n<h3 id=\"3-收集主机信息\">3. 收集主机信息</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;--------------防火墙---------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">firewall-cmd --state &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;--------------网卡---------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">ifconfig -a &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------运行中的程序--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">systemctl list-units -t service --state=running &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------磁盘情况--------------------&quot; &gt;&gt;info.txt </span><br><span class=\"line\">df -Th | grep &#x27;Filesystem\\|^/dev/sd*\\|^/dev/vd*\\|^/dev/hd*\\|^/dev/mapper*\\|^/dev/md*&#x27; &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------内存情况--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">free -h &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------处理器情况--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">cat /proc/cpuinfo &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------硬盘--------------------&quot;&gt;&gt;info.txt</span><br><span class=\"line\">fdisk -l &gt;&gt;info.txt</span><br><span class=\"line\">echo &quot;---------------结束--------------------&quot;&gt;&gt;info.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-确认系统版本\">4. 确认系统版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-磁盘分区\">5. 磁盘分区</h3>\n<p>因服务主要以docker运行为主，建立最大磁盘挂载<code>/data</code>。所有数据均存于data目录。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lsblk</span><br><span class=\"line\">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class=\"line\">sda      8:0    0   20G  0 disk</span><br><span class=\"line\">├─sda1   8:1    0  300M  0 part /boot</span><br><span class=\"line\">└─sda2   8:2    0  5.9G  0 part [SWAP]</span><br><span class=\"line\">sdb      8:16   0   40G  0 disk</span><br><span class=\"line\">└─sdb1   8:17   0   40G  0 part /</span><br><span class=\"line\">sr0     11:0    1 61.2M  0 rom</span><br><span class=\"line\">sr1     11:1    1  4.4G  0 rom</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-配置防火墙\">6. 配置防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\">systemctl status firewalld.service</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-关闭交换分区\">7. 关闭交换分区</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansible ~]# swapoff -a</span><br><span class=\"line\">[root@ansible ~]# free -m</span><br><span class=\"line\">               total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:            3631        3475         155          41         270         155</span><br><span class=\"line\">Swap:              0           0           0</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-添加管理员\">8. 添加管理员</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser dahouzi</span><br><span class=\"line\">passwd dahouzi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/sudoers</span><br><span class=\"line\"><span class=\"comment\"># 添加以下两行</span></span><br><span class=\"line\">dahouzi\tALL=(ALL) \tNOPASSWD:ALL</span><br><span class=\"line\">%dahouzi\tALL=(ALL) \tNOPASSWD:ALL</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-升级openssh\">9. 升级openssh</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl-devel openssh --downloadonly --downloaddir=/root/software</span><br><span class=\"line\"></span><br><span class=\"line\">yum localinstall *.rpm -y</span><br></pre></td></tr></table></figure>"},{"_content":"## zookeeper集群环境部署\n\n前置说明：\n- 日志文件：dataLogDir=/opt/infra/apache-zookeeper-3.7.1-bin/logs\n- 数据文件：dataDir=/tmp/zookeeper\n- 安装路径：/opt/infra/apache-zookeeper-3.7.1-bin\n\n\n### 1. 下载zookeeper包\n注意生产环境请使用最新稳定版本。\n```shell\nThe Apache ZooKeeper community supports two release branches at a time: stable and current. The stable version of ZooKeeper is 3.7.x and the current version is 3.8.x. \n```\n- 下载地址：https://zookeeper.apache.org/releases.html\n\n\n### 2. zookeeper上传至配置服务器（ansible）\n安装文件上传至ansible主机如下路径\n- /etc/ansible/script/zookeeper/infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz\n\n### 3. 编辑playbook脚本\n```shell\n[root@localhost etc]# tree ansible/\nansible/\n├── ansible.cfg\n├── hosts(主机列表)\n├── roles(空文件夹)\n└── script\n    └── zookeeper\n        ├── infra_pkgs\n        │   ├── apache-zookeeper-3.7.1-bin.tar.gz(zookeeper安装包)\n        │   ├── myid.j2(配置文件)\n        │   ├── zk.sh(配置文件)\n        │   └── zoo.cfg.j2(配置文件)\n        └── zookeeper_install_playbook.yml(playbook)\n4 directories, 7 files\n```\n- hosts文件\n在主机IP后添加`zk_myid=[number]`定义zookeeper id，后续`myid.j2`模版中会取这个值。\n```shell\n[kubernetes]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=1\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=2\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=3\n```\n\n- myid.j2模板\n根据ip发送到对应主机，如不明白，需先了解手动配置集群。看参考链接2。\n```shell\n{{ zk_myid }}\n```\n\n- zoo.cfg.j2模板\n```shell\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir={{zk_data_dir}}\ndataLogDir={{zk_datalog_dir}}\nclientPort=2181\n\nautopurge.snapRetainCount=5\nautopurge.purgeInterval=1\nmaxClientCnxns=2000\n\n#master,node1,node2均为主机名\nserver.1=master:2888:3888\nserver.2=node1:2888:3888\nserver.3=node2:2888:3888\n```\n\n- playbook文件\n```shell\n- hosts: kubernetes\n  vars:\n      cfg_files:\n        - src: \"./infra_pkgs/zoo.cfg.j2\"\n          dest: \"/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg\"\n        - src: \"./infra_pkgs/myid.j2\"\n          dest: \"/tmp/zookeeper/myid\"\n        - src: \"./infra_pkgs/zk.sh\"\n          dest: \"/etc/profile.d/zk.sh\"\n  gather_facts: no\n  user: root\n  tasks:\n    - name: 删除原文件\n      shell:\n        cmd: rm -rf /opt/infra/apache-zookeeper-3.7.1-bin/ /tmp/zookeeper/\n    - name: Create zookeeper installation directory\n      file:\n        path: \"{{item}}\"\n        state: directory\n      notify: Restart zookeeper service\n      with_items:\n          - /opt/infra\n          - /tmp/zookeeper\n    - name: Upload zookeeper package\n      unarchive:\n        src: ./infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz\n        dest: /opt/infra\n      notify: Restart zookeeper service\n    - name: Init zookeeper config\n      template:\n        src: \"{{item.src}}\"\n        dest: \"{{item.dest}}\"\n      with_items: \"{{cfg_files}}\"\n      notify: Restart zookeeper service\n  handlers:\n    - name: Restart zookeeper service\n      shell:\n        cmd: /opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart\n```\n\n### 4. 验证zookeeper运行情况\n\n- 确认/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg文件\n- 确认/tmp/zookeeper/myid文件\n```shell\ncat /opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg\ncat /tmp/zookeeper/myid\n```\n\n- 执行playbook\n```shell\ncd /etc/ansible/script/zookeeper/\n\nansible-playbook zookeeper_install_playbook.yml  -e '{ \"zk_servers\": [ {\"ip\": \"127.0.0.1\", \"myid\": 1 } ], \"zk_election_port\": 3888, \"zk_communication_port\": 2888, \"zk_data_dir\": \"/tmp/zookeeper\", \"zk_datalog_dir\": \"/opt/infra/apache-zookeeper-3.7.1-bin/logs\" }'\n```\n\n### 5. 单独维护\n\n```shell\n# 查看状态\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh status\n# 停止\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh stop\n# 重启\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart\n# 启动\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh start\n# 启动失败时，带输出启动查看\nzkServer.sh start-foreground\n```\n\n\n\n### 6.异常处理\n```shell\n2023-05-27 22:34:50,874 [myid:1] - ERROR [main:QuorumPeerMain@114] - Unexpected exception, exiting abnormally\njava.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:461)\n        at sun.nio.ch.Net.bind(Net.java:453)\n        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:222)\n        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:85)\n        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:78)\n        at org.apache.zookeeper.server.NIOServerCnxnFactory.configure(NIOServerCnxnFactory.java:662)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:169)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:137)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:91)\n2023-05-27 22:34:50,875 [myid:1] - INFO  [main:ZKAuditProvider@42] - ZooKeeper audit is disabled.\n2023-05-27 22:34:50,876 [myid:1] - ERROR [main:ServiceUtils@48] - Exiting JVM with code 1\n[root@node71 ~]# netstat -nltp | grep 2181\ntcp6       0      0 :::2181                 :::*                    LISTEN      8305/java\n[root@node71 ~]# kill -9 8305\n\n```\n\n\n\n\n- 参考：[利用 ansible 部署 zookeeper 集群 | kikimo (coderatwork.cn)](https://coderatwork.cn/posts/deploy-zookeeper-with-ansible/)\n","source":"_posts/07中间件/7.1.Zookeeper集群环境部署.md","raw":"## zookeeper集群环境部署\n\n前置说明：\n- 日志文件：dataLogDir=/opt/infra/apache-zookeeper-3.7.1-bin/logs\n- 数据文件：dataDir=/tmp/zookeeper\n- 安装路径：/opt/infra/apache-zookeeper-3.7.1-bin\n\n\n### 1. 下载zookeeper包\n注意生产环境请使用最新稳定版本。\n```shell\nThe Apache ZooKeeper community supports two release branches at a time: stable and current. The stable version of ZooKeeper is 3.7.x and the current version is 3.8.x. \n```\n- 下载地址：https://zookeeper.apache.org/releases.html\n\n\n### 2. zookeeper上传至配置服务器（ansible）\n安装文件上传至ansible主机如下路径\n- /etc/ansible/script/zookeeper/infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz\n\n### 3. 编辑playbook脚本\n```shell\n[root@localhost etc]# tree ansible/\nansible/\n├── ansible.cfg\n├── hosts(主机列表)\n├── roles(空文件夹)\n└── script\n    └── zookeeper\n        ├── infra_pkgs\n        │   ├── apache-zookeeper-3.7.1-bin.tar.gz(zookeeper安装包)\n        │   ├── myid.j2(配置文件)\n        │   ├── zk.sh(配置文件)\n        │   └── zoo.cfg.j2(配置文件)\n        └── zookeeper_install_playbook.yml(playbook)\n4 directories, 7 files\n```\n- hosts文件\n在主机IP后添加`zk_myid=[number]`定义zookeeper id，后续`myid.j2`模版中会取这个值。\n```shell\n[kubernetes]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=1\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=2\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=3\n```\n\n- myid.j2模板\n根据ip发送到对应主机，如不明白，需先了解手动配置集群。看参考链接2。\n```shell\n{{ zk_myid }}\n```\n\n- zoo.cfg.j2模板\n```shell\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir={{zk_data_dir}}\ndataLogDir={{zk_datalog_dir}}\nclientPort=2181\n\nautopurge.snapRetainCount=5\nautopurge.purgeInterval=1\nmaxClientCnxns=2000\n\n#master,node1,node2均为主机名\nserver.1=master:2888:3888\nserver.2=node1:2888:3888\nserver.3=node2:2888:3888\n```\n\n- playbook文件\n```shell\n- hosts: kubernetes\n  vars:\n      cfg_files:\n        - src: \"./infra_pkgs/zoo.cfg.j2\"\n          dest: \"/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg\"\n        - src: \"./infra_pkgs/myid.j2\"\n          dest: \"/tmp/zookeeper/myid\"\n        - src: \"./infra_pkgs/zk.sh\"\n          dest: \"/etc/profile.d/zk.sh\"\n  gather_facts: no\n  user: root\n  tasks:\n    - name: 删除原文件\n      shell:\n        cmd: rm -rf /opt/infra/apache-zookeeper-3.7.1-bin/ /tmp/zookeeper/\n    - name: Create zookeeper installation directory\n      file:\n        path: \"{{item}}\"\n        state: directory\n      notify: Restart zookeeper service\n      with_items:\n          - /opt/infra\n          - /tmp/zookeeper\n    - name: Upload zookeeper package\n      unarchive:\n        src: ./infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz\n        dest: /opt/infra\n      notify: Restart zookeeper service\n    - name: Init zookeeper config\n      template:\n        src: \"{{item.src}}\"\n        dest: \"{{item.dest}}\"\n      with_items: \"{{cfg_files}}\"\n      notify: Restart zookeeper service\n  handlers:\n    - name: Restart zookeeper service\n      shell:\n        cmd: /opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart\n```\n\n### 4. 验证zookeeper运行情况\n\n- 确认/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg文件\n- 确认/tmp/zookeeper/myid文件\n```shell\ncat /opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg\ncat /tmp/zookeeper/myid\n```\n\n- 执行playbook\n```shell\ncd /etc/ansible/script/zookeeper/\n\nansible-playbook zookeeper_install_playbook.yml  -e '{ \"zk_servers\": [ {\"ip\": \"127.0.0.1\", \"myid\": 1 } ], \"zk_election_port\": 3888, \"zk_communication_port\": 2888, \"zk_data_dir\": \"/tmp/zookeeper\", \"zk_datalog_dir\": \"/opt/infra/apache-zookeeper-3.7.1-bin/logs\" }'\n```\n\n### 5. 单独维护\n\n```shell\n# 查看状态\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh status\n# 停止\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh stop\n# 重启\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart\n# 启动\n/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh start\n# 启动失败时，带输出启动查看\nzkServer.sh start-foreground\n```\n\n\n\n### 6.异常处理\n```shell\n2023-05-27 22:34:50,874 [myid:1] - ERROR [main:QuorumPeerMain@114] - Unexpected exception, exiting abnormally\njava.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:461)\n        at sun.nio.ch.Net.bind(Net.java:453)\n        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:222)\n        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:85)\n        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:78)\n        at org.apache.zookeeper.server.NIOServerCnxnFactory.configure(NIOServerCnxnFactory.java:662)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:169)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:137)\n        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:91)\n2023-05-27 22:34:50,875 [myid:1] - INFO  [main:ZKAuditProvider@42] - ZooKeeper audit is disabled.\n2023-05-27 22:34:50,876 [myid:1] - ERROR [main:ServiceUtils@48] - Exiting JVM with code 1\n[root@node71 ~]# netstat -nltp | grep 2181\ntcp6       0      0 :::2181                 :::*                    LISTEN      8305/java\n[root@node71 ~]# kill -9 8305\n\n```\n\n\n\n\n- 参考：[利用 ansible 部署 zookeeper 集群 | kikimo (coderatwork.cn)](https://coderatwork.cn/posts/deploy-zookeeper-with-ansible/)\n","slug":"07中间件/7.1.Zookeeper集群环境部署","published":1,"date":"2024-07-18T05:59:28.322Z","updated":"2024-07-18T06:02:31.876Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqf0008j38af273gwzt","content":"<h2 id=\"zookeeper集群环境部署\">zookeeper集群环境部署</h2>\n<p>前置说明：</p>\n<ul>\n<li>日志文件：dataLogDir=/opt/infra/apache-zookeeper-3.7.1-bin/logs</li>\n<li>数据文件：dataDir=/tmp/zookeeper</li>\n<li>安装路径：/opt/infra/apache-zookeeper-3.7.1-bin</li>\n</ul>\n<h3 id=\"1-下载zookeeper包\">1. 下载zookeeper包</h3>\n<p>注意生产环境请使用最新稳定版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Apache ZooKeeper community supports two release branches at a time: stable and current. The stable version of ZooKeeper is 3.7.x and the current version is 3.8.x. </span><br></pre></td></tr></table></figure>\n<ul>\n<li>下载地址：<a href=\"https://zookeeper.apache.org/releases.html\">https://zookeeper.apache.org/releases.html</a></li>\n</ul>\n<h3 id=\"2-zookeeper上传至配置服务器（ansible）\">2. zookeeper上传至配置服务器（ansible）</h3>\n<p>安装文件上传至ansible主机如下路径</p>\n<ul>\n<li>/etc/ansible/script/zookeeper/infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz</li>\n</ul>\n<h3 id=\"3-编辑playbook脚本\">3. 编辑playbook脚本</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]# tree ansible/</span><br><span class=\"line\">ansible/</span><br><span class=\"line\">├── ansible.cfg</span><br><span class=\"line\">├── hosts(主机列表)</span><br><span class=\"line\">├── roles(空文件夹)</span><br><span class=\"line\">└── script</span><br><span class=\"line\">    └── zookeeper</span><br><span class=\"line\">        ├── infra_pkgs</span><br><span class=\"line\">        │   ├── apache-zookeeper-3.7.1-bin.tar.gz(zookeeper安装包)</span><br><span class=\"line\">        │   ├── myid.j2(配置文件)</span><br><span class=\"line\">        │   ├── zk.sh(配置文件)</span><br><span class=\"line\">        │   └── zoo.cfg.j2(配置文件)</span><br><span class=\"line\">        └── zookeeper_install_playbook.yml(playbook)</span><br><span class=\"line\">4 directories, 7 files</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hosts文件<br>\n在主机IP后添加<code>zk_myid=[number]</code>定义zookeeper id，后续<code>myid.j2</code>模版中会取这个值。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kubernetes]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=1</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=2</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>myid.j2模板<br>\n根据ip发送到对应主机，如不明白，需先了解手动配置集群。看参考链接2。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; zk_myid &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>zoo.cfg.j2模板</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=&#123;&#123;zk_data_dir&#125;&#125;</span><br><span class=\"line\">dataLogDir=&#123;&#123;zk_datalog_dir&#125;&#125;</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"></span><br><span class=\"line\">autopurge.snapRetainCount=5</span><br><span class=\"line\">autopurge.purgeInterval=1</span><br><span class=\"line\">maxClientCnxns=2000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">master,node1,node2均为主机名</span></span><br><span class=\"line\">server.1=master:2888:3888</span><br><span class=\"line\">server.2=node1:2888:3888</span><br><span class=\"line\">server.3=node2:2888:3888</span><br></pre></td></tr></table></figure>\n<ul>\n<li>playbook文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: kubernetes</span><br><span class=\"line\">  vars:</span><br><span class=\"line\">      cfg_files:</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/zoo.cfg.j2&quot;</span><br><span class=\"line\">          dest: &quot;/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg&quot;</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/myid.j2&quot;</span><br><span class=\"line\">          dest: &quot;/tmp/zookeeper/myid&quot;</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/zk.sh&quot;</span><br><span class=\"line\">          dest: &quot;/etc/profile.d/zk.sh&quot;</span><br><span class=\"line\">  gather_facts: no</span><br><span class=\"line\">  user: root</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">    - name: 删除原文件</span><br><span class=\"line\">      shell:</span><br><span class=\"line\">        cmd: rm -rf /opt/infra/apache-zookeeper-3.7.1-bin/ /tmp/zookeeper/</span><br><span class=\"line\">    - name: Create zookeeper installation directory</span><br><span class=\"line\">      file:</span><br><span class=\"line\">        path: &quot;&#123;&#123;item&#125;&#125;&quot;</span><br><span class=\"line\">        state: directory</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">      with_items:</span><br><span class=\"line\">          - /opt/infra</span><br><span class=\"line\">          - /tmp/zookeeper</span><br><span class=\"line\">    - name: Upload zookeeper package</span><br><span class=\"line\">      unarchive:</span><br><span class=\"line\">        src: ./infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz</span><br><span class=\"line\">        dest: /opt/infra</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">    - name: Init zookeeper config</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        src: &quot;&#123;&#123;item.src&#125;&#125;&quot;</span><br><span class=\"line\">        dest: &quot;&#123;&#123;item.dest&#125;&#125;&quot;</span><br><span class=\"line\">      with_items: &quot;&#123;&#123;cfg_files&#125;&#125;&quot;</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">  handlers:</span><br><span class=\"line\">    - name: Restart zookeeper service</span><br><span class=\"line\">      shell:</span><br><span class=\"line\">        cmd: /opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-验证zookeeper运行情况\">4. 验证zookeeper运行情况</h3>\n<ul>\n<li>确认/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg文件</li>\n<li>确认/tmp/zookeeper/myid文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg</span><br><span class=\"line\">cat /tmp/zookeeper/myid</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行playbook</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ansible/script/zookeeper/</span><br><span class=\"line\"></span><br><span class=\"line\">ansible-playbook zookeeper_install_playbook.yml  -e &#x27;&#123; &quot;zk_servers&quot;: [ &#123;&quot;ip&quot;: &quot;127.0.0.1&quot;, &quot;myid&quot;: 1 &#125; ], &quot;zk_election_port&quot;: 3888, &quot;zk_communication_port&quot;: 2888, &quot;zk_data_dir&quot;: &quot;/tmp/zookeeper&quot;, &quot;zk_datalog_dir&quot;: &quot;/opt/infra/apache-zookeeper-3.7.1-bin/logs&quot; &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-单独维护\">5. 单独维护</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh stop</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh start</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动失败时，带输出启动查看</span></span><br><span class=\"line\">zkServer.sh start-foreground</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-异常处理\">6.异常处理</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2023-05-27 22:34:50,874 [myid:1] - ERROR [main:QuorumPeerMain@114] - Unexpected exception, exiting abnormally</span><br><span class=\"line\">java.net.BindException: Address already in use</span><br><span class=\"line\">        at sun.nio.ch.Net.bind0(Native Method)</span><br><span class=\"line\">        at sun.nio.ch.Net.bind(Net.java:461)</span><br><span class=\"line\">        at sun.nio.ch.Net.bind(Net.java:453)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:222)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:85)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:78)</span><br><span class=\"line\">        at org.apache.zookeeper.server.NIOServerCnxnFactory.configure(NIOServerCnxnFactory.java:662)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:169)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:137)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:91)</span><br><span class=\"line\">2023-05-27 22:34:50,875 [myid:1] - INFO  [main:ZKAuditProvider@42] - ZooKeeper audit is disabled.</span><br><span class=\"line\">2023-05-27 22:34:50,876 [myid:1] - ERROR [main:ServiceUtils@48] - Exiting JVM with code 1</span><br><span class=\"line\">[root@node71 ~]# netstat -nltp | grep 2181</span><br><span class=\"line\">tcp6       0      0 :::2181                 :::*                    LISTEN      8305/java</span><br><span class=\"line\">[root@node71 ~]# kill -9 8305</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考：<a href=\"https://coderatwork.cn/posts/deploy-zookeeper-with-ansible/\">利用 ansible 部署 zookeeper 集群 | kikimo (coderatwork.cn)</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"zookeeper集群环境部署\">zookeeper集群环境部署</h2>\n<p>前置说明：</p>\n<ul>\n<li>日志文件：dataLogDir=/opt/infra/apache-zookeeper-3.7.1-bin/logs</li>\n<li>数据文件：dataDir=/tmp/zookeeper</li>\n<li>安装路径：/opt/infra/apache-zookeeper-3.7.1-bin</li>\n</ul>\n<h3 id=\"1-下载zookeeper包\">1. 下载zookeeper包</h3>\n<p>注意生产环境请使用最新稳定版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Apache ZooKeeper community supports two release branches at a time: stable and current. The stable version of ZooKeeper is 3.7.x and the current version is 3.8.x. </span><br></pre></td></tr></table></figure>\n<ul>\n<li>下载地址：<a href=\"https://zookeeper.apache.org/releases.html\">https://zookeeper.apache.org/releases.html</a></li>\n</ul>\n<h3 id=\"2-zookeeper上传至配置服务器（ansible）\">2. zookeeper上传至配置服务器（ansible）</h3>\n<p>安装文件上传至ansible主机如下路径</p>\n<ul>\n<li>/etc/ansible/script/zookeeper/infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz</li>\n</ul>\n<h3 id=\"3-编辑playbook脚本\">3. 编辑playbook脚本</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost etc]# tree ansible/</span><br><span class=\"line\">ansible/</span><br><span class=\"line\">├── ansible.cfg</span><br><span class=\"line\">├── hosts(主机列表)</span><br><span class=\"line\">├── roles(空文件夹)</span><br><span class=\"line\">└── script</span><br><span class=\"line\">    └── zookeeper</span><br><span class=\"line\">        ├── infra_pkgs</span><br><span class=\"line\">        │   ├── apache-zookeeper-3.7.1-bin.tar.gz(zookeeper安装包)</span><br><span class=\"line\">        │   ├── myid.j2(配置文件)</span><br><span class=\"line\">        │   ├── zk.sh(配置文件)</span><br><span class=\"line\">        │   └── zoo.cfg.j2(配置文件)</span><br><span class=\"line\">        └── zookeeper_install_playbook.yml(playbook)</span><br><span class=\"line\">4 directories, 7 files</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hosts文件<br>\n在主机IP后添加<code>zk_myid=[number]</code>定义zookeeper id，后续<code>myid.j2</code>模版中会取这个值。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kubernetes]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=1</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=2</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>myid.j2模板<br>\n根据ip发送到对应主机，如不明白，需先了解手动配置集群。看参考链接2。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; zk_myid &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>zoo.cfg.j2模板</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=&#123;&#123;zk_data_dir&#125;&#125;</span><br><span class=\"line\">dataLogDir=&#123;&#123;zk_datalog_dir&#125;&#125;</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"></span><br><span class=\"line\">autopurge.snapRetainCount=5</span><br><span class=\"line\">autopurge.purgeInterval=1</span><br><span class=\"line\">maxClientCnxns=2000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">master,node1,node2均为主机名</span></span><br><span class=\"line\">server.1=master:2888:3888</span><br><span class=\"line\">server.2=node1:2888:3888</span><br><span class=\"line\">server.3=node2:2888:3888</span><br></pre></td></tr></table></figure>\n<ul>\n<li>playbook文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: kubernetes</span><br><span class=\"line\">  vars:</span><br><span class=\"line\">      cfg_files:</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/zoo.cfg.j2&quot;</span><br><span class=\"line\">          dest: &quot;/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg&quot;</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/myid.j2&quot;</span><br><span class=\"line\">          dest: &quot;/tmp/zookeeper/myid&quot;</span><br><span class=\"line\">        - src: &quot;./infra_pkgs/zk.sh&quot;</span><br><span class=\"line\">          dest: &quot;/etc/profile.d/zk.sh&quot;</span><br><span class=\"line\">  gather_facts: no</span><br><span class=\"line\">  user: root</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">    - name: 删除原文件</span><br><span class=\"line\">      shell:</span><br><span class=\"line\">        cmd: rm -rf /opt/infra/apache-zookeeper-3.7.1-bin/ /tmp/zookeeper/</span><br><span class=\"line\">    - name: Create zookeeper installation directory</span><br><span class=\"line\">      file:</span><br><span class=\"line\">        path: &quot;&#123;&#123;item&#125;&#125;&quot;</span><br><span class=\"line\">        state: directory</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">      with_items:</span><br><span class=\"line\">          - /opt/infra</span><br><span class=\"line\">          - /tmp/zookeeper</span><br><span class=\"line\">    - name: Upload zookeeper package</span><br><span class=\"line\">      unarchive:</span><br><span class=\"line\">        src: ./infra_pkgs/apache-zookeeper-3.7.1-bin.tar.gz</span><br><span class=\"line\">        dest: /opt/infra</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">    - name: Init zookeeper config</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        src: &quot;&#123;&#123;item.src&#125;&#125;&quot;</span><br><span class=\"line\">        dest: &quot;&#123;&#123;item.dest&#125;&#125;&quot;</span><br><span class=\"line\">      with_items: &quot;&#123;&#123;cfg_files&#125;&#125;&quot;</span><br><span class=\"line\">      notify: Restart zookeeper service</span><br><span class=\"line\">  handlers:</span><br><span class=\"line\">    - name: Restart zookeeper service</span><br><span class=\"line\">      shell:</span><br><span class=\"line\">        cmd: /opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-验证zookeeper运行情况\">4. 验证zookeeper运行情况</h3>\n<ul>\n<li>确认/opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg文件</li>\n<li>确认/tmp/zookeeper/myid文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /opt/infra/apache-zookeeper-3.7.1-bin/conf/zoo.cfg</span><br><span class=\"line\">cat /tmp/zookeeper/myid</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行playbook</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ansible/script/zookeeper/</span><br><span class=\"line\"></span><br><span class=\"line\">ansible-playbook zookeeper_install_playbook.yml  -e &#x27;&#123; &quot;zk_servers&quot;: [ &#123;&quot;ip&quot;: &quot;127.0.0.1&quot;, &quot;myid&quot;: 1 &#125; ], &quot;zk_election_port&quot;: 3888, &quot;zk_communication_port&quot;: 2888, &quot;zk_data_dir&quot;: &quot;/tmp/zookeeper&quot;, &quot;zk_datalog_dir&quot;: &quot;/opt/infra/apache-zookeeper-3.7.1-bin/logs&quot; &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-单独维护\">5. 单独维护</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh stop</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh restart</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">/opt/infra/apache-zookeeper-3.7.1-bin/bin/zkServer.sh start</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动失败时，带输出启动查看</span></span><br><span class=\"line\">zkServer.sh start-foreground</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-异常处理\">6.异常处理</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2023-05-27 22:34:50,874 [myid:1] - ERROR [main:QuorumPeerMain@114] - Unexpected exception, exiting abnormally</span><br><span class=\"line\">java.net.BindException: Address already in use</span><br><span class=\"line\">        at sun.nio.ch.Net.bind0(Native Method)</span><br><span class=\"line\">        at sun.nio.ch.Net.bind(Net.java:461)</span><br><span class=\"line\">        at sun.nio.ch.Net.bind(Net.java:453)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:222)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:85)</span><br><span class=\"line\">        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:78)</span><br><span class=\"line\">        at org.apache.zookeeper.server.NIOServerCnxnFactory.configure(NIOServerCnxnFactory.java:662)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.runFromConfig(QuorumPeerMain.java:169)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:137)</span><br><span class=\"line\">        at org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:91)</span><br><span class=\"line\">2023-05-27 22:34:50,875 [myid:1] - INFO  [main:ZKAuditProvider@42] - ZooKeeper audit is disabled.</span><br><span class=\"line\">2023-05-27 22:34:50,876 [myid:1] - ERROR [main:ServiceUtils@48] - Exiting JVM with code 1</span><br><span class=\"line\">[root@node71 ~]# netstat -nltp | grep 2181</span><br><span class=\"line\">tcp6       0      0 :::2181                 :::*                    LISTEN      8305/java</span><br><span class=\"line\">[root@node71 ~]# kill -9 8305</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考：<a href=\"https://coderatwork.cn/posts/deploy-zookeeper-with-ansible/\">利用 ansible 部署 zookeeper 集群 | kikimo (coderatwork.cn)</a></li>\n</ul>\n"},{"title":"中间件版本选型","author":"空空","date":"2023-07-07T16:00:00.000Z","_content":"\n```\n中间件版本评估原则：\n1、涉及代码兼容性，以开发给出版本为准。\n2、未有明确版本要求的，使用latest stable release。\n```\n\n\n\n### 1.JDK版本\n\n当前开发程序使用JDK 1.8，暂不做改变，中间件环境以JDK1.8为基准。\n\n- JDK1.8新特性：[Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9](https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6)\n\n- JDK1.9新特性：[Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9](https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6)\n\n\n\n### 2.Zookeeper版本\n\n**Apache ZooKeeper 3.7.1 （最新稳定版）**\n\nZooKeeper版本更新规律，当前3.8为主线开发，同时维护3.5/3.6/3.7，各分支发版顺序无规律。\n\n```\n发布策略\nApache ZooKeeper 社区一次支持两个发布分支：稳定和当前。ZooKeeper的稳定版本是3.7.x，当前版本是3.8.x。一旦发布新的次要版本，稳定版本预计将很快退役，大约半年后将宣布为生命周期结束。在半年宽限期内，预计只会发布该版本的安全和关键修复。在宣布EoL之后，社区不再提供进一步的补丁。所有ZooKeeper版本都可以从官方Apache档案中访问。\n\n6 August, 2014: release 3.5.0-alpha available\n04 March, 2020: release 3.6.0 available\n27 March, 2021: release 3.7.0 available\n7 March, 2022: release 3.8.0 available\n\nApache ZooKeeper 3.7.1 (latest stable release)\nApache ZooKeeper 3.6.4 (3.6 is EoL since 30th of December, 2022)\nApache ZooKeeper 3.5.10 (3.5 is EoL since 1st of June, 2022)\n```\n\n- 更新说明：[ZooKeeper：因为协调分布式系统是一个动物园 (apache.org)](https://zookeeper.apache.org/doc/r3.8.1/releasenotes.html)\n\n\n\n### 3.Redis版本\n\n**Redis 7.0.11 (Latest Stable）**\n\n```\n在Redis的版本计划中，版本号第二位为奇数，为非稳定版本，如2.7、2.9、3.1；版本号第二为偶数，为稳定版本如2.6、2.8、3.0；一般来说当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本。\n\nRedis 7.0 RC1   Released Mon Jan 31 12:00:00 IST 2022\nRedis 7.0.10 Released Mon Mar 20 16:00:00 IST 2023\nRedis 7.0.11 Released Mon Apr 17 16:00:00 IST 2023\n```\n\n\n\n### 4.MinIO版本\n\n**MinIO Operator 的最新稳定版本：5.0.4**\n\n```\nminio以日期为版本命名，每周更新一次。GitHub项目有tags标识。\n\n官网记录的 MinIO 最新稳定版本的 Linux 平台上 MinIO 部署的操作、管理和开发：发布.2023-05-04T21-44-30Z。\nhttps://www.minio.org.cn/docs/minio/linux/index.html\n```\n\n- GitHub：[GitHub - minio/minio: High Performance Object Storage for AI](https://github.com/minio/minio)\n\n- 历史版本：[dl.minio.org.cn/server/minio/release/linux-amd64/archive/](https://dl.minio.org.cn/server/minio/release/linux-amd64/archive/)\n\n\n\n### 5.MySQL版本\n\n暂定**MySQL 8.0.32**\n\nMySQL不区分具体是否稳定版，最新一次子版本发布于今年1月，平均三个月到半年发布一个小版本。\n\n- 生命周期：[EOL MySQL | End of Life (EOL) | Oracle Corporation | Lifecycle](https://endoflife.software/applications/databases/mysql)\n\n```\n版本\t发布时间\t上一年版本\t上一年发布时间\n8.0.32\t2023.1.17\t8.0.28\t2022.1.18\n8.0.31\t2022.10.11\t8.0.27\t2021.10.10\n8.0.30\t2022.7.26\t8.0.26\t2021.7.20\n8.0.29\t2022.4.26\t8.0.25 8.0.24\t2021.5.11\n\nmysql-5.7.41-1.el7.x86_64\tDec 9, 2022\nmysql-5.7.40-1.el7.x86_64\tAug 31, 2022\nmysql-5.7.39-1.el7.x86_64\tJun 13, 2022\n\n\nCurrent releases\tRelease\tRelease date\tEnd of life\t\nMySQL 8.0\tApril 19, 2018\tApril, 2026\t\nMySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t\nAll releases\nMySQL 8.0\tApril 19, 2018\tApril, 2026\t\nMySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t\nMySQL 5.6\tFebruary 5, 2013\tFebruary 5, 2021\t\nMySQL 5.5\tDecember 3, 2010\tDecember 3, 2018\t\nMySQL 5.1\tNovember 14, 2008\tDecember 31, 2013\n```\n\n\n\n### 6.Nacos版本\n\n**官网推荐稳定版：Nacos 2.1.1**\n\n- 博客：https://nacos.io/zh-cn/blog/index.html\n\n```\nhttps://github.com/alibaba/nacos/releases\n\nNacos 依赖 Java 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 Maven环境，请确保是在以下版本环境中安装使用:\n64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\n64 bit JDK 1.8+；下载 & 配置。\nMaven 3.2.x+；下载 & 配置。\n\n最近更新：\nApr 11, 2023  Nacos 2.2.2发布，优化启动体验和鉴权提示\nMar 20, 2023  Nacos 多个新版本发布，rust-sdk完全适配完成\n```\n\n\n\n### 7.Kafka版本\n\n**Kafka 3.4.0**\n\n- 官网：[Apache Kafka](https://kafka.apache.org/downloads)\n\n```\n3.4.0 is the latest release. The current stable version is 3.4.0\n```\n\n\n\n### 8.Elasticsearch版本\n\n**最新版本：8.8.0**\n\n- 官网版本：[Starting with the Elasticsearch Platform and its Solutions [8.8\\] | Elastic](https://www.elastic.co/guide/en/welcome-to-elastic/8.8/index.html)\n\n- 生命周期：[支持一览表 | Elastic](https://www.elastic.co/cn/support/matrix)\n\n```\nElasticsearch\t支持截止日期\t\t\t\t\t\t\t\t\t\t\t维护至\n8.x\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2024 年 8 月 10 日，或 9.0 发布日期（待定）的 6 个月后\n7.17.x\t\t\t2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\t 2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\n```\n\n\n\n### 9.Nginx版本\n\n**Nginx-1.24.0 (Stable version)**\n\n- 官网：[nginx: download](https://nginx.org/en/download.html)\n\n```\nChanges with nginx 1.24.0                                        11 Apr 2023\n1.24.x stable branch.\nChanges with nginx 1.23.4                                        28 Mar 2023\nChanges with nginx 1.23.3                                        13 Dec 2022\nChanges with nginx 1.23.0                                        21 Jun 2022\nChanges with nginx 1.21.6                                        25 Jan 2022\n```\n\n","source":"_posts/07中间件/7.0.中间件版本选型.md","raw":"---\ntitle: 中间件版本选型\nauthor: 空空\ndate: 2023-07-08\n---\n\n```\n中间件版本评估原则：\n1、涉及代码兼容性，以开发给出版本为准。\n2、未有明确版本要求的，使用latest stable release。\n```\n\n\n\n### 1.JDK版本\n\n当前开发程序使用JDK 1.8，暂不做改变，中间件环境以JDK1.8为基准。\n\n- JDK1.8新特性：[Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9](https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6)\n\n- JDK1.9新特性：[Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9](https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6)\n\n\n\n### 2.Zookeeper版本\n\n**Apache ZooKeeper 3.7.1 （最新稳定版）**\n\nZooKeeper版本更新规律，当前3.8为主线开发，同时维护3.5/3.6/3.7，各分支发版顺序无规律。\n\n```\n发布策略\nApache ZooKeeper 社区一次支持两个发布分支：稳定和当前。ZooKeeper的稳定版本是3.7.x，当前版本是3.8.x。一旦发布新的次要版本，稳定版本预计将很快退役，大约半年后将宣布为生命周期结束。在半年宽限期内，预计只会发布该版本的安全和关键修复。在宣布EoL之后，社区不再提供进一步的补丁。所有ZooKeeper版本都可以从官方Apache档案中访问。\n\n6 August, 2014: release 3.5.0-alpha available\n04 March, 2020: release 3.6.0 available\n27 March, 2021: release 3.7.0 available\n7 March, 2022: release 3.8.0 available\n\nApache ZooKeeper 3.7.1 (latest stable release)\nApache ZooKeeper 3.6.4 (3.6 is EoL since 30th of December, 2022)\nApache ZooKeeper 3.5.10 (3.5 is EoL since 1st of June, 2022)\n```\n\n- 更新说明：[ZooKeeper：因为协调分布式系统是一个动物园 (apache.org)](https://zookeeper.apache.org/doc/r3.8.1/releasenotes.html)\n\n\n\n### 3.Redis版本\n\n**Redis 7.0.11 (Latest Stable）**\n\n```\n在Redis的版本计划中，版本号第二位为奇数，为非稳定版本，如2.7、2.9、3.1；版本号第二为偶数，为稳定版本如2.6、2.8、3.0；一般来说当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本。\n\nRedis 7.0 RC1   Released Mon Jan 31 12:00:00 IST 2022\nRedis 7.0.10 Released Mon Mar 20 16:00:00 IST 2023\nRedis 7.0.11 Released Mon Apr 17 16:00:00 IST 2023\n```\n\n\n\n### 4.MinIO版本\n\n**MinIO Operator 的最新稳定版本：5.0.4**\n\n```\nminio以日期为版本命名，每周更新一次。GitHub项目有tags标识。\n\n官网记录的 MinIO 最新稳定版本的 Linux 平台上 MinIO 部署的操作、管理和开发：发布.2023-05-04T21-44-30Z。\nhttps://www.minio.org.cn/docs/minio/linux/index.html\n```\n\n- GitHub：[GitHub - minio/minio: High Performance Object Storage for AI](https://github.com/minio/minio)\n\n- 历史版本：[dl.minio.org.cn/server/minio/release/linux-amd64/archive/](https://dl.minio.org.cn/server/minio/release/linux-amd64/archive/)\n\n\n\n### 5.MySQL版本\n\n暂定**MySQL 8.0.32**\n\nMySQL不区分具体是否稳定版，最新一次子版本发布于今年1月，平均三个月到半年发布一个小版本。\n\n- 生命周期：[EOL MySQL | End of Life (EOL) | Oracle Corporation | Lifecycle](https://endoflife.software/applications/databases/mysql)\n\n```\n版本\t发布时间\t上一年版本\t上一年发布时间\n8.0.32\t2023.1.17\t8.0.28\t2022.1.18\n8.0.31\t2022.10.11\t8.0.27\t2021.10.10\n8.0.30\t2022.7.26\t8.0.26\t2021.7.20\n8.0.29\t2022.4.26\t8.0.25 8.0.24\t2021.5.11\n\nmysql-5.7.41-1.el7.x86_64\tDec 9, 2022\nmysql-5.7.40-1.el7.x86_64\tAug 31, 2022\nmysql-5.7.39-1.el7.x86_64\tJun 13, 2022\n\n\nCurrent releases\tRelease\tRelease date\tEnd of life\t\nMySQL 8.0\tApril 19, 2018\tApril, 2026\t\nMySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t\nAll releases\nMySQL 8.0\tApril 19, 2018\tApril, 2026\t\nMySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t\nMySQL 5.6\tFebruary 5, 2013\tFebruary 5, 2021\t\nMySQL 5.5\tDecember 3, 2010\tDecember 3, 2018\t\nMySQL 5.1\tNovember 14, 2008\tDecember 31, 2013\n```\n\n\n\n### 6.Nacos版本\n\n**官网推荐稳定版：Nacos 2.1.1**\n\n- 博客：https://nacos.io/zh-cn/blog/index.html\n\n```\nhttps://github.com/alibaba/nacos/releases\n\nNacos 依赖 Java 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 Maven环境，请确保是在以下版本环境中安装使用:\n64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\n64 bit JDK 1.8+；下载 & 配置。\nMaven 3.2.x+；下载 & 配置。\n\n最近更新：\nApr 11, 2023  Nacos 2.2.2发布，优化启动体验和鉴权提示\nMar 20, 2023  Nacos 多个新版本发布，rust-sdk完全适配完成\n```\n\n\n\n### 7.Kafka版本\n\n**Kafka 3.4.0**\n\n- 官网：[Apache Kafka](https://kafka.apache.org/downloads)\n\n```\n3.4.0 is the latest release. The current stable version is 3.4.0\n```\n\n\n\n### 8.Elasticsearch版本\n\n**最新版本：8.8.0**\n\n- 官网版本：[Starting with the Elasticsearch Platform and its Solutions [8.8\\] | Elastic](https://www.elastic.co/guide/en/welcome-to-elastic/8.8/index.html)\n\n- 生命周期：[支持一览表 | Elastic](https://www.elastic.co/cn/support/matrix)\n\n```\nElasticsearch\t支持截止日期\t\t\t\t\t\t\t\t\t\t\t维护至\n8.x\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2024 年 8 月 10 日，或 9.0 发布日期（待定）的 6 个月后\n7.17.x\t\t\t2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\t 2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\n```\n\n\n\n### 9.Nginx版本\n\n**Nginx-1.24.0 (Stable version)**\n\n- 官网：[nginx: download](https://nginx.org/en/download.html)\n\n```\nChanges with nginx 1.24.0                                        11 Apr 2023\n1.24.x stable branch.\nChanges with nginx 1.23.4                                        28 Mar 2023\nChanges with nginx 1.23.3                                        13 Dec 2022\nChanges with nginx 1.23.0                                        21 Jun 2022\nChanges with nginx 1.21.6                                        25 Jan 2022\n```\n\n","slug":"07中间件/7.0.中间件版本选型","published":1,"updated":"2024-07-20T06:27:44.850Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqg0009j38a67fp3d22","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间件版本评估原则：</span><br><span class=\"line\">1、涉及代码兼容性，以开发给出版本为准。</span><br><span class=\"line\">2、未有明确版本要求的，使用latest stable release。</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-JDK版本\">1.JDK版本</h3>\n<p>当前开发程序使用JDK 1.8，暂不做改变，中间件环境以JDK1.8为基准。</p>\n<ul>\n<li>\n<p>JDK1.8新特性：<a href=\"https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\">Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9</a></p>\n</li>\n<li>\n<p>JDK1.9新特性：<a href=\"https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\">Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9</a></p>\n</li>\n</ul>\n<h3 id=\"2-Zookeeper版本\">2.Zookeeper版本</h3>\n<p><strong>Apache ZooKeeper 3.7.1 （最新稳定版）</strong></p>\n<p>ZooKeeper版本更新规律，当前3.8为主线开发，同时维护3.5/3.6/3.7，各分支发版顺序无规律。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发布策略</span><br><span class=\"line\">Apache ZooKeeper 社区一次支持两个发布分支：稳定和当前。ZooKeeper的稳定版本是3.7.x，当前版本是3.8.x。一旦发布新的次要版本，稳定版本预计将很快退役，大约半年后将宣布为生命周期结束。在半年宽限期内，预计只会发布该版本的安全和关键修复。在宣布EoL之后，社区不再提供进一步的补丁。所有ZooKeeper版本都可以从官方Apache档案中访问。</span><br><span class=\"line\"></span><br><span class=\"line\">6 August, 2014: release 3.5.0-alpha available</span><br><span class=\"line\">04 March, 2020: release 3.6.0 available</span><br><span class=\"line\">27 March, 2021: release 3.7.0 available</span><br><span class=\"line\">7 March, 2022: release 3.8.0 available</span><br><span class=\"line\"></span><br><span class=\"line\">Apache ZooKeeper 3.7.1 (latest stable release)</span><br><span class=\"line\">Apache ZooKeeper 3.6.4 (3.6 is EoL since 30th of December, 2022)</span><br><span class=\"line\">Apache ZooKeeper 3.5.10 (3.5 is EoL since 1st of June, 2022)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新说明：<a href=\"https://zookeeper.apache.org/doc/r3.8.1/releasenotes.html\">ZooKeeper：因为协调分布式系统是一个动物园 (apache.org)</a></li>\n</ul>\n<h3 id=\"3-Redis版本\">3.Redis版本</h3>\n<p><strong>Redis 7.0.11 (Latest Stable）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Redis的版本计划中，版本号第二位为奇数，为非稳定版本，如2.7、2.9、3.1；版本号第二为偶数，为稳定版本如2.6、2.8、3.0；一般来说当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本。</span><br><span class=\"line\"></span><br><span class=\"line\">Redis 7.0 RC1   Released Mon Jan 31 12:00:00 IST 2022</span><br><span class=\"line\">Redis 7.0.10 Released Mon Mar 20 16:00:00 IST 2023</span><br><span class=\"line\">Redis 7.0.11 Released Mon Apr 17 16:00:00 IST 2023</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-MinIO版本\">4.MinIO版本</h3>\n<p><strong>MinIO Operator 的最新稳定版本：5.0.4</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minio以日期为版本命名，每周更新一次。GitHub项目有tags标识。</span><br><span class=\"line\"></span><br><span class=\"line\">官网记录的 MinIO 最新稳定版本的 Linux 平台上 MinIO 部署的操作、管理和开发：发布.2023-05-04T21-44-30Z。</span><br><span class=\"line\">https://www.minio.org.cn/docs/minio/linux/index.html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>GitHub：<a href=\"https://github.com/minio/minio\">GitHub - minio/minio: High Performance Object Storage for AI</a></p>\n</li>\n<li>\n<p>历史版本：<a href=\"https://dl.minio.org.cn/server/minio/release/linux-amd64/archive/\">dl.minio.org.cn/server/minio/release/linux-amd64/archive/</a></p>\n</li>\n</ul>\n<h3 id=\"5-MySQL版本\">5.MySQL版本</h3>\n<p>暂定<strong>MySQL 8.0.32</strong></p>\n<p>MySQL不区分具体是否稳定版，最新一次子版本发布于今年1月，平均三个月到半年发布一个小版本。</p>\n<ul>\n<li>生命周期：<a href=\"https://endoflife.software/applications/databases/mysql\">EOL MySQL | End of Life (EOL) | Oracle Corporation | Lifecycle</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本\t发布时间\t上一年版本\t上一年发布时间</span><br><span class=\"line\">8.0.32\t2023.1.17\t8.0.28\t2022.1.18</span><br><span class=\"line\">8.0.31\t2022.10.11\t8.0.27\t2021.10.10</span><br><span class=\"line\">8.0.30\t2022.7.26\t8.0.26\t2021.7.20</span><br><span class=\"line\">8.0.29\t2022.4.26\t8.0.25 8.0.24\t2021.5.11</span><br><span class=\"line\"></span><br><span class=\"line\">mysql-5.7.41-1.el7.x86_64\tDec 9, 2022</span><br><span class=\"line\">mysql-5.7.40-1.el7.x86_64\tAug 31, 2022</span><br><span class=\"line\">mysql-5.7.39-1.el7.x86_64\tJun 13, 2022</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Current releases\tRelease\tRelease date\tEnd of life\t</span><br><span class=\"line\">MySQL 8.0\tApril 19, 2018\tApril, 2026\t</span><br><span class=\"line\">MySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t</span><br><span class=\"line\">All releases</span><br><span class=\"line\">MySQL 8.0\tApril 19, 2018\tApril, 2026\t</span><br><span class=\"line\">MySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t</span><br><span class=\"line\">MySQL 5.6\tFebruary 5, 2013\tFebruary 5, 2021\t</span><br><span class=\"line\">MySQL 5.5\tDecember 3, 2010\tDecember 3, 2018\t</span><br><span class=\"line\">MySQL 5.1\tNovember 14, 2008\tDecember 31, 2013</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Nacos版本\">6.Nacos版本</h3>\n<p><strong>官网推荐稳定版：Nacos 2.1.1</strong></p>\n<ul>\n<li>博客：<a href=\"https://nacos.io/zh-cn/blog/index.html\">https://nacos.io/zh-cn/blog/index.html</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/nacos/releases</span><br><span class=\"line\"></span><br><span class=\"line\">Nacos 依赖 Java 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 Maven环境，请确保是在以下版本环境中安装使用:</span><br><span class=\"line\">64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</span><br><span class=\"line\">64 bit JDK 1.8+；下载 &amp; 配置。</span><br><span class=\"line\">Maven 3.2.x+；下载 &amp; 配置。</span><br><span class=\"line\"></span><br><span class=\"line\">最近更新：</span><br><span class=\"line\">Apr 11, 2023  Nacos 2.2.2发布，优化启动体验和鉴权提示</span><br><span class=\"line\">Mar 20, 2023  Nacos 多个新版本发布，rust-sdk完全适配完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Kafka版本\">7.Kafka版本</h3>\n<p><strong>Kafka 3.4.0</strong></p>\n<ul>\n<li>官网：<a href=\"https://kafka.apache.org/downloads\">Apache Kafka</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.4.0 is the latest release. The current stable version is 3.4.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-Elasticsearch版本\">8.Elasticsearch版本</h3>\n<p><strong>最新版本：8.8.0</strong></p>\n<ul>\n<li>\n<p>官网版本：[Starting with the Elasticsearch Platform and its Solutions <a href=\"https://www.elastic.co/guide/en/welcome-to-elastic/8.8/index.html\">8.8] | Elastic</a></p>\n</li>\n<li>\n<p>生命周期：<a href=\"https://www.elastic.co/cn/support/matrix\">支持一览表 | Elastic</a></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elasticsearch\t支持截止日期\t\t\t\t\t\t\t\t\t\t\t维护至</span><br><span class=\"line\">8.x\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2024 年 8 月 10 日，或 9.0 发布日期（待定）的 6 个月后</span><br><span class=\"line\">7.17.x\t\t\t2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\t 2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Nginx版本\">9.Nginx版本</h3>\n<p><strong>Nginx-1.24.0 (Stable version)</strong></p>\n<ul>\n<li>官网：<a href=\"https://nginx.org/en/download.html\">nginx: download</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Changes with nginx 1.24.0                                        11 Apr 2023</span><br><span class=\"line\">1.24.x stable branch.</span><br><span class=\"line\">Changes with nginx 1.23.4                                        28 Mar 2023</span><br><span class=\"line\">Changes with nginx 1.23.3                                        13 Dec 2022</span><br><span class=\"line\">Changes with nginx 1.23.0                                        21 Jun 2022</span><br><span class=\"line\">Changes with nginx 1.21.6                                        25 Jan 2022</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间件版本评估原则：</span><br><span class=\"line\">1、涉及代码兼容性，以开发给出版本为准。</span><br><span class=\"line\">2、未有明确版本要求的，使用latest stable release。</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-JDK版本\">1.JDK版本</h3>\n<p>当前开发程序使用JDK 1.8，暂不做改变，中间件环境以JDK1.8为基准。</p>\n<ul>\n<li>\n<p>JDK1.8新特性：<a href=\"https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\">Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9</a></p>\n</li>\n<li>\n<p>JDK1.9新特性：<a href=\"https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6\">Java Platform, Standard Edition What’s New in Oracle JDK 9, Release 9</a></p>\n</li>\n</ul>\n<h3 id=\"2-Zookeeper版本\">2.Zookeeper版本</h3>\n<p><strong>Apache ZooKeeper 3.7.1 （最新稳定版）</strong></p>\n<p>ZooKeeper版本更新规律，当前3.8为主线开发，同时维护3.5/3.6/3.7，各分支发版顺序无规律。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发布策略</span><br><span class=\"line\">Apache ZooKeeper 社区一次支持两个发布分支：稳定和当前。ZooKeeper的稳定版本是3.7.x，当前版本是3.8.x。一旦发布新的次要版本，稳定版本预计将很快退役，大约半年后将宣布为生命周期结束。在半年宽限期内，预计只会发布该版本的安全和关键修复。在宣布EoL之后，社区不再提供进一步的补丁。所有ZooKeeper版本都可以从官方Apache档案中访问。</span><br><span class=\"line\"></span><br><span class=\"line\">6 August, 2014: release 3.5.0-alpha available</span><br><span class=\"line\">04 March, 2020: release 3.6.0 available</span><br><span class=\"line\">27 March, 2021: release 3.7.0 available</span><br><span class=\"line\">7 March, 2022: release 3.8.0 available</span><br><span class=\"line\"></span><br><span class=\"line\">Apache ZooKeeper 3.7.1 (latest stable release)</span><br><span class=\"line\">Apache ZooKeeper 3.6.4 (3.6 is EoL since 30th of December, 2022)</span><br><span class=\"line\">Apache ZooKeeper 3.5.10 (3.5 is EoL since 1st of June, 2022)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新说明：<a href=\"https://zookeeper.apache.org/doc/r3.8.1/releasenotes.html\">ZooKeeper：因为协调分布式系统是一个动物园 (apache.org)</a></li>\n</ul>\n<h3 id=\"3-Redis版本\">3.Redis版本</h3>\n<p><strong>Redis 7.0.11 (Latest Stable）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Redis的版本计划中，版本号第二位为奇数，为非稳定版本，如2.7、2.9、3.1；版本号第二为偶数，为稳定版本如2.6、2.8、3.0；一般来说当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本。</span><br><span class=\"line\"></span><br><span class=\"line\">Redis 7.0 RC1   Released Mon Jan 31 12:00:00 IST 2022</span><br><span class=\"line\">Redis 7.0.10 Released Mon Mar 20 16:00:00 IST 2023</span><br><span class=\"line\">Redis 7.0.11 Released Mon Apr 17 16:00:00 IST 2023</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-MinIO版本\">4.MinIO版本</h3>\n<p><strong>MinIO Operator 的最新稳定版本：5.0.4</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minio以日期为版本命名，每周更新一次。GitHub项目有tags标识。</span><br><span class=\"line\"></span><br><span class=\"line\">官网记录的 MinIO 最新稳定版本的 Linux 平台上 MinIO 部署的操作、管理和开发：发布.2023-05-04T21-44-30Z。</span><br><span class=\"line\">https://www.minio.org.cn/docs/minio/linux/index.html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>GitHub：<a href=\"https://github.com/minio/minio\">GitHub - minio/minio: High Performance Object Storage for AI</a></p>\n</li>\n<li>\n<p>历史版本：<a href=\"https://dl.minio.org.cn/server/minio/release/linux-amd64/archive/\">dl.minio.org.cn/server/minio/release/linux-amd64/archive/</a></p>\n</li>\n</ul>\n<h3 id=\"5-MySQL版本\">5.MySQL版本</h3>\n<p>暂定<strong>MySQL 8.0.32</strong></p>\n<p>MySQL不区分具体是否稳定版，最新一次子版本发布于今年1月，平均三个月到半年发布一个小版本。</p>\n<ul>\n<li>生命周期：<a href=\"https://endoflife.software/applications/databases/mysql\">EOL MySQL | End of Life (EOL) | Oracle Corporation | Lifecycle</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本\t发布时间\t上一年版本\t上一年发布时间</span><br><span class=\"line\">8.0.32\t2023.1.17\t8.0.28\t2022.1.18</span><br><span class=\"line\">8.0.31\t2022.10.11\t8.0.27\t2021.10.10</span><br><span class=\"line\">8.0.30\t2022.7.26\t8.0.26\t2021.7.20</span><br><span class=\"line\">8.0.29\t2022.4.26\t8.0.25 8.0.24\t2021.5.11</span><br><span class=\"line\"></span><br><span class=\"line\">mysql-5.7.41-1.el7.x86_64\tDec 9, 2022</span><br><span class=\"line\">mysql-5.7.40-1.el7.x86_64\tAug 31, 2022</span><br><span class=\"line\">mysql-5.7.39-1.el7.x86_64\tJun 13, 2022</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Current releases\tRelease\tRelease date\tEnd of life\t</span><br><span class=\"line\">MySQL 8.0\tApril 19, 2018\tApril, 2026\t</span><br><span class=\"line\">MySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t</span><br><span class=\"line\">All releases</span><br><span class=\"line\">MySQL 8.0\tApril 19, 2018\tApril, 2026\t</span><br><span class=\"line\">MySQL 5.7\tOctober 21, 2015\tOctober 21, 2023\t</span><br><span class=\"line\">MySQL 5.6\tFebruary 5, 2013\tFebruary 5, 2021\t</span><br><span class=\"line\">MySQL 5.5\tDecember 3, 2010\tDecember 3, 2018\t</span><br><span class=\"line\">MySQL 5.1\tNovember 14, 2008\tDecember 31, 2013</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Nacos版本\">6.Nacos版本</h3>\n<p><strong>官网推荐稳定版：Nacos 2.1.1</strong></p>\n<ul>\n<li>博客：<a href=\"https://nacos.io/zh-cn/blog/index.html\">https://nacos.io/zh-cn/blog/index.html</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/nacos/releases</span><br><span class=\"line\"></span><br><span class=\"line\">Nacos 依赖 Java 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 Maven环境，请确保是在以下版本环境中安装使用:</span><br><span class=\"line\">64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</span><br><span class=\"line\">64 bit JDK 1.8+；下载 &amp; 配置。</span><br><span class=\"line\">Maven 3.2.x+；下载 &amp; 配置。</span><br><span class=\"line\"></span><br><span class=\"line\">最近更新：</span><br><span class=\"line\">Apr 11, 2023  Nacos 2.2.2发布，优化启动体验和鉴权提示</span><br><span class=\"line\">Mar 20, 2023  Nacos 多个新版本发布，rust-sdk完全适配完成</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Kafka版本\">7.Kafka版本</h3>\n<p><strong>Kafka 3.4.0</strong></p>\n<ul>\n<li>官网：<a href=\"https://kafka.apache.org/downloads\">Apache Kafka</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.4.0 is the latest release. The current stable version is 3.4.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-Elasticsearch版本\">8.Elasticsearch版本</h3>\n<p><strong>最新版本：8.8.0</strong></p>\n<ul>\n<li>\n<p>官网版本：[Starting with the Elasticsearch Platform and its Solutions <a href=\"https://www.elastic.co/guide/en/welcome-to-elastic/8.8/index.html\">8.8] | Elastic</a></p>\n</li>\n<li>\n<p>生命周期：<a href=\"https://www.elastic.co/cn/support/matrix\">支持一览表 | Elastic</a></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Elasticsearch\t支持截止日期\t\t\t\t\t\t\t\t\t\t\t维护至</span><br><span class=\"line\">8.x\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2024 年 8 月 10 日，或 9.0 发布日期（待定）的 6 个月后</span><br><span class=\"line\">7.17.x\t\t\t2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准\t 2023 年 8 月 1 日，或 9.0.0 发布日期，具体以较晚者为准</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-Nginx版本\">9.Nginx版本</h3>\n<p><strong>Nginx-1.24.0 (Stable version)</strong></p>\n<ul>\n<li>官网：<a href=\"https://nginx.org/en/download.html\">nginx: download</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Changes with nginx 1.24.0                                        11 Apr 2023</span><br><span class=\"line\">1.24.x stable branch.</span><br><span class=\"line\">Changes with nginx 1.23.4                                        28 Mar 2023</span><br><span class=\"line\">Changes with nginx 1.23.3                                        13 Dec 2022</span><br><span class=\"line\">Changes with nginx 1.23.0                                        21 Jun 2022</span><br><span class=\"line\">Changes with nginx 1.21.6                                        25 Jan 2022</span><br></pre></td></tr></table></figure>\n"},{"_content":"## 1. 网络规划\n\n198.168.10.71（主）\n\n198.168.10.72（主）\n\n198.168.10.73（从，延迟复制71）\n\nkeepalived部署于双主节点\n\n\n## 2. 前置工作\n\n- 确认系统版本\n\n```\n  [root@node71 ~]# cat /etc/redhat-release\n  CentOS Linux release 7.9.2009 (Core)\n```\n\n  \n\n- 下载rpm安装包\n\n  [MySQL :: Download MySQL Community Server (Archived Versions)](https://downloads.mysql.com/archives/community/)\n\n```shell\n  Product Version:5.7.41\n  Operating System: Red Hat Enterprise Linux / Oracle Linux \n  OS Version: Red Hat Enterprise Linux 7 / Oracle Linux 7 (x86, 64-bit)  \n  RPM Bundle: Dec 9, 2022\t531.5M\t(mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar)\n```\n\n- 解压\n\n  上传文件到任意目录，然后解压\n\n```\ntar -xvf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n## 3. 单机安装\n\n以下两台主机都需安装，按普通单机模式先完成。\n\n- RPM安装\n\n```shell\nrpm  -ivh  *.rpm --nodeps --force\nwarning: mysql-community-client-5.7.41-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Si\nPreparing...                          ################################# [100%]\n```\n\n- 确认安装位置\n\n```shell\n[root@node71 ~]#  whereis mysql\nmysql: /usr/bin/mysql /usr/lib64/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz\n```\n\n- 初始化\n\n```shell\n[root@node71 ~]# mysqld --initialize --console\n[root@node71 ~]# chown -R mysql:mysql /var/lib/mysql/\n#启动数据库\n[root@node71 ~]# systemctl start mysqld\n[root@node71 ~]# systemctl status mysqld\n● mysqld.service - MySQL Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor prese      t: disabled)\n   Active: active (running) since Sun 2023-05-28 00:59:45 PDT; 6s ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 11671 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysq      ld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)\n  Process: 11639 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0      /SUCCESS)\n Main PID: 11674 (mysqld)\n    Tasks: 27\n   CGroup: /system.slice/mysqld.service\n           └─11674 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/my...\n```\n\n- 初始密码\n\n```shell\n[root@node71 ~]# cat /var/log/mysqld.log |grep tempo\n2023-05-28T07:59:25.164850Z 1 [Note] A temporary password is generated for root@localhost: +<pWgX3)GmP>\n```\n\n- 修改root密码\n\n```\n[root@node72 ~]# mysql -u root -p\nmysql> use mysql;\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'dahouzi';\n```\n\n- 修改root访问权限\n\n```sql\n#更改为任意主机可访问\nmysql> UPDATE user SET host = \"%\" WHERE user='root';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT host, user, authentication_string, plugin FROM user;\n+-----------+---------------+-------------------------------------------+-----------------------+\n| host      | user          | authentication_string                     | plugin                |\n+-----------+---------------+-------------------------------------------+-----------------------+\n| %         | root          | *1FB37DBB9243517E6128CA92A0FBE13C066456CF | mysql_native_password |\n| localhost | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password |\n| localhost | mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password |\n+-----------+---------------+-------------------------------------------+-----------------------+\n\nmysql> FLUSH privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n## 4. 双主配置\n\n两台主机均需如下操作：\n\n- 查询master_log_file和Position位置\n\n```shell\n[root@node71 ~]# mysql -uroot -p\n\nmysql> show master status;\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                          | Executed_Gtid_Set |\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n| mysql-bin.000001 |      868 |              | performance_schema,information_schema,sys |                   |\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n- 修改配置文件\n\n```\n  vi /etc/my.cnf\n  \n  log_bin=mysql-bin\n  server-id=73\n  sync-binlog=1\n  binlog-ignore-db=performance_schema\n  binlog-ignore-db=information_schema\n  binlog-ignore-db=sys\n  \n  \n  relay_log=mysql-relay-bin\n  log_slave_updates=1\n  \n  auto_increment_offset=1\n  auto_increment_increment=2\n```\n\n  \n\n- 授权\n\n```shell\nmysql> grant replication slave on *.* to 'root'@'%' identified by 'dahouzi';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> grant all privileges on *.* to 'root'@'%' identified by 'dahouzi';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n- 主从关系（`此步两台主机有所不同`）\n\n```\n#192.168.10.72主机执行\nchange master to master_host='192.168.10.71',master_port=3306,master_user='root',master_password='dahouzi',master_log_file='mysql-bin.000001',master_log_pos=2438;\n\n#192.168.10.71主机执行\nchange master to master_host='192.168.10.72',master_port=3306,master_user='root',master_password='***',master_log_file='mysql-bin.000001',master_log_pos=868;\n```\n\n- 确认主从关系\nSlave_IO_Running: Yes和Slave_SQL_Running: Yes\n```shell\nmysql> start slave;\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> show slave status \\G;\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.10.72\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 868\n               Relay_Log_File: mysql-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n```\n\n\n\n## 5. MHA高可用\n\n```\nssh-keygen -t rsa\ncd ~/.ssh\nssh-copy-id node71\nssh-copy-id node72\nssh-copy-id node73\n```\n\n\n\nkeepalive\n/etc/keepalived/keepalived.conf\n```\n! Configuration File for keepalived\n\nglobal_defs {\n   router_id master71\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface ens33\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.10.77\n    }\n}\n\nvirtual_server 192.168.10.77 3306 {\n    delay_loop 6\n    lb_algo rr\n    lb_kind DR\n    net_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 192.168.10.71 3306 {\n        weight 1\n        notify_down /etc/keepalived/closekeepalived.sh\n        TCP_CHECK {               # 健康检查\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n            connect_port 3306     # 设置连接端口3306\n        }\n    }\n}\n\n```\n\n\n\n关闭keepalived\n\n```\n/etc/keepalived/closekeepalived.sh\n\n#closekeepalived.sh内容\nsudo -S killall keepalived\n\nchmod +x /etc/keepalived/closekeepalived.sh\n```\n\n\n\n## 6. 测试\n\n原理：keepalived监控自己节点的mysql是否正常，如果检测mysql已关闭，则关闭自己告诉对方接管虚拟IP。\n\n```\n[root@node71 mha]# service keepalived restart\nRedirecting to /bin/systemctl restart keepalived.service\n[root@node71 mha]# ps -ef | grep keepalived\nroot      27246      1  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27247  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27248  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27255  23305  0 00:04 pts/0    00:00:00 grep --color=auto keepalived\n[root@node71 mha]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens32: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:fd:2c:2f brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.71/24 brd 192.168.10.255 scope global noprefixroute ens32\n       valid_lft forever preferred_lft forever\n    inet 192.168.10.77/32 scope global ens32\n       valid_lft forever preferred_lft forever\n    inet6 fe80::9c86:aaa1:7ab7:4315/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n4: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000\n    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff\n\n\n```\n\n\n\n## 7. 维护操作\n\n```\n[root@node71 ~]# systemctl restart mysqld\n[root@node71 ~]# systemctl status mysqld\n[root@node71 ~]# systemctl stop mysqld\n[root@node71 ~]# systemctl restart keepalived.service\n[root@node71 ~]# systemctl stop keepalived.service\n```\n\n\n\n## 8. 日常运维（主机重启）\n\n1. 因数据库不常重启，主机重启后的操作，需校对数据库一致性\n2. 每隔24小时，也需校对一次关键数据在主从服务器一致性，在资源消耗低谷时做\n\n\n\n\n\n","source":"_posts/07中间件/7.2.Mysql双主集群部署.md","raw":"## 1. 网络规划\n\n198.168.10.71（主）\n\n198.168.10.72（主）\n\n198.168.10.73（从，延迟复制71）\n\nkeepalived部署于双主节点\n\n\n## 2. 前置工作\n\n- 确认系统版本\n\n```\n  [root@node71 ~]# cat /etc/redhat-release\n  CentOS Linux release 7.9.2009 (Core)\n```\n\n  \n\n- 下载rpm安装包\n\n  [MySQL :: Download MySQL Community Server (Archived Versions)](https://downloads.mysql.com/archives/community/)\n\n```shell\n  Product Version:5.7.41\n  Operating System: Red Hat Enterprise Linux / Oracle Linux \n  OS Version: Red Hat Enterprise Linux 7 / Oracle Linux 7 (x86, 64-bit)  \n  RPM Bundle: Dec 9, 2022\t531.5M\t(mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar)\n```\n\n- 解压\n\n  上传文件到任意目录，然后解压\n\n```\ntar -xvf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n## 3. 单机安装\n\n以下两台主机都需安装，按普通单机模式先完成。\n\n- RPM安装\n\n```shell\nrpm  -ivh  *.rpm --nodeps --force\nwarning: mysql-community-client-5.7.41-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Si\nPreparing...                          ################################# [100%]\n```\n\n- 确认安装位置\n\n```shell\n[root@node71 ~]#  whereis mysql\nmysql: /usr/bin/mysql /usr/lib64/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz\n```\n\n- 初始化\n\n```shell\n[root@node71 ~]# mysqld --initialize --console\n[root@node71 ~]# chown -R mysql:mysql /var/lib/mysql/\n#启动数据库\n[root@node71 ~]# systemctl start mysqld\n[root@node71 ~]# systemctl status mysqld\n● mysqld.service - MySQL Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor prese      t: disabled)\n   Active: active (running) since Sun 2023-05-28 00:59:45 PDT; 6s ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 11671 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysq      ld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)\n  Process: 11639 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0      /SUCCESS)\n Main PID: 11674 (mysqld)\n    Tasks: 27\n   CGroup: /system.slice/mysqld.service\n           └─11674 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/my...\n```\n\n- 初始密码\n\n```shell\n[root@node71 ~]# cat /var/log/mysqld.log |grep tempo\n2023-05-28T07:59:25.164850Z 1 [Note] A temporary password is generated for root@localhost: +<pWgX3)GmP>\n```\n\n- 修改root密码\n\n```\n[root@node72 ~]# mysql -u root -p\nmysql> use mysql;\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'dahouzi';\n```\n\n- 修改root访问权限\n\n```sql\n#更改为任意主机可访问\nmysql> UPDATE user SET host = \"%\" WHERE user='root';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT host, user, authentication_string, plugin FROM user;\n+-----------+---------------+-------------------------------------------+-----------------------+\n| host      | user          | authentication_string                     | plugin                |\n+-----------+---------------+-------------------------------------------+-----------------------+\n| %         | root          | *1FB37DBB9243517E6128CA92A0FBE13C066456CF | mysql_native_password |\n| localhost | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password |\n| localhost | mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password |\n+-----------+---------------+-------------------------------------------+-----------------------+\n\nmysql> FLUSH privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n## 4. 双主配置\n\n两台主机均需如下操作：\n\n- 查询master_log_file和Position位置\n\n```shell\n[root@node71 ~]# mysql -uroot -p\n\nmysql> show master status;\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                          | Executed_Gtid_Set |\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n| mysql-bin.000001 |      868 |              | performance_schema,information_schema,sys |                   |\n+------------------+----------+--------------+-------------------------------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n- 修改配置文件\n\n```\n  vi /etc/my.cnf\n  \n  log_bin=mysql-bin\n  server-id=73\n  sync-binlog=1\n  binlog-ignore-db=performance_schema\n  binlog-ignore-db=information_schema\n  binlog-ignore-db=sys\n  \n  \n  relay_log=mysql-relay-bin\n  log_slave_updates=1\n  \n  auto_increment_offset=1\n  auto_increment_increment=2\n```\n\n  \n\n- 授权\n\n```shell\nmysql> grant replication slave on *.* to 'root'@'%' identified by 'dahouzi';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> grant all privileges on *.* to 'root'@'%' identified by 'dahouzi';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n- 主从关系（`此步两台主机有所不同`）\n\n```\n#192.168.10.72主机执行\nchange master to master_host='192.168.10.71',master_port=3306,master_user='root',master_password='dahouzi',master_log_file='mysql-bin.000001',master_log_pos=2438;\n\n#192.168.10.71主机执行\nchange master to master_host='192.168.10.72',master_port=3306,master_user='root',master_password='***',master_log_file='mysql-bin.000001',master_log_pos=868;\n```\n\n- 确认主从关系\nSlave_IO_Running: Yes和Slave_SQL_Running: Yes\n```shell\nmysql> start slave;\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> show slave status \\G;\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.10.72\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 868\n               Relay_Log_File: mysql-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n```\n\n\n\n## 5. MHA高可用\n\n```\nssh-keygen -t rsa\ncd ~/.ssh\nssh-copy-id node71\nssh-copy-id node72\nssh-copy-id node73\n```\n\n\n\nkeepalive\n/etc/keepalived/keepalived.conf\n```\n! Configuration File for keepalived\n\nglobal_defs {\n   router_id master71\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface ens33\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.10.77\n    }\n}\n\nvirtual_server 192.168.10.77 3306 {\n    delay_loop 6\n    lb_algo rr\n    lb_kind DR\n    net_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 192.168.10.71 3306 {\n        weight 1\n        notify_down /etc/keepalived/closekeepalived.sh\n        TCP_CHECK {               # 健康检查\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n            connect_port 3306     # 设置连接端口3306\n        }\n    }\n}\n\n```\n\n\n\n关闭keepalived\n\n```\n/etc/keepalived/closekeepalived.sh\n\n#closekeepalived.sh内容\nsudo -S killall keepalived\n\nchmod +x /etc/keepalived/closekeepalived.sh\n```\n\n\n\n## 6. 测试\n\n原理：keepalived监控自己节点的mysql是否正常，如果检测mysql已关闭，则关闭自己告诉对方接管虚拟IP。\n\n```\n[root@node71 mha]# service keepalived restart\nRedirecting to /bin/systemctl restart keepalived.service\n[root@node71 mha]# ps -ef | grep keepalived\nroot      27246      1  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27247  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27248  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D\nroot      27255  23305  0 00:04 pts/0    00:00:00 grep --color=auto keepalived\n[root@node71 mha]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens32: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 00:0c:29:fd:2c:2f brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.71/24 brd 192.168.10.255 scope global noprefixroute ens32\n       valid_lft forever preferred_lft forever\n    inet 192.168.10.77/32 scope global ens32\n       valid_lft forever preferred_lft forever\n    inet6 fe80::9c86:aaa1:7ab7:4315/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n3: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n4: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000\n    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff\n\n\n```\n\n\n\n## 7. 维护操作\n\n```\n[root@node71 ~]# systemctl restart mysqld\n[root@node71 ~]# systemctl status mysqld\n[root@node71 ~]# systemctl stop mysqld\n[root@node71 ~]# systemctl restart keepalived.service\n[root@node71 ~]# systemctl stop keepalived.service\n```\n\n\n\n## 8. 日常运维（主机重启）\n\n1. 因数据库不常重启，主机重启后的操作，需校对数据库一致性\n2. 每隔24小时，也需校对一次关键数据在主从服务器一致性，在资源消耗低谷时做\n\n\n\n\n\n","slug":"07中间件/7.2.Mysql双主集群部署","published":1,"date":"2023-09-01T13:06:37.590Z","updated":"2024-07-18T06:10:46.527Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqh000aj38a2nbe5f5z","content":"<h2 id=\"1-网络规划\">1. 网络规划</h2>\n<p>198.168.10.71（主）</p>\n<p>198.168.10.72（主）</p>\n<p>198.168.10.73（从，延迟复制71）</p>\n<p>keepalived部署于双主节点</p>\n<h2 id=\"2-前置工作\">2. 前置工作</h2>\n<ul>\n<li>确认系统版本</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>下载rpm安装包</p>\n<p><a href=\"https://downloads.mysql.com/archives/community/\">MySQL :: Download MySQL Community Server (Archived Versions)</a></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product Version:5.7.41</span><br><span class=\"line\">Operating System: Red Hat Enterprise Linux / Oracle Linux </span><br><span class=\"line\">OS Version: Red Hat Enterprise Linux 7 / Oracle Linux 7 (x86, 64-bit)  </span><br><span class=\"line\">RPM Bundle: Dec 9, 2022\t531.5M\t(mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>解压</p>\n<p>上传文件到任意目录，然后解压</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-单机安装\">3. 单机安装</h2>\n<p>以下两台主机都需安装，按普通单机模式先完成。</p>\n<ul>\n<li>RPM安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -ivh  *.rpm --nodeps --force</span><br><span class=\"line\">warning: mysql-community-client-5.7.41-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Si</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认安装位置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]#  whereis mysql</span><br><span class=\"line\">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# mysqld --initialize --console</span><br><span class=\"line\">[root@node71 ~]# chown -R mysql:mysql /var/lib/mysql/</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动数据库</span></span><br><span class=\"line\">[root@node71 ~]# systemctl start mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor prese      t: disabled)</span><br><span class=\"line\">   Active: active (running) since Sun 2023-05-28 00:59:45 PDT; 6s ago</span><br><span class=\"line\">     Docs: man:mysqld(8)</span><br><span class=\"line\">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">  Process: 11671 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysq      ld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 11639 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0      /SUCCESS)</span><br><span class=\"line\"> Main PID: 11674 (mysqld)</span><br><span class=\"line\">    Tasks: 27</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           └─11674 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/my...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始密码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /var/log/mysqld.log |grep tempo</span><br><span class=\"line\">2023-05-28T07:59:25.164850Z 1 [Note] A temporary password is generated for root@localhost: +&lt;pWgX3)GmP&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改root密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node72 ~]# mysql -u root -p</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;dahouzi&#x27;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改root访问权限</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更改为任意主机可访问</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> host <span class=\"operator\">=</span> &quot;%&quot; <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span><span class=\"operator\">=</span><span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> host, <span class=\"keyword\">user</span>, authentication_string, plugin <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> host      <span class=\"operator\">|</span> <span class=\"keyword\">user</span>          <span class=\"operator\">|</span> authentication_string                     <span class=\"operator\">|</span> plugin                <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"operator\">%</span>         <span class=\"operator\">|</span> root          <span class=\"operator\">|</span> <span class=\"operator\">*</span><span class=\"number\">1</span>FB37DBB9243517E6128CA92A0FBE13C066456CF <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> localhost <span class=\"operator\">|</span> mysql.session <span class=\"operator\">|</span> <span class=\"operator\">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> localhost <span class=\"operator\">|</span> mysql.sys     <span class=\"operator\">|</span> <span class=\"operator\">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> FLUSH privileges;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-双主配置\">4. 双主配置</h2>\n<p>两台主机均需如下操作：</p>\n<ul>\n<li>查询master_log_file和Position位置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">show master status;</span></span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                          | Executed_Gtid_Set |</span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">| mysql-bin.000001 |      868 |              | performance_schema,information_schema,sys |                   |</span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">log_bin=mysql-bin</span><br><span class=\"line\">server-id=73</span><br><span class=\"line\">sync-binlog=1</span><br><span class=\"line\">binlog-ignore-db=performance_schema</span><br><span class=\"line\">binlog-ignore-db=information_schema</span><br><span class=\"line\">binlog-ignore-db=sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">relay_log=mysql-relay-bin</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"></span><br><span class=\"line\">auto_increment_offset=1</span><br><span class=\"line\">auto_increment_increment=2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>授权</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">grant replication slave on *.* to <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;dahouzi&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">grant all privileges on *.* to <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;dahouzi&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">flush privileges;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>主从关系（<code>此步两台主机有所不同</code>）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#192.168.10.72主机执行</span><br><span class=\"line\">change master to master_host=&#x27;192.168.10.71&#x27;,master_port=3306,master_user=&#x27;root&#x27;,master_password=&#x27;dahouzi&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=2438;</span><br><span class=\"line\"></span><br><span class=\"line\">#192.168.10.71主机执行</span><br><span class=\"line\">change master to master_host=&#x27;192.168.10.72&#x27;,master_port=3306,master_user=&#x27;root&#x27;,master_password=&#x27;***&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=868;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认主从关系<br>\nSlave_IO_Running: Yes和Slave_SQL_Running: Yes</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">start slave;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">show slave status \\G;</span></span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.10.72</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 868</span><br><span class=\"line\">               Relay_Log_File: mysql-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 320</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-MHA高可用\">5. MHA高可用</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">ssh-copy-id node71</span><br><span class=\"line\">ssh-copy-id node72</span><br><span class=\"line\">ssh-copy-id node73</span><br></pre></td></tr></table></figure>\n<p>keepalive<br>\n/etc/keepalived/keepalived.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   router_id master71</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.10.77</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.10.77 3306 &#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    net_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 192.168.10.71 3306 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        notify_down /etc/keepalived/closekeepalived.sh</span><br><span class=\"line\">        TCP_CHECK &#123;               # 健康检查</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">            connect_port 3306     # 设置连接端口3306</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关闭keepalived</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/keepalived/closekeepalived.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#closekeepalived.sh内容</span><br><span class=\"line\">sudo -S killall keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/keepalived/closekeepalived.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-测试\">6. 测试</h2>\n<p>原理：keepalived监控自己节点的mysql是否正常，如果检测mysql已关闭，则关闭自己告诉对方接管虚拟IP。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 mha]# service keepalived restart</span><br><span class=\"line\">Redirecting to /bin/systemctl restart keepalived.service</span><br><span class=\"line\">[root@node71 mha]# ps -ef | grep keepalived</span><br><span class=\"line\">root      27246      1  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27247  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27248  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27255  23305  0 00:04 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class=\"line\">[root@node71 mha]# ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:fd:2c:2f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.10.71/24 brd 192.168.10.255 scope global noprefixroute ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 192.168.10.77/32 scope global ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::9c86:aaa1:7ab7:4315/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-维护操作\">7. 维护操作</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# systemctl restart mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl status mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl stop mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl restart keepalived.service</span><br><span class=\"line\">[root@node71 ~]# systemctl stop keepalived.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-日常运维（主机重启）\">8. 日常运维（主机重启）</h2>\n<ol>\n<li>因数据库不常重启，主机重启后的操作，需校对数据库一致性</li>\n<li>每隔24小时，也需校对一次关键数据在主从服务器一致性，在资源消耗低谷时做</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"1-网络规划\">1. 网络规划</h2>\n<p>198.168.10.71（主）</p>\n<p>198.168.10.72（主）</p>\n<p>198.168.10.73（从，延迟复制71）</p>\n<p>keepalived部署于双主节点</p>\n<h2 id=\"2-前置工作\">2. 前置工作</h2>\n<ul>\n<li>确认系统版本</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /etc/redhat-release</span><br><span class=\"line\">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>下载rpm安装包</p>\n<p><a href=\"https://downloads.mysql.com/archives/community/\">MySQL :: Download MySQL Community Server (Archived Versions)</a></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product Version:5.7.41</span><br><span class=\"line\">Operating System: Red Hat Enterprise Linux / Oracle Linux </span><br><span class=\"line\">OS Version: Red Hat Enterprise Linux 7 / Oracle Linux 7 (x86, 64-bit)  </span><br><span class=\"line\">RPM Bundle: Dec 9, 2022\t531.5M\t(mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>解压</p>\n<p>上传文件到任意目录，然后解压</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-单机安装\">3. 单机安装</h2>\n<p>以下两台主机都需安装，按普通单机模式先完成。</p>\n<ul>\n<li>RPM安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -ivh  *.rpm --nodeps --force</span><br><span class=\"line\">warning: mysql-community-client-5.7.41-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Si</span><br><span class=\"line\">Preparing...                          ################################# [100%]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认安装位置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]#  whereis mysql</span><br><span class=\"line\">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# mysqld --initialize --console</span><br><span class=\"line\">[root@node71 ~]# chown -R mysql:mysql /var/lib/mysql/</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动数据库</span></span><br><span class=\"line\">[root@node71 ~]# systemctl start mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor prese      t: disabled)</span><br><span class=\"line\">   Active: active (running) since Sun 2023-05-28 00:59:45 PDT; 6s ago</span><br><span class=\"line\">     Docs: man:mysqld(8)</span><br><span class=\"line\">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">  Process: 11671 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysq      ld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 11639 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0      /SUCCESS)</span><br><span class=\"line\"> Main PID: 11674 (mysqld)</span><br><span class=\"line\">    Tasks: 27</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           └─11674 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/my...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始密码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# cat /var/log/mysqld.log |grep tempo</span><br><span class=\"line\">2023-05-28T07:59:25.164850Z 1 [Note] A temporary password is generated for root@localhost: +&lt;pWgX3)GmP&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改root密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node72 ~]# mysql -u root -p</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;dahouzi&#x27;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改root访问权限</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#更改为任意主机可访问</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> host <span class=\"operator\">=</span> &quot;%&quot; <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span><span class=\"operator\">=</span><span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">Query OK, <span class=\"number\">1</span> <span class=\"type\">row</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> host, <span class=\"keyword\">user</span>, authentication_string, plugin <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> host      <span class=\"operator\">|</span> <span class=\"keyword\">user</span>          <span class=\"operator\">|</span> authentication_string                     <span class=\"operator\">|</span> plugin                <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"><span class=\"operator\">|</span> <span class=\"operator\">%</span>         <span class=\"operator\">|</span> root          <span class=\"operator\">|</span> <span class=\"operator\">*</span><span class=\"number\">1</span>FB37DBB9243517E6128CA92A0FBE13C066456CF <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> localhost <span class=\"operator\">|</span> mysql.session <span class=\"operator\">|</span> <span class=\"operator\">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">|</span> localhost <span class=\"operator\">|</span> mysql.sys     <span class=\"operator\">|</span> <span class=\"operator\">*</span>THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE <span class=\"operator\">|</span> mysql_native_password <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">-----------+---------------+-------------------------------------------+-----------------------+</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> FLUSH privileges;</span><br><span class=\"line\">Query OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-双主配置\">4. 双主配置</h2>\n<p>两台主机均需如下操作：</p>\n<ul>\n<li>查询master_log_file和Position位置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">show master status;</span></span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                          | Executed_Gtid_Set |</span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">| mysql-bin.000001 |      868 |              | performance_schema,information_schema,sys |                   |</span><br><span class=\"line\">+------------------+----------+--------------+-------------------------------------------+-------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">log_bin=mysql-bin</span><br><span class=\"line\">server-id=73</span><br><span class=\"line\">sync-binlog=1</span><br><span class=\"line\">binlog-ignore-db=performance_schema</span><br><span class=\"line\">binlog-ignore-db=information_schema</span><br><span class=\"line\">binlog-ignore-db=sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">relay_log=mysql-relay-bin</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"></span><br><span class=\"line\">auto_increment_offset=1</span><br><span class=\"line\">auto_increment_increment=2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>授权</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">grant replication slave on *.* to <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;dahouzi&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">grant all privileges on *.* to <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;dahouzi&#x27;</span>;</span></span><br><span class=\"line\">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">flush privileges;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>主从关系（<code>此步两台主机有所不同</code>）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#192.168.10.72主机执行</span><br><span class=\"line\">change master to master_host=&#x27;192.168.10.71&#x27;,master_port=3306,master_user=&#x27;root&#x27;,master_password=&#x27;dahouzi&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=2438;</span><br><span class=\"line\"></span><br><span class=\"line\">#192.168.10.71主机执行</span><br><span class=\"line\">change master to master_host=&#x27;192.168.10.72&#x27;,master_port=3306,master_user=&#x27;root&#x27;,master_password=&#x27;***&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=868;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认主从关系<br>\nSlave_IO_Running: Yes和Slave_SQL_Running: Yes</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">start slave;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">mysql&gt; </span><span class=\"language-bash\">show slave status \\G;</span></span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.10.72</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 868</span><br><span class=\"line\">               Relay_Log_File: mysql-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 320</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-MHA高可用\">5. MHA高可用</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">ssh-copy-id node71</span><br><span class=\"line\">ssh-copy-id node72</span><br><span class=\"line\">ssh-copy-id node73</span><br></pre></td></tr></table></figure>\n<p>keepalive<br>\n/etc/keepalived/keepalived.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   router_id master71</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.10.77</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.10.77 3306 &#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    net_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 192.168.10.71 3306 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        notify_down /etc/keepalived/closekeepalived.sh</span><br><span class=\"line\">        TCP_CHECK &#123;               # 健康检查</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">            connect_port 3306     # 设置连接端口3306</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关闭keepalived</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/keepalived/closekeepalived.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#closekeepalived.sh内容</span><br><span class=\"line\">sudo -S killall keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/keepalived/closekeepalived.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-测试\">6. 测试</h2>\n<p>原理：keepalived监控自己节点的mysql是否正常，如果检测mysql已关闭，则关闭自己告诉对方接管虚拟IP。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 mha]# service keepalived restart</span><br><span class=\"line\">Redirecting to /bin/systemctl restart keepalived.service</span><br><span class=\"line\">[root@node71 mha]# ps -ef | grep keepalived</span><br><span class=\"line\">root      27246      1  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27247  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27248  27246  0 00:04 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class=\"line\">root      27255  23305  0 00:04 pts/0    00:00:00 grep --color=auto keepalived</span><br><span class=\"line\">[root@node71 mha]# ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: ens32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:fd:2c:2f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.10.71/24 brd 192.168.10.255 scope global noprefixroute ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 192.168.10.77/32 scope global ens32</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::9c86:aaa1:7ab7:4315/64 scope link noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 52:54:00:6b:1e:21 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-维护操作\">7. 维护操作</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# systemctl restart mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl status mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl stop mysqld</span><br><span class=\"line\">[root@node71 ~]# systemctl restart keepalived.service</span><br><span class=\"line\">[root@node71 ~]# systemctl stop keepalived.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-日常运维（主机重启）\">8. 日常运维（主机重启）</h2>\n<ol>\n<li>因数据库不常重启，主机重启后的操作，需校对数据库一致性</li>\n<li>每隔24小时，也需校对一次关键数据在主从服务器一致性，在资源消耗低谷时做</li>\n</ol>\n"},{"title":"7.4.Elasticsearch集群容器部署","author":"空空","_content":"\n\nhttps://www.elastic.co/guide/en/enterprise-search/7.15/docker.html\n\n### 1.前置工作\n创建外置目录，修改进程可使用最大虚拟内存\n```bash\nmkdir -p /docker_data/elasticsearch/{config,data,plugins,logs}\necho \"vm.max_map_count=262144\" >> /etc/sysctl.conf\ncat /etc/sysctl.conf\nsysctl -p\n\n#vm.max_map_count = 262144\n```\n### 2.创建配置文件\n每个节点`/docker_data/elasticsearch/config/elasticsearch.yml`,修改node.name，network.publish_host\n```bash\n#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。\ncluster.name: prod-env-es\n#节点名称\nnode.name: es-182\n#设置索引数据的存储路径\npath.data: ./data\n#设置日志的存储路径\npath.logs: ./logs\n#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.182\n#设置对外服务的http端口\nhttp.port: 9200\ntransport.tcp.port: 9300\n#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点\n#discovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\ndiscovery.seed_hosts: [\"192.168.10.181:9300\",\"192.168.10.182:9300\",\"192.168.10.183:9300\",\"192.168.10.184:9300\",\"192.168.10.185:9300\",\"192.168.10.186:9300\"]\ncluster.initial_master_nodes: [\"es-181\", \"es-182\",\"es-183\", \"es-184\", \"es-185\", \"es-186\"]\n\nnode.master: true\nnode.data: true\n\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n## java.lang.IllegalArgumentException: node settings must not contain any index level settings\n## 设置默认索引副本个数\n#index.number_of_replicas: 1\n## 设置默认索引分片个数 5\n#index.number_of_shards: 5\n## 索引缓存\n#indices.memory.index_buffer_size: 512m\n\n```\n\n\n### 3.创建实例\n```bash\n# 记得修改名称和ES_JAVA_OPTS\ndocker run  --name prod_es_cluster_01 \\\n--network=host --privileged=true --restart=always \\\n-v /docker_data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /docker_data/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /docker_data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-v /docker_data/elasticsearch/logs:/usr/share/elasticsearch/logs \\\n-e ES_JAVA_OPTS=\"-Xms1024m -Xmx1024m\" \\\n-e TAKE_FILE_OWNERSHIP=true \\\ndocker.elastic.co/elasticsearch/elasticsearch:7.15.2\n```\n\n### 4.生成密钥\n\n```bash\n# 进入容器\ndocker exec -it prod_es_cluster_01 /bin/bash\n\n\n# 生成密钥\nbin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass \"\"\ncd /usr/share/elasticsearch/config/\nchmod 777 elastic-certificates.p12\nexit\n\n# 复制到宿主机\ndocker cp prod_es_cluster_01:/usr/share/elasticsearch/config/elastic-certificates.p12 /docker_data/elasticsearch/config/elastic-certificates.p12 \n```\n\n### 5.分发密钥\n2-6主机均需复制\n```bash\ndocker cp /docker_data/elasticsearch/config/elastic-certificates.p12 prod_es_cluster_02:/usr/share/elasticsearch/config/elastic-certificates.p12\n\n# 修改/docker_data/elasticsearch/config/elasticsearch.yml，添加以下几行：\nxpack.security.enabled: true\nxpack.license.self_generated.type: basic\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: elastic-certificates.p12\n```\n重启docker-es实例\n\n\n### 6.修改密码\n\n```shell\ndocker-compose exec prod_middleware_es_02 bash\ndocker-compose exec prod_middleware_es_02 bash\n[root@node1 ~]# docker-compose exec prod_middleware_es_02 bash\nbash-4.4# bin/elasticsearch-setup-passwords interactive\nInitiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.\nYou will be prompted to enter passwords as the process progresses.\nPlease confirm that you would like to continue [y/N]y\nelastic#dahouzi5764\n```\n\n### 7.验证集群\n打开：http://192.168.240.214:19200/_cat/nodes?pretty，输入新设密码。\n\n```\n192.168.10.186 58 99 0 0.00 0.07 0.21 cdfhilmrstw - es-186\n192.168.10.185 66 68 0 0.00 0.10 0.28 cdfhilmrstw * es-185\n192.168.10.183 56 88 0 0.03 0.05 0.06 cdfhilmrstw - es-183\n192.168.10.184 42 98 0 0.07 0.07 0.08 cdfhilmrstw - es-184\n192.168.10.181 15 63 0 0.27 0.09 0.16 cdfhilmrstw - es-181\n192.168.10.182 54 57 9 1.39 0.63 0.56 cdfhilmrstw - es-182\n```\n\n### 8.可选安装kibana\n\n````bash\ndocker run -d --name dev-kibana-standalone-01  -p 5601:5601 -e \"ELASTICSEARCH_HOSTS=http://119.23.155.163:9200/\" docker.elastic.co/kibana/kibana:7.15.2\n\ndocker exec -it dev-kibana-standalone-01 /bin/bash\t\t# 进入容器内部\ncat /usr/share/kibana/config/kibana.yml\n\n\n# Default Kibana configuration for docker target\nserver.host: \"0\"\nserver.shutdownTimeout: \"5s\"\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\nmonitoring.ui.container.elasticsearch.enabled: true\n\ni18n.locale: zh-CN\n#elasticsearch.username: elastic\n#elasticsearch.password: ***\n\n````\n\n### 9.错误处理\n原因：新实例共享使用了旧实例的数据文件夹\n解决方法：停止docker es实例，删除data和logs文件夹内数据，重新run.\n```bash\nException in thread \"main\" java.lang.RuntimeException: starting java failed with [1]\noutput:\n[0.000s][error][logging] Error opening log file 'logs/gc.log': Permission denied\n[0.000s][error][logging] Initialization of output 'file=logs/gc.log' using options 'filecount=32,filesize=64m' failed.\nerror:\nInvalid -Xlog option '-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m', see error log for details.\nError: Could not create the Java Virtual Machine.\nError: A fatal exception has occurred. Program will exit.\n        at org.elasticsearch.tools.launchers.JvmOption.flagsFinal(JvmOption.java:119)\n        at org.elasticsearch.tools.launchers.JvmOption.findFinalOptions(JvmOption.java:81)\n        at org.elasticsearch.tools.launchers.JvmErgonomics.choose(JvmErgonomics.java:38)\n        at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:135)\n        at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86)\n```\n\n原因：/usr/share/elasticsearch/config/elastic-certificates.p12创建后没有访问权限。\n解决方法：进入容器，chmod 777暴力授权。\n```bash\n\"stacktrace\": [\"org.elasticsearch.bootstrap.StartupException: ElasticsearchSecurityException[failed to load SSL configuration [xpack.security.transport.ssl]]; nested: ElasticsearchException[failed to initialize SSL TrustManager - not permitted to read truststore file [/usr/share/elasticsearch/config/elastic-certificates.p12]]; \n\n\n\nprod_middleware_es_01_1  | {\"type\": \"server\", \"timestamp\": \"2023-07-21T06:46:19,857Z\", \"level\": \"ERROR\", \"component\": \"o.e.b.ElasticsearchUncaughtExceptionHandler\", \"cluster.name\": \"prod-middleware-elasticsearch\", \"node.name\": \"middleware-es-node001\", \"message\": \"uncaught exception in thread [main]\",\n\n```\n解决方法：原来的docker没停掉。停止然后删除就行。\n\n","source":"_posts/07中间件/7.4.Elasticsearch集群容器部署.md","raw":"---\ntitle: 7.4.Elasticsearch集群容器部署\nauthor: 空空\n---\n\n\nhttps://www.elastic.co/guide/en/enterprise-search/7.15/docker.html\n\n### 1.前置工作\n创建外置目录，修改进程可使用最大虚拟内存\n```bash\nmkdir -p /docker_data/elasticsearch/{config,data,plugins,logs}\necho \"vm.max_map_count=262144\" >> /etc/sysctl.conf\ncat /etc/sysctl.conf\nsysctl -p\n\n#vm.max_map_count = 262144\n```\n### 2.创建配置文件\n每个节点`/docker_data/elasticsearch/config/elasticsearch.yml`,修改node.name，network.publish_host\n```bash\n#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。\ncluster.name: prod-env-es\n#节点名称\nnode.name: es-182\n#设置索引数据的存储路径\npath.data: ./data\n#设置日志的存储路径\npath.logs: ./logs\n#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.182\n#设置对外服务的http端口\nhttp.port: 9200\ntransport.tcp.port: 9300\n#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点\n#discovery.zen.ping.unicast.hosts: [\"0.0.0.0\"]\ndiscovery.seed_hosts: [\"192.168.10.181:9300\",\"192.168.10.182:9300\",\"192.168.10.183:9300\",\"192.168.10.184:9300\",\"192.168.10.185:9300\",\"192.168.10.186:9300\"]\ncluster.initial_master_nodes: [\"es-181\", \"es-182\",\"es-183\", \"es-184\", \"es-185\", \"es-186\"]\n\nnode.master: true\nnode.data: true\n\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n## java.lang.IllegalArgumentException: node settings must not contain any index level settings\n## 设置默认索引副本个数\n#index.number_of_replicas: 1\n## 设置默认索引分片个数 5\n#index.number_of_shards: 5\n## 索引缓存\n#indices.memory.index_buffer_size: 512m\n\n```\n\n\n### 3.创建实例\n```bash\n# 记得修改名称和ES_JAVA_OPTS\ndocker run  --name prod_es_cluster_01 \\\n--network=host --privileged=true --restart=always \\\n-v /docker_data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /docker_data/elasticsearch/data:/usr/share/elasticsearch/data \\\n-v /docker_data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\n-v /docker_data/elasticsearch/logs:/usr/share/elasticsearch/logs \\\n-e ES_JAVA_OPTS=\"-Xms1024m -Xmx1024m\" \\\n-e TAKE_FILE_OWNERSHIP=true \\\ndocker.elastic.co/elasticsearch/elasticsearch:7.15.2\n```\n\n### 4.生成密钥\n\n```bash\n# 进入容器\ndocker exec -it prod_es_cluster_01 /bin/bash\n\n\n# 生成密钥\nbin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass \"\"\ncd /usr/share/elasticsearch/config/\nchmod 777 elastic-certificates.p12\nexit\n\n# 复制到宿主机\ndocker cp prod_es_cluster_01:/usr/share/elasticsearch/config/elastic-certificates.p12 /docker_data/elasticsearch/config/elastic-certificates.p12 \n```\n\n### 5.分发密钥\n2-6主机均需复制\n```bash\ndocker cp /docker_data/elasticsearch/config/elastic-certificates.p12 prod_es_cluster_02:/usr/share/elasticsearch/config/elastic-certificates.p12\n\n# 修改/docker_data/elasticsearch/config/elasticsearch.yml，添加以下几行：\nxpack.security.enabled: true\nxpack.license.self_generated.type: basic\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: elastic-certificates.p12\n```\n重启docker-es实例\n\n\n### 6.修改密码\n\n```shell\ndocker-compose exec prod_middleware_es_02 bash\ndocker-compose exec prod_middleware_es_02 bash\n[root@node1 ~]# docker-compose exec prod_middleware_es_02 bash\nbash-4.4# bin/elasticsearch-setup-passwords interactive\nInitiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.\nYou will be prompted to enter passwords as the process progresses.\nPlease confirm that you would like to continue [y/N]y\nelastic#dahouzi5764\n```\n\n### 7.验证集群\n打开：http://192.168.240.214:19200/_cat/nodes?pretty，输入新设密码。\n\n```\n192.168.10.186 58 99 0 0.00 0.07 0.21 cdfhilmrstw - es-186\n192.168.10.185 66 68 0 0.00 0.10 0.28 cdfhilmrstw * es-185\n192.168.10.183 56 88 0 0.03 0.05 0.06 cdfhilmrstw - es-183\n192.168.10.184 42 98 0 0.07 0.07 0.08 cdfhilmrstw - es-184\n192.168.10.181 15 63 0 0.27 0.09 0.16 cdfhilmrstw - es-181\n192.168.10.182 54 57 9 1.39 0.63 0.56 cdfhilmrstw - es-182\n```\n\n### 8.可选安装kibana\n\n````bash\ndocker run -d --name dev-kibana-standalone-01  -p 5601:5601 -e \"ELASTICSEARCH_HOSTS=http://119.23.155.163:9200/\" docker.elastic.co/kibana/kibana:7.15.2\n\ndocker exec -it dev-kibana-standalone-01 /bin/bash\t\t# 进入容器内部\ncat /usr/share/kibana/config/kibana.yml\n\n\n# Default Kibana configuration for docker target\nserver.host: \"0\"\nserver.shutdownTimeout: \"5s\"\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\nmonitoring.ui.container.elasticsearch.enabled: true\n\ni18n.locale: zh-CN\n#elasticsearch.username: elastic\n#elasticsearch.password: ***\n\n````\n\n### 9.错误处理\n原因：新实例共享使用了旧实例的数据文件夹\n解决方法：停止docker es实例，删除data和logs文件夹内数据，重新run.\n```bash\nException in thread \"main\" java.lang.RuntimeException: starting java failed with [1]\noutput:\n[0.000s][error][logging] Error opening log file 'logs/gc.log': Permission denied\n[0.000s][error][logging] Initialization of output 'file=logs/gc.log' using options 'filecount=32,filesize=64m' failed.\nerror:\nInvalid -Xlog option '-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m', see error log for details.\nError: Could not create the Java Virtual Machine.\nError: A fatal exception has occurred. Program will exit.\n        at org.elasticsearch.tools.launchers.JvmOption.flagsFinal(JvmOption.java:119)\n        at org.elasticsearch.tools.launchers.JvmOption.findFinalOptions(JvmOption.java:81)\n        at org.elasticsearch.tools.launchers.JvmErgonomics.choose(JvmErgonomics.java:38)\n        at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:135)\n        at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86)\n```\n\n原因：/usr/share/elasticsearch/config/elastic-certificates.p12创建后没有访问权限。\n解决方法：进入容器，chmod 777暴力授权。\n```bash\n\"stacktrace\": [\"org.elasticsearch.bootstrap.StartupException: ElasticsearchSecurityException[failed to load SSL configuration [xpack.security.transport.ssl]]; nested: ElasticsearchException[failed to initialize SSL TrustManager - not permitted to read truststore file [/usr/share/elasticsearch/config/elastic-certificates.p12]]; \n\n\n\nprod_middleware_es_01_1  | {\"type\": \"server\", \"timestamp\": \"2023-07-21T06:46:19,857Z\", \"level\": \"ERROR\", \"component\": \"o.e.b.ElasticsearchUncaughtExceptionHandler\", \"cluster.name\": \"prod-middleware-elasticsearch\", \"node.name\": \"middleware-es-node001\", \"message\": \"uncaught exception in thread [main]\",\n\n```\n解决方法：原来的docker没停掉。停止然后删除就行。\n\n","slug":"07中间件/7.4.Elasticsearch集群容器部署","published":1,"date":"2024-07-20T07:39:53.907Z","updated":"2024-07-20T07:45:28.340Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqk000bj38a6o0i3sg7","content":"<p><a href=\"https://www.elastic.co/guide/en/enterprise-search/7.15/docker.html\">https://www.elastic.co/guide/en/enterprise-search/7.15/docker.html</a></p>\n<h3 id=\"1-前置工作\">1.前置工作</h3>\n<p>创建外置目录，修改进程可使用最大虚拟内存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /docker_data/elasticsearch/&#123;config,data,plugins,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;vm.max_map_count=262144&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#vm.max_map_count = 262144</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建配置文件\">2.创建配置文件</h3>\n<p>每个节点<code>/docker_data/elasticsearch/config/elasticsearch.yml</code>,<a href=\"http://xn--node-486fx14i.name\">修改node.name</a>，network.publish_host</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span></span><br><span class=\"line\">cluster.name: prod-env-es</span><br><span class=\"line\"><span class=\"comment\">#节点名称</span></span><br><span class=\"line\">node.name: es-182</span><br><span class=\"line\"><span class=\"comment\">#设置索引数据的存储路径</span></span><br><span class=\"line\">path.data: ./data</span><br><span class=\"line\"><span class=\"comment\">#设置日志的存储路径</span></span><br><span class=\"line\">path.logs: ./logs</span><br><span class=\"line\"><span class=\"comment\">#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span></span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">network.publish_host: 192.168.10.182</span><br><span class=\"line\"><span class=\"comment\">#设置对外服务的http端口</span></span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\">transport.tcp.port: 9300</span><br><span class=\"line\"><span class=\"comment\">#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span></span><br><span class=\"line\"><span class=\"comment\">#discovery.zen.ping.unicast.hosts: [&quot;0.0.0.0&quot;]</span></span><br><span class=\"line\">discovery.seed_hosts: [<span class=\"string\">&quot;192.168.10.181:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.182:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.183:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.184:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.185:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.186:9300&quot;</span>]</span><br><span class=\"line\">cluster.initial_master_nodes: [<span class=\"string\">&quot;es-181&quot;</span>, <span class=\"string\">&quot;es-182&quot;</span>,<span class=\"string\">&quot;es-183&quot;</span>, <span class=\"string\">&quot;es-184&quot;</span>, <span class=\"string\">&quot;es-185&quot;</span>, <span class=\"string\">&quot;es-186&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">node.master: <span class=\"literal\">true</span></span><br><span class=\"line\">node.data: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"comment\">## java.lang.IllegalArgumentException: node settings must not contain any index level settings</span></span><br><span class=\"line\"><span class=\"comment\">## 设置默认索引副本个数</span></span><br><span class=\"line\"><span class=\"comment\">#index.number_of_replicas: 1</span></span><br><span class=\"line\"><span class=\"comment\">## 设置默认索引分片个数 5</span></span><br><span class=\"line\"><span class=\"comment\">#index.number_of_shards: 5</span></span><br><span class=\"line\"><span class=\"comment\">## 索引缓存</span></span><br><span class=\"line\"><span class=\"comment\">#indices.memory.index_buffer_size: 512m</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建实例\">3.创建实例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 记得修改名称和ES_JAVA_OPTS</span></span><br><span class=\"line\">docker run  --name prod_es_cluster_01 \\</span><br><span class=\"line\">--network=host --privileged=<span class=\"literal\">true</span> --restart=always \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/logs:/usr/share/elasticsearch/logs \\</span><br><span class=\"line\">-e ES_JAVA_OPTS=<span class=\"string\">&quot;-Xms1024m -Xmx1024m&quot;</span> \\</span><br><span class=\"line\">-e TAKE_FILE_OWNERSHIP=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">docker.elastic.co/elasticsearch/elasticsearch:7.15.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-生成密钥\">4.生成密钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it prod_es_cluster_01 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成密钥</span></span><br><span class=\"line\">bin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/elasticsearch/config/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 elastic-certificates.p12</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制到宿主机</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> prod_es_cluster_01:/usr/share/elasticsearch/config/elastic-certificates.p12 /docker_data/elasticsearch/config/elastic-certificates.p12 </span><br></pre></td></tr></table></figure>\n<h3 id=\"5-分发密钥\">5.分发密钥</h3>\n<p>2-6主机均需复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> /docker_data/elasticsearch/config/elastic-certificates.p12 prod_es_cluster_02:/usr/share/elasticsearch/config/elastic-certificates.p12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改/docker_data/elasticsearch/config/elasticsearch.yml，添加以下几行：</span></span><br><span class=\"line\">xpack.security.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.license.self_generated.type: basic</span><br><span class=\"line\">xpack.security.transport.ssl.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class=\"line\">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class=\"line\">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure>\n<p>重启docker-es实例</p>\n<h3 id=\"6-修改密码\">6.修改密码</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">[root@node1 ~]# docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">bash-4.4# bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\"><span class=\"meta prompt_\">elastic#</span><span class=\"language-bash\">dahouzi5764</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-验证集群\">7.验证集群</h3>\n<p>打开：<a href=\"http://192.168.240.214:19200/_cat/nodes?pretty%EF%BC%8C%E8%BE%93%E5%85%A5%E6%96%B0%E8%AE%BE%E5%AF%86%E7%A0%81%E3%80%82\">http://192.168.240.214:19200/_cat/nodes?pretty，输入新设密码。</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.186 58 99 0 0.00 0.07 0.21 cdfhilmrstw - es-186</span><br><span class=\"line\">192.168.10.185 66 68 0 0.00 0.10 0.28 cdfhilmrstw * es-185</span><br><span class=\"line\">192.168.10.183 56 88 0 0.03 0.05 0.06 cdfhilmrstw - es-183</span><br><span class=\"line\">192.168.10.184 42 98 0 0.07 0.07 0.08 cdfhilmrstw - es-184</span><br><span class=\"line\">192.168.10.181 15 63 0 0.27 0.09 0.16 cdfhilmrstw - es-181</span><br><span class=\"line\">192.168.10.182 54 57 9 1.39 0.63 0.56 cdfhilmrstw - es-182</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-可选安装kibana\">8.可选安装kibana</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name dev-kibana-standalone-01  -p 5601:5601 -e <span class=\"string\">&quot;ELASTICSEARCH_HOSTS=http://119.23.155.163:9200/&quot;</span> docker.elastic.co/kibana/kibana:7.15.2</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it dev-kibana-standalone-01 /bin/bash\t\t<span class=\"comment\"># 进入容器内部</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /usr/share/kibana/config/kibana.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Default Kibana configuration for docker target</span></span><br><span class=\"line\">server.host: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">server.shutdownTimeout: <span class=\"string\">&quot;5s&quot;</span></span><br><span class=\"line\">elasticsearch.hosts: [ <span class=\"string\">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class=\"line\">monitoring.ui.container.elasticsearch.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">i18n.locale: zh-CN</span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.username: elastic</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.password: ***</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-错误处理\">9.错误处理</h3>\n<p>原因：新实例共享使用了旧实例的数据文件夹<br>\n解决方法：停止docker es实例，删除data和logs文件夹内数据，重新run.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.lang.RuntimeException: starting java failed with [1]</span><br><span class=\"line\">output:</span><br><span class=\"line\">[0.000s][error][logging] Error opening <span class=\"built_in\">log</span> file <span class=\"string\">&#x27;logs/gc.log&#x27;</span>: Permission denied</span><br><span class=\"line\">[0.000s][error][logging] Initialization of output <span class=\"string\">&#x27;file=logs/gc.log&#x27;</span> using options <span class=\"string\">&#x27;filecount=32,filesize=64m&#x27;</span> failed.</span><br><span class=\"line\">error:</span><br><span class=\"line\">Invalid -Xlog option <span class=\"string\">&#x27;-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m&#x27;</span>, see error <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Error: Could not create the Java Virtual Machine.</span><br><span class=\"line\">Error: A fatal exception has occurred. Program will <span class=\"built_in\">exit</span>.</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOption.flagsFinal(JvmOption.java:119)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOption.findFinalOptions(JvmOption.java:81)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmErgonomics.choose(JvmErgonomics.java:38)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:135)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86)</span><br></pre></td></tr></table></figure>\n<p>原因：/usr/share/elasticsearch/config/elastic-certificates.p12创建后没有访问权限。<br>\n解决方法：进入容器，chmod 777暴力授权。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;stacktrace&quot;</span>: [<span class=\"string\">&quot;org.elasticsearch.bootstrap.StartupException: ElasticsearchSecurityException[failed to load SSL configuration [xpack.security.transport.ssl]]; nested: ElasticsearchException[failed to initialize SSL TrustManager - not permitted to read truststore file [/usr/share/elasticsearch/config/elastic-certificates.p12]]; </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">prod_middleware_es_01_1  | &#123;&quot;</span><span class=\"built_in\">type</span><span class=\"string\">&quot;: &quot;</span>server<span class=\"string\">&quot;, &quot;</span>timestamp<span class=\"string\">&quot;: &quot;</span>2023-07-21T06:46:19,857Z<span class=\"string\">&quot;, &quot;</span>level<span class=\"string\">&quot;: &quot;</span>ERROR<span class=\"string\">&quot;, &quot;</span>component<span class=\"string\">&quot;: &quot;</span>o.e.b.ElasticsearchUncaughtExceptionHandler<span class=\"string\">&quot;, &quot;</span>cluster.name<span class=\"string\">&quot;: &quot;</span>prod-middleware-elasticsearch<span class=\"string\">&quot;, &quot;</span>node.name<span class=\"string\">&quot;: &quot;</span>middleware-es-node001<span class=\"string\">&quot;, &quot;</span>message<span class=\"string\">&quot;: &quot;</span>uncaught exception <span class=\"keyword\">in</span> thread [main]<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>解决方法：原来的docker没停掉。停止然后删除就行。</p>\n","excerpt":"","more":"<p><a href=\"https://www.elastic.co/guide/en/enterprise-search/7.15/docker.html\">https://www.elastic.co/guide/en/enterprise-search/7.15/docker.html</a></p>\n<h3 id=\"1-前置工作\">1.前置工作</h3>\n<p>创建外置目录，修改进程可使用最大虚拟内存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /docker_data/elasticsearch/&#123;config,data,plugins,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;vm.max_map_count=262144&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#vm.max_map_count = 262144</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建配置文件\">2.创建配置文件</h3>\n<p>每个节点<code>/docker_data/elasticsearch/config/elasticsearch.yml</code>,<a href=\"http://xn--node-486fx14i.name\">修改node.name</a>，network.publish_host</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span></span><br><span class=\"line\">cluster.name: prod-env-es</span><br><span class=\"line\"><span class=\"comment\">#节点名称</span></span><br><span class=\"line\">node.name: es-182</span><br><span class=\"line\"><span class=\"comment\">#设置索引数据的存储路径</span></span><br><span class=\"line\">path.data: ./data</span><br><span class=\"line\"><span class=\"comment\">#设置日志的存储路径</span></span><br><span class=\"line\">path.logs: ./logs</span><br><span class=\"line\"><span class=\"comment\">#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span></span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">network.publish_host: 192.168.10.182</span><br><span class=\"line\"><span class=\"comment\">#设置对外服务的http端口</span></span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\">transport.tcp.port: 9300</span><br><span class=\"line\"><span class=\"comment\">#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span></span><br><span class=\"line\"><span class=\"comment\">#discovery.zen.ping.unicast.hosts: [&quot;0.0.0.0&quot;]</span></span><br><span class=\"line\">discovery.seed_hosts: [<span class=\"string\">&quot;192.168.10.181:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.182:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.183:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.184:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.185:9300&quot;</span>,<span class=\"string\">&quot;192.168.10.186:9300&quot;</span>]</span><br><span class=\"line\">cluster.initial_master_nodes: [<span class=\"string\">&quot;es-181&quot;</span>, <span class=\"string\">&quot;es-182&quot;</span>,<span class=\"string\">&quot;es-183&quot;</span>, <span class=\"string\">&quot;es-184&quot;</span>, <span class=\"string\">&quot;es-185&quot;</span>, <span class=\"string\">&quot;es-186&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">node.master: <span class=\"literal\">true</span></span><br><span class=\"line\">node.data: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"comment\">## java.lang.IllegalArgumentException: node settings must not contain any index level settings</span></span><br><span class=\"line\"><span class=\"comment\">## 设置默认索引副本个数</span></span><br><span class=\"line\"><span class=\"comment\">#index.number_of_replicas: 1</span></span><br><span class=\"line\"><span class=\"comment\">## 设置默认索引分片个数 5</span></span><br><span class=\"line\"><span class=\"comment\">#index.number_of_shards: 5</span></span><br><span class=\"line\"><span class=\"comment\">## 索引缓存</span></span><br><span class=\"line\"><span class=\"comment\">#indices.memory.index_buffer_size: 512m</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建实例\">3.创建实例</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 记得修改名称和ES_JAVA_OPTS</span></span><br><span class=\"line\">docker run  --name prod_es_cluster_01 \\</span><br><span class=\"line\">--network=host --privileged=<span class=\"literal\">true</span> --restart=always \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">-v /docker_data/elasticsearch/logs:/usr/share/elasticsearch/logs \\</span><br><span class=\"line\">-e ES_JAVA_OPTS=<span class=\"string\">&quot;-Xms1024m -Xmx1024m&quot;</span> \\</span><br><span class=\"line\">-e TAKE_FILE_OWNERSHIP=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">docker.elastic.co/elasticsearch/elasticsearch:7.15.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-生成密钥\">4.生成密钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it prod_es_cluster_01 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成密钥</span></span><br><span class=\"line\">bin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/elasticsearch/config/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 elastic-certificates.p12</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制到宿主机</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> prod_es_cluster_01:/usr/share/elasticsearch/config/elastic-certificates.p12 /docker_data/elasticsearch/config/elastic-certificates.p12 </span><br></pre></td></tr></table></figure>\n<h3 id=\"5-分发密钥\">5.分发密钥</h3>\n<p>2-6主机均需复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> /docker_data/elasticsearch/config/elastic-certificates.p12 prod_es_cluster_02:/usr/share/elasticsearch/config/elastic-certificates.p12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改/docker_data/elasticsearch/config/elasticsearch.yml，添加以下几行：</span></span><br><span class=\"line\">xpack.security.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.license.self_generated.type: basic</span><br><span class=\"line\">xpack.security.transport.ssl.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class=\"line\">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class=\"line\">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure>\n<p>重启docker-es实例</p>\n<h3 id=\"6-修改密码\">6.修改密码</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">[root@node1 ~]# docker-compose exec prod_middleware_es_02 bash</span><br><span class=\"line\">bash-4.4# bin/elasticsearch-setup-passwords interactive</span><br><span class=\"line\">Initiating the setup of passwords for reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.</span><br><span class=\"line\">You will be prompted to enter passwords as the process progresses.</span><br><span class=\"line\">Please confirm that you would like to continue [y/N]y</span><br><span class=\"line\"><span class=\"meta prompt_\">elastic#</span><span class=\"language-bash\">dahouzi5764</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-验证集群\">7.验证集群</h3>\n<p>打开：<a href=\"http://192.168.240.214:19200/_cat/nodes?pretty%EF%BC%8C%E8%BE%93%E5%85%A5%E6%96%B0%E8%AE%BE%E5%AF%86%E7%A0%81%E3%80%82\">http://192.168.240.214:19200/_cat/nodes?pretty，输入新设密码。</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.186 58 99 0 0.00 0.07 0.21 cdfhilmrstw - es-186</span><br><span class=\"line\">192.168.10.185 66 68 0 0.00 0.10 0.28 cdfhilmrstw * es-185</span><br><span class=\"line\">192.168.10.183 56 88 0 0.03 0.05 0.06 cdfhilmrstw - es-183</span><br><span class=\"line\">192.168.10.184 42 98 0 0.07 0.07 0.08 cdfhilmrstw - es-184</span><br><span class=\"line\">192.168.10.181 15 63 0 0.27 0.09 0.16 cdfhilmrstw - es-181</span><br><span class=\"line\">192.168.10.182 54 57 9 1.39 0.63 0.56 cdfhilmrstw - es-182</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-可选安装kibana\">8.可选安装kibana</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name dev-kibana-standalone-01  -p 5601:5601 -e <span class=\"string\">&quot;ELASTICSEARCH_HOSTS=http://119.23.155.163:9200/&quot;</span> docker.elastic.co/kibana/kibana:7.15.2</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it dev-kibana-standalone-01 /bin/bash\t\t<span class=\"comment\"># 进入容器内部</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /usr/share/kibana/config/kibana.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Default Kibana configuration for docker target</span></span><br><span class=\"line\">server.host: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">server.shutdownTimeout: <span class=\"string\">&quot;5s&quot;</span></span><br><span class=\"line\">elasticsearch.hosts: [ <span class=\"string\">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class=\"line\">monitoring.ui.container.elasticsearch.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">i18n.locale: zh-CN</span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.username: elastic</span></span><br><span class=\"line\"><span class=\"comment\">#elasticsearch.password: ***</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-错误处理\">9.错误处理</h3>\n<p>原因：新实例共享使用了旧实例的数据文件夹<br>\n解决方法：停止docker es实例，删除data和logs文件夹内数据，重新run.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.lang.RuntimeException: starting java failed with [1]</span><br><span class=\"line\">output:</span><br><span class=\"line\">[0.000s][error][logging] Error opening <span class=\"built_in\">log</span> file <span class=\"string\">&#x27;logs/gc.log&#x27;</span>: Permission denied</span><br><span class=\"line\">[0.000s][error][logging] Initialization of output <span class=\"string\">&#x27;file=logs/gc.log&#x27;</span> using options <span class=\"string\">&#x27;filecount=32,filesize=64m&#x27;</span> failed.</span><br><span class=\"line\">error:</span><br><span class=\"line\">Invalid -Xlog option <span class=\"string\">&#x27;-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m&#x27;</span>, see error <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Error: Could not create the Java Virtual Machine.</span><br><span class=\"line\">Error: A fatal exception has occurred. Program will <span class=\"built_in\">exit</span>.</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOption.flagsFinal(JvmOption.java:119)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOption.findFinalOptions(JvmOption.java:81)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmErgonomics.choose(JvmErgonomics.java:38)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:135)</span><br><span class=\"line\">        at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86)</span><br></pre></td></tr></table></figure>\n<p>原因：/usr/share/elasticsearch/config/elastic-certificates.p12创建后没有访问权限。<br>\n解决方法：进入容器，chmod 777暴力授权。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;stacktrace&quot;</span>: [<span class=\"string\">&quot;org.elasticsearch.bootstrap.StartupException: ElasticsearchSecurityException[failed to load SSL configuration [xpack.security.transport.ssl]]; nested: ElasticsearchException[failed to initialize SSL TrustManager - not permitted to read truststore file [/usr/share/elasticsearch/config/elastic-certificates.p12]]; </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">prod_middleware_es_01_1  | &#123;&quot;</span><span class=\"built_in\">type</span><span class=\"string\">&quot;: &quot;</span>server<span class=\"string\">&quot;, &quot;</span>timestamp<span class=\"string\">&quot;: &quot;</span>2023-07-21T06:46:19,857Z<span class=\"string\">&quot;, &quot;</span>level<span class=\"string\">&quot;: &quot;</span>ERROR<span class=\"string\">&quot;, &quot;</span>component<span class=\"string\">&quot;: &quot;</span>o.e.b.ElasticsearchUncaughtExceptionHandler<span class=\"string\">&quot;, &quot;</span>cluster.name<span class=\"string\">&quot;: &quot;</span>prod-middleware-elasticsearch<span class=\"string\">&quot;, &quot;</span>node.name<span class=\"string\">&quot;: &quot;</span>middleware-es-node001<span class=\"string\">&quot;, &quot;</span>message<span class=\"string\">&quot;: &quot;</span>uncaught exception <span class=\"keyword\">in</span> thread [main]<span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>解决方法：原来的docker没停掉。停止然后删除就行。</p>\n"},{"title":"0703·Redis集群环境部署","author":"空空","_content":"## Redis集群环境部署\n\n### 集群连接\n\n```shell\nRedis集群-测试库\nRedis连接：\n192.168.10.71:6379\n192.168.10.72:6379\n192.168.10.73:6379\n192.168.10.91:6379\n192.168.10.92:6379\n192.168.10.93:6379\n\nRedis密码：\n86a1b907d54bf7010394bf316e183e67\n```\n\n\n\n### 安装redis\n\n```\nyum install epel-release -y\nyum install redis -y\n\nsystemctl restart redis\nsystemctl enable redis\nsystemctl status redis\n\n\nfirewall-cmd --add-port=6379/tcp --permanent\nfirewall-cmd --add-port=6380/tcp --permanent\nfirewall-cmd --add-port=16379/tcp --permanent\nfirewall-cmd --reload\n```\n\n\n\n### 修改配置文件\n\n路径：`/etc/redis.conf`，每个节点都需修改，bind ip以实际为准。\n\n```\nbind 192.168.10.71\ncluster-enabled yes\nmasterauth '86a1b907d54bf7010394bf316e183e67'\nrequirepass '86a1b907d54bf7010394bf316e183e67'\n```\n\nsystemctl restart redis\n\n\n\n### 配置集群\n\n```\nredis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes\n\n[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\nab5b9040aa84704aa44e977b410ecd9f86227987 :6379 myself,master - 0 0 0 connected\n\n[root@node71 mysqld_exporter]# redis-cli --cluster create 192.168.10.71:6379 192.168.10.72:6379 192.168.10.73:6379 192.168.10.91:6379 192.168.10.92:6379 192.168.10.93:6379 --cluster-replicas 1 -a 86a1b907d54bf7010394bf316e183e67\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n>>> Performing hash slots allocation on 6 nodes...\nMaster[0] -> Slots 0 - 5460\nMaster[1] -> Slots 5461 - 10922\nMaster[2] -> Slots 10923 - 16383\nAdding replica 192.168.10.92:6379 to 192.168.10.71:6379\nAdding replica 192.168.10.93:6379 to 192.168.10.72:6379\nAdding replica 192.168.10.91:6379 to 192.168.10.73:6379\nM: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379\n   slots:[0-5460] (5461 slots) master\nM: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379\n   slots:[5461-10922] (5462 slots) master\nM: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379\n   slots:[10923-16383] (5461 slots) master\nS: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379\n   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb\nS: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379\n   replicates ab5b9040aa84704aa44e977b410ecd9f86227987\nS: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379\n   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb\nCan I set the above configuration? (type 'yes' to accept): yes\n>>> Nodes configuration updated\n>>> Assign a different config epoch to each node\n>>> Sending CLUSTER MEET messages to join the cluster\nWaiting for the cluster to join\n.....\n>>> Performing Cluster Check (using node 192.168.10.71:6379)\nM: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nS: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379\n   slots: (0 slots) slave\n   replicates ab5b9040aa84704aa44e977b410ecd9f86227987\nM: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\nS: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379\n   slots: (0 slots) slave\n   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb\nM: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\nS: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379\n   slots: (0 slots) slave\n   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n```\n\n\n\n### 查看节点\n\n```\n[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 -c\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n192.168.10.71:6379> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:1\ncluster_stats_messages_sent:1753\ncluster_stats_messages_received:1753\n\n192.168.10.71:6379> cluster nodes\n781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379 slave ab5b9040aa84704aa44e977b410ecd9f86227987 0 1686623763541 5 connected\nd9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379 master - 0 1686623765546 2 connected 5461-10922\n00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379 slave cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 0 1686623759523 4 connected\ncf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379 master - 0 1686623760526 3 connected 10923-16383\nab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379 myself,master - 0 0 1 connected 0-5460\nc53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379 slave d9a7b832cb43346df9406b640dc1590cbce35dbb 0 1686623764546 6 connected\n192.168.10.71:6379> exit\n\n```\n\n","source":"_posts/07中间件/7.3.Redis集群环境部署.md","raw":"---\ntitle: 0703·Redis集群环境部署\nauthor: 空空\n---\n## Redis集群环境部署\n\n### 集群连接\n\n```shell\nRedis集群-测试库\nRedis连接：\n192.168.10.71:6379\n192.168.10.72:6379\n192.168.10.73:6379\n192.168.10.91:6379\n192.168.10.92:6379\n192.168.10.93:6379\n\nRedis密码：\n86a1b907d54bf7010394bf316e183e67\n```\n\n\n\n### 安装redis\n\n```\nyum install epel-release -y\nyum install redis -y\n\nsystemctl restart redis\nsystemctl enable redis\nsystemctl status redis\n\n\nfirewall-cmd --add-port=6379/tcp --permanent\nfirewall-cmd --add-port=6380/tcp --permanent\nfirewall-cmd --add-port=16379/tcp --permanent\nfirewall-cmd --reload\n```\n\n\n\n### 修改配置文件\n\n路径：`/etc/redis.conf`，每个节点都需修改，bind ip以实际为准。\n\n```\nbind 192.168.10.71\ncluster-enabled yes\nmasterauth '86a1b907d54bf7010394bf316e183e67'\nrequirepass '86a1b907d54bf7010394bf316e183e67'\n```\n\nsystemctl restart redis\n\n\n\n### 配置集群\n\n```\nredis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes\n\n[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\nab5b9040aa84704aa44e977b410ecd9f86227987 :6379 myself,master - 0 0 0 connected\n\n[root@node71 mysqld_exporter]# redis-cli --cluster create 192.168.10.71:6379 192.168.10.72:6379 192.168.10.73:6379 192.168.10.91:6379 192.168.10.92:6379 192.168.10.93:6379 --cluster-replicas 1 -a 86a1b907d54bf7010394bf316e183e67\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n>>> Performing hash slots allocation on 6 nodes...\nMaster[0] -> Slots 0 - 5460\nMaster[1] -> Slots 5461 - 10922\nMaster[2] -> Slots 10923 - 16383\nAdding replica 192.168.10.92:6379 to 192.168.10.71:6379\nAdding replica 192.168.10.93:6379 to 192.168.10.72:6379\nAdding replica 192.168.10.91:6379 to 192.168.10.73:6379\nM: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379\n   slots:[0-5460] (5461 slots) master\nM: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379\n   slots:[5461-10922] (5462 slots) master\nM: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379\n   slots:[10923-16383] (5461 slots) master\nS: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379\n   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb\nS: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379\n   replicates ab5b9040aa84704aa44e977b410ecd9f86227987\nS: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379\n   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb\nCan I set the above configuration? (type 'yes' to accept): yes\n>>> Nodes configuration updated\n>>> Assign a different config epoch to each node\n>>> Sending CLUSTER MEET messages to join the cluster\nWaiting for the cluster to join\n.....\n>>> Performing Cluster Check (using node 192.168.10.71:6379)\nM: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379\n   slots:[0-5460] (5461 slots) master\n   1 additional replica(s)\nS: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379\n   slots: (0 slots) slave\n   replicates ab5b9040aa84704aa44e977b410ecd9f86227987\nM: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379\n   slots:[5461-10922] (5462 slots) master\n   1 additional replica(s)\nS: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379\n   slots: (0 slots) slave\n   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb\nM: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379\n   slots:[10923-16383] (5461 slots) master\n   1 additional replica(s)\nS: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379\n   slots: (0 slots) slave\n   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb\n[OK] All nodes agree about slots configuration.\n>>> Check for open slots...\n>>> Check slots coverage...\n[OK] All 16384 slots covered.\n```\n\n\n\n### 查看节点\n\n```\n[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 -c\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n192.168.10.71:6379> cluster info\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:1\ncluster_stats_messages_sent:1753\ncluster_stats_messages_received:1753\n\n192.168.10.71:6379> cluster nodes\n781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379 slave ab5b9040aa84704aa44e977b410ecd9f86227987 0 1686623763541 5 connected\nd9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379 master - 0 1686623765546 2 connected 5461-10922\n00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379 slave cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 0 1686623759523 4 connected\ncf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379 master - 0 1686623760526 3 connected 10923-16383\nab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379 myself,master - 0 0 1 connected 0-5460\nc53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379 slave d9a7b832cb43346df9406b640dc1590cbce35dbb 0 1686623764546 6 connected\n192.168.10.71:6379> exit\n\n```\n\n","slug":"07中间件/7.3.Redis集群环境部署","published":1,"date":"2023-09-01T13:06:37.580Z","updated":"2024-07-20T06:15:16.364Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqql000cj38aa108cl9g","content":"<h2 id=\"Redis集群环境部署\">Redis集群环境部署</h2>\n<h3 id=\"集群连接\">集群连接</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群-测试库</span><br><span class=\"line\">Redis连接：</span><br><span class=\"line\">192.168.10.71:6379</span><br><span class=\"line\">192.168.10.72:6379</span><br><span class=\"line\">192.168.10.73:6379</span><br><span class=\"line\">192.168.10.91:6379</span><br><span class=\"line\">192.168.10.92:6379</span><br><span class=\"line\">192.168.10.93:6379</span><br><span class=\"line\"></span><br><span class=\"line\">Redis密码：</span><br><span class=\"line\">86a1b907d54bf7010394bf316e183e67</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis\">安装redis</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\">yum install redis -y</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart redis</span><br><span class=\"line\">systemctl enable redis</span><br><span class=\"line\">systemctl status redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --add-port=6379/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=6380/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=16379/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\">修改配置文件</h3>\n<p>路径：<code>/etc/redis.conf</code>，每个节点都需修改，bind ip以实际为准。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 192.168.10.71</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">masterauth &#x27;86a1b907d54bf7010394bf316e183e67&#x27;</span><br><span class=\"line\">requirepass &#x27;86a1b907d54bf7010394bf316e183e67&#x27;</span><br></pre></td></tr></table></figure>\n<p>systemctl restart redis</p>\n<h3 id=\"配置集群\">配置集群</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">ab5b9040aa84704aa44e977b410ecd9f86227987 :6379 myself,master - 0 0 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli --cluster create 192.168.10.71:6379 192.168.10.72:6379 192.168.10.73:6379 192.168.10.91:6379 192.168.10.92:6379 192.168.10.93:6379 --cluster-replicas 1 -a 86a1b907d54bf7010394bf316e183e67</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460</span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922</span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383</span><br><span class=\"line\">Adding replica 192.168.10.92:6379 to 192.168.10.71:6379</span><br><span class=\"line\">Adding replica 192.168.10.93:6379 to 192.168.10.72:6379</span><br><span class=\"line\">Adding replica 192.168.10.91:6379 to 192.168.10.73:6379</span><br><span class=\"line\">M: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">M: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">M: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">S: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379</span><br><span class=\"line\">   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb</span><br><span class=\"line\">S: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379</span><br><span class=\"line\">   replicates ab5b9040aa84704aa44e977b410ecd9f86227987</span><br><span class=\"line\">S: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379</span><br><span class=\"line\">   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb</span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class=\"line\">&gt;&gt;&gt; Nodes configuration updated</span><br><span class=\"line\">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class=\"line\">Waiting for the cluster to join</span><br><span class=\"line\">.....</span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.10.71:6379)</span><br><span class=\"line\">M: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates ab5b9040aa84704aa44e977b410ecd9f86227987</span><br><span class=\"line\">M: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb</span><br><span class=\"line\">M: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check for open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看节点\">查看节点</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 -c</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">192.168.10.71:6379&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:1</span><br><span class=\"line\">cluster_stats_messages_sent:1753</span><br><span class=\"line\">cluster_stats_messages_received:1753</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.10.71:6379&gt; cluster nodes</span><br><span class=\"line\">781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379 slave ab5b9040aa84704aa44e977b410ecd9f86227987 0 1686623763541 5 connected</span><br><span class=\"line\">d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379 master - 0 1686623765546 2 connected 5461-10922</span><br><span class=\"line\">00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379 slave cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 0 1686623759523 4 connected</span><br><span class=\"line\">cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379 master - 0 1686623760526 3 connected 10923-16383</span><br><span class=\"line\">ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379 myself,master - 0 0 1 connected 0-5460</span><br><span class=\"line\">c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379 slave d9a7b832cb43346df9406b640dc1590cbce35dbb 0 1686623764546 6 connected</span><br><span class=\"line\">192.168.10.71:6379&gt; exit</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Redis集群环境部署\">Redis集群环境部署</h2>\n<h3 id=\"集群连接\">集群连接</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群-测试库</span><br><span class=\"line\">Redis连接：</span><br><span class=\"line\">192.168.10.71:6379</span><br><span class=\"line\">192.168.10.72:6379</span><br><span class=\"line\">192.168.10.73:6379</span><br><span class=\"line\">192.168.10.91:6379</span><br><span class=\"line\">192.168.10.92:6379</span><br><span class=\"line\">192.168.10.93:6379</span><br><span class=\"line\"></span><br><span class=\"line\">Redis密码：</span><br><span class=\"line\">86a1b907d54bf7010394bf316e183e67</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis\">安装redis</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\">yum install redis -y</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart redis</span><br><span class=\"line\">systemctl enable redis</span><br><span class=\"line\">systemctl status redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --add-port=6379/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=6380/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=16379/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改配置文件\">修改配置文件</h3>\n<p>路径：<code>/etc/redis.conf</code>，每个节点都需修改，bind ip以实际为准。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind 192.168.10.71</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">masterauth &#x27;86a1b907d54bf7010394bf316e183e67&#x27;</span><br><span class=\"line\">requirepass &#x27;86a1b907d54bf7010394bf316e183e67&#x27;</span><br></pre></td></tr></table></figure>\n<p>systemctl restart redis</p>\n<h3 id=\"配置集群\">配置集群</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 cluster nodes</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">ab5b9040aa84704aa44e977b410ecd9f86227987 :6379 myself,master - 0 0 0 connected</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli --cluster create 192.168.10.71:6379 192.168.10.72:6379 192.168.10.73:6379 192.168.10.91:6379 192.168.10.92:6379 192.168.10.93:6379 --cluster-replicas 1 -a 86a1b907d54bf7010394bf316e183e67</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460</span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922</span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383</span><br><span class=\"line\">Adding replica 192.168.10.92:6379 to 192.168.10.71:6379</span><br><span class=\"line\">Adding replica 192.168.10.93:6379 to 192.168.10.72:6379</span><br><span class=\"line\">Adding replica 192.168.10.91:6379 to 192.168.10.73:6379</span><br><span class=\"line\">M: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">M: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">M: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">S: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379</span><br><span class=\"line\">   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb</span><br><span class=\"line\">S: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379</span><br><span class=\"line\">   replicates ab5b9040aa84704aa44e977b410ecd9f86227987</span><br><span class=\"line\">S: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379</span><br><span class=\"line\">   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb</span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class=\"line\">&gt;&gt;&gt; Nodes configuration updated</span><br><span class=\"line\">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class=\"line\">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class=\"line\">Waiting for the cluster to join</span><br><span class=\"line\">.....</span><br><span class=\"line\">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.10.71:6379)</span><br><span class=\"line\">M: ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379</span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates ab5b9040aa84704aa44e977b410ecd9f86227987</span><br><span class=\"line\">M: d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379</span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: 00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb</span><br><span class=\"line\">M: cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379</span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master</span><br><span class=\"line\">   1 additional replica(s)</span><br><span class=\"line\">S: c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379</span><br><span class=\"line\">   slots: (0 slots) slave</span><br><span class=\"line\">   replicates d9a7b832cb43346df9406b640dc1590cbce35dbb</span><br><span class=\"line\">[OK] All nodes agree about slots configuration.</span><br><span class=\"line\">&gt;&gt;&gt; Check for open slots...</span><br><span class=\"line\">&gt;&gt;&gt; Check slots coverage...</span><br><span class=\"line\">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看节点\">查看节点</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 mysqld_exporter]# redis-cli -h 192.168.10.71 -p 6379 -a 86a1b907d54bf7010394bf316e183e67 -c</span><br><span class=\"line\">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class=\"line\">192.168.10.71:6379&gt; cluster info</span><br><span class=\"line\">cluster_state:ok</span><br><span class=\"line\">cluster_slots_assigned:16384</span><br><span class=\"line\">cluster_slots_ok:16384</span><br><span class=\"line\">cluster_slots_pfail:0</span><br><span class=\"line\">cluster_slots_fail:0</span><br><span class=\"line\">cluster_known_nodes:6</span><br><span class=\"line\">cluster_size:3</span><br><span class=\"line\">cluster_current_epoch:6</span><br><span class=\"line\">cluster_my_epoch:1</span><br><span class=\"line\">cluster_stats_messages_sent:1753</span><br><span class=\"line\">cluster_stats_messages_received:1753</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.10.71:6379&gt; cluster nodes</span><br><span class=\"line\">781262f783c114a27b12db5fb563ea4a2e74d4e2 192.168.10.92:6379 slave ab5b9040aa84704aa44e977b410ecd9f86227987 0 1686623763541 5 connected</span><br><span class=\"line\">d9a7b832cb43346df9406b640dc1590cbce35dbb 192.168.10.72:6379 master - 0 1686623765546 2 connected 5461-10922</span><br><span class=\"line\">00d82af292410901b8afda616188c5d706cf7aa1 192.168.10.91:6379 slave cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 0 1686623759523 4 connected</span><br><span class=\"line\">cf991d4a6fb1ed70764fa9d46c25b3f07e070bdb 192.168.10.73:6379 master - 0 1686623760526 3 connected 10923-16383</span><br><span class=\"line\">ab5b9040aa84704aa44e977b410ecd9f86227987 192.168.10.71:6379 myself,master - 0 0 1 connected 0-5460</span><br><span class=\"line\">c53e8ac7858b8892f6e8aafc7d4334ef3f451f94 192.168.10.93:6379 slave d9a7b832cb43346df9406b640dc1590cbce35dbb 0 1686623764546 6 connected</span><br><span class=\"line\">192.168.10.71:6379&gt; exit</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"author":"空空","_content":"\n## 一、Ansible安装\n\n### 1. yum源安装\n\n基于centos7.9和默认Python2.7安装。\n\n```shell\nyum install -y http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\n```\n\n### 2. 验证ansible安装结果\n\n查看版本\n\n```shell\n[root@localhost ansible]# ansible --version\nansible 2.9.27\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/site-packages/ansible\n  executable location = /usr/bin/ansible\n  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n查看/etc/ansible/路径下配置文件\n\n```shell\n[root@localhost ansible]# ll /etc/ansible/\ntotal 28\n-rw-r--r--. 1 root root 19983 May 23 04:53 ansible.cfg\n-rw-r--r--. 1 root root  1219 May 23 04:32 hosts\ndrwxr-xr-x. 2 root root     6 Jan 15  2022 roles\n```\n\n### 3. 编辑host文件\n\n在`/etc/ansible/hosts`文件里面，添加三台测试机器的用户信息。\n\n当然，此方式不安全，大家都知道。更安全的是配置私钥连接或者将密码加密。\n\n```shell\n[kubernetes]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***'\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***'\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***'\n```\n\n### 4. 编辑playbook sample\n\n在`/etc/ansible/`路径下添加`test.yml`文件如下，`hosts: kubernetes`表示对应的[3. 编辑host文件]谈到的服务器组。tasks则是执行任务，name遵守开发命名规范即可。\n\n命令含义：将字符串`kongkong`输出到`/etc/kongkong.txt`文件中\n\n```shell\n- hosts: kubernetes\n  gather_facts: No\n  tasks:\n  - name: echo test data to file\n    shell: echo kongkong >> /etc/kongkong.txt\n```\n\n### 5. 执行测试\n\n查看执行结果`ok=1    changed=1`表示执行成功，update1个。\n\n```shell\n[root@localhost ansible]# ansible-playbook test.yml\n\nPLAY [kubernetes] ****************************************************************************************************\n\nTASK [find file] *****************************************************************************************************\nchanged: [192.168.132.131]\nchanged: [192.168.132.130]\nchanged: [192.168.132.129]\n\nPLAY RECAP ***********************************************************************************************************\n192.168.132.129            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n192.168.132.130            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n192.168.132.131            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```\n\n### 6. 验证测试结果\n\n到192.168.132.[129-130]任意一台机器，查看如下结果，表示成功。\n\n```shell\n[root@localhost ~]# cat /etc/kongkong.txt\nkongkong\n```\n\n## 二、Ansible配置\n### 1. 主机分组\n\n- hosts文件\n\n```shell\n#密码设置\n[master]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=1\n\n[node1]\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=2\n\n[node2]\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=3\n\n#分组设置\n[kubernetes:children]\nmaster\nnode1\nnode2\n```\n\n### 2.测试分发文件到所有主机\n\n```\nansible all -m copy -a \"src=/etc/hosts dest=/tmp\"\n```\n\n\n### 3.通过ansible批量更新hostname\n配置HOST，默认配置在`inventory = /etc/ansible/hosts`\n```bash\n[local-node001]\n192.168.139.11 hostname=local-node001 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node002]\n192.168.139.12 hostname=local-node002 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node003]\n192.168.139.13 hostname=local-node003 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node004]\n192.168.139.14 hostname=local-node004 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node005]\n192.168.139.15 hostname=local-node005 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node006]\n192.168.139.16 hostname=local-node006 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node007]\n192.168.139.17 hostname=local-node007 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node008]\n192.168.139.18 hostname=local-node008 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[localcluser:children]\nlocal-node001\nlocal-node002\nlocal-node003\nlocal-node004\nlocal-node005\nlocal-node006\nlocal-node007\nlocal-node008\n```\n\n- 编辑和执行主机命名脚本\n创建文件：`set_hostname.yaml`\n```bash\n- hosts: localcluser\n  become: yes\n  become_user: root\n  become_method: sudo\n  tasks:\n  - name: set hostname\n    shell: hostnamectl set-hostname {{hostname}}\n\n# 执行\nansible-playbook set_hostname.yaml\n[WARNING]: Invalid characters were found in group names but not replaced, use -vvvv to see details\nPLAY [localcluser] *****************\nTASK [Gathering Facts] *************\nok: [192.168.10.182]\nok: [192.168.10.183]\nok: [192.168.10.185]\nTASK [set hostname] ****************\nchanged: [192.168.10.182]\nchanged: [192.168.10.183]\nchanged: [192.168.10.181]\nPLAY RECAP *************************\n192.168.10.181 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```\n\n","source":"_posts/08自动化工具/8.1.Ansible安装配置.md","raw":"---\nauthor: 空空\n---\n\n## 一、Ansible安装\n\n### 1. yum源安装\n\n基于centos7.9和默认Python2.7安装。\n\n```shell\nyum install -y http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\n```\n\n### 2. 验证ansible安装结果\n\n查看版本\n\n```shell\n[root@localhost ansible]# ansible --version\nansible 2.9.27\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/site-packages/ansible\n  executable location = /usr/bin/ansible\n  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n查看/etc/ansible/路径下配置文件\n\n```shell\n[root@localhost ansible]# ll /etc/ansible/\ntotal 28\n-rw-r--r--. 1 root root 19983 May 23 04:53 ansible.cfg\n-rw-r--r--. 1 root root  1219 May 23 04:32 hosts\ndrwxr-xr-x. 2 root root     6 Jan 15  2022 roles\n```\n\n### 3. 编辑host文件\n\n在`/etc/ansible/hosts`文件里面，添加三台测试机器的用户信息。\n\n当然，此方式不安全，大家都知道。更安全的是配置私钥连接或者将密码加密。\n\n```shell\n[kubernetes]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***'\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***'\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***'\n```\n\n### 4. 编辑playbook sample\n\n在`/etc/ansible/`路径下添加`test.yml`文件如下，`hosts: kubernetes`表示对应的[3. 编辑host文件]谈到的服务器组。tasks则是执行任务，name遵守开发命名规范即可。\n\n命令含义：将字符串`kongkong`输出到`/etc/kongkong.txt`文件中\n\n```shell\n- hosts: kubernetes\n  gather_facts: No\n  tasks:\n  - name: echo test data to file\n    shell: echo kongkong >> /etc/kongkong.txt\n```\n\n### 5. 执行测试\n\n查看执行结果`ok=1    changed=1`表示执行成功，update1个。\n\n```shell\n[root@localhost ansible]# ansible-playbook test.yml\n\nPLAY [kubernetes] ****************************************************************************************************\n\nTASK [find file] *****************************************************************************************************\nchanged: [192.168.132.131]\nchanged: [192.168.132.130]\nchanged: [192.168.132.129]\n\nPLAY RECAP ***********************************************************************************************************\n192.168.132.129            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n192.168.132.130            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n192.168.132.131            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```\n\n### 6. 验证测试结果\n\n到192.168.132.[129-130]任意一台机器，查看如下结果，表示成功。\n\n```shell\n[root@localhost ~]# cat /etc/kongkong.txt\nkongkong\n```\n\n## 二、Ansible配置\n### 1. 主机分组\n\n- hosts文件\n\n```shell\n#密码设置\n[master]\n192.168.132.129 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=1\n\n[node1]\n192.168.132.130 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=2\n\n[node2]\n192.168.132.131 ansible_ssh_user=root ansible_ssh_pass='***' zk_myid=3\n\n#分组设置\n[kubernetes:children]\nmaster\nnode1\nnode2\n```\n\n### 2.测试分发文件到所有主机\n\n```\nansible all -m copy -a \"src=/etc/hosts dest=/tmp\"\n```\n\n\n### 3.通过ansible批量更新hostname\n配置HOST，默认配置在`inventory = /etc/ansible/hosts`\n```bash\n[local-node001]\n192.168.139.11 hostname=local-node001 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node002]\n192.168.139.12 hostname=local-node002 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node003]\n192.168.139.13 hostname=local-node003 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node004]\n192.168.139.14 hostname=local-node004 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node005]\n192.168.139.15 hostname=local-node005 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node006]\n192.168.139.16 hostname=local-node006 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node007]\n192.168.139.17 hostname=local-node007 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[local-node008]\n192.168.139.18 hostname=local-node008 ansible_ssh_user=dahouzi ansible_ssh_pass='dahouzi' ansible_become_pass=\"dahouzi\"\n[localcluser:children]\nlocal-node001\nlocal-node002\nlocal-node003\nlocal-node004\nlocal-node005\nlocal-node006\nlocal-node007\nlocal-node008\n```\n\n- 编辑和执行主机命名脚本\n创建文件：`set_hostname.yaml`\n```bash\n- hosts: localcluser\n  become: yes\n  become_user: root\n  become_method: sudo\n  tasks:\n  - name: set hostname\n    shell: hostnamectl set-hostname {{hostname}}\n\n# 执行\nansible-playbook set_hostname.yaml\n[WARNING]: Invalid characters were found in group names but not replaced, use -vvvv to see details\nPLAY [localcluser] *****************\nTASK [Gathering Facts] *************\nok: [192.168.10.182]\nok: [192.168.10.183]\nok: [192.168.10.185]\nTASK [set hostname] ****************\nchanged: [192.168.10.182]\nchanged: [192.168.10.183]\nchanged: [192.168.10.181]\nPLAY RECAP *************************\n192.168.10.181 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```\n\n","slug":"08自动化工具/8.1.Ansible安装配置","published":1,"date":"2024-07-18T05:45:45.202Z","updated":"2024-07-20T07:34:22.563Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqm000dj38a9mm418z7","content":"<h2 id=\"一、Ansible安装\">一、Ansible安装</h2>\n<h3 id=\"1-yum源安装\">1. yum源安装</h3>\n<p>基于centos7.9和默认Python2.7安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-验证ansible安装结果\">2. 验证ansible安装结果</h3>\n<p>查看版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ansible --version</span><br><span class=\"line\">ansible 2.9.27</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span><br></pre></td></tr></table></figure>\n<p>查看/etc/ansible/路径下配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ll /etc/ansible/</span><br><span class=\"line\">total 28</span><br><span class=\"line\">-rw-r--r--. 1 root root 19983 May 23 04:53 ansible.cfg</span><br><span class=\"line\">-rw-r--r--. 1 root root  1219 May 23 04:32 hosts</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 Jan 15  2022 roles</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-编辑host文件\">3. 编辑host文件</h3>\n<p>在<code>/etc/ansible/hosts</code>文件里面，添加三台测试机器的用户信息。</p>\n<p>当然，此方式不安全，大家都知道。更安全的是配置私钥连接或者将密码加密。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kubernetes]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-编辑playbook-sample\">4. 编辑playbook sample</h3>\n<p>在<code>/etc/ansible/</code>路径下添加<code>test.yml</code>文件如下，<code>hosts: kubernetes</code>表示对应的[3. 编辑host文件]谈到的服务器组。tasks则是执行任务，name遵守开发命名规范即可。</p>\n<p>命令含义：将字符串<code>kongkong</code>输出到<code>/etc/kongkong.txt</code>文件中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: kubernetes</span><br><span class=\"line\">  gather_facts: No</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: echo test data to file</span><br><span class=\"line\">    shell: echo kongkong &gt;&gt; /etc/kongkong.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-执行测试\">5. 执行测试</h3>\n<p>查看执行结果<code>ok=1    changed=1</code>表示执行成功，update1个。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ansible-playbook test.yml</span><br><span class=\"line\"></span><br><span class=\"line\">PLAY [kubernetes] ****************************************************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [find file] *****************************************************************************************************</span><br><span class=\"line\">changed: [192.168.132.131]</span><br><span class=\"line\">changed: [192.168.132.130]</span><br><span class=\"line\">changed: [192.168.132.129]</span><br><span class=\"line\"></span><br><span class=\"line\">PLAY RECAP ***********************************************************************************************************</span><br><span class=\"line\">192.168.132.129            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class=\"line\">192.168.132.130            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class=\"line\">192.168.132.131            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-验证测试结果\">6. 验证测试结果</h3>\n<p>到192.168.132.[129-130]任意一台机器，查看如下结果，表示成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/kongkong.txt</span><br><span class=\"line\">kongkong</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、Ansible配置\">二、Ansible配置</h2>\n<h3 id=\"1-主机分组\">1. 主机分组</h3>\n<ul>\n<li>hosts文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">密码设置</span></span><br><span class=\"line\">[master]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=1</span><br><span class=\"line\"></span><br><span class=\"line\">[node1]</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=2</span><br><span class=\"line\"></span><br><span class=\"line\">[node2]</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">分组设置</span></span><br><span class=\"line\">[kubernetes:children]</span><br><span class=\"line\">master</span><br><span class=\"line\">node1</span><br><span class=\"line\">node2</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-测试分发文件到所有主机\">2.测试分发文件到所有主机</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过ansible批量更新hostname\">3.通过ansible批量更新hostname</h3>\n<p>配置HOST，默认配置在<code>inventory = /etc/ansible/hosts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[local-node001]</span><br><span class=\"line\">192.168.139.11 hostname=local-node001 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node002]</span><br><span class=\"line\">192.168.139.12 hostname=local-node002 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node003]</span><br><span class=\"line\">192.168.139.13 hostname=local-node003 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node004]</span><br><span class=\"line\">192.168.139.14 hostname=local-node004 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node005]</span><br><span class=\"line\">192.168.139.15 hostname=local-node005 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node006]</span><br><span class=\"line\">192.168.139.16 hostname=local-node006 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node007]</span><br><span class=\"line\">192.168.139.17 hostname=local-node007 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node008]</span><br><span class=\"line\">192.168.139.18 hostname=local-node008 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[localcluser:children]</span><br><span class=\"line\">local-node001</span><br><span class=\"line\">local-node002</span><br><span class=\"line\">local-node003</span><br><span class=\"line\">local-node004</span><br><span class=\"line\">local-node005</span><br><span class=\"line\">local-node006</span><br><span class=\"line\">local-node007</span><br><span class=\"line\">local-node008</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑和执行主机命名脚本<br>\n创建文件：<code>set_hostname.yaml</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: localcluser</span><br><span class=\"line\">  become: <span class=\"built_in\">yes</span></span><br><span class=\"line\">  become_user: root</span><br><span class=\"line\">  become_method: <span class=\"built_in\">sudo</span></span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: <span class=\"built_in\">set</span> hostname</span><br><span class=\"line\">    shell: hostnamectl set-hostname &#123;&#123;hostname&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行</span></span><br><span class=\"line\">ansible-playbook set_hostname.yaml</span><br><span class=\"line\">[WARNING]: Invalid characters were found <span class=\"keyword\">in</span> group names but not replaced, use -vvvv to see details</span><br><span class=\"line\">PLAY [localcluser] *****************</span><br><span class=\"line\">TASK [Gathering Facts] *************</span><br><span class=\"line\">ok: [192.168.10.182]</span><br><span class=\"line\">ok: [192.168.10.183]</span><br><span class=\"line\">ok: [192.168.10.185]</span><br><span class=\"line\">TASK [<span class=\"built_in\">set</span> hostname] ****************</span><br><span class=\"line\">changed: [192.168.10.182]</span><br><span class=\"line\">changed: [192.168.10.183]</span><br><span class=\"line\">changed: [192.168.10.181]</span><br><span class=\"line\">PLAY RECAP *************************</span><br><span class=\"line\">192.168.10.181 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"一、Ansible安装\">一、Ansible安装</h2>\n<h3 id=\"1-yum源安装\">1. yum源安装</h3>\n<p>基于centos7.9和默认Python2.7安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-验证ansible安装结果\">2. 验证ansible安装结果</h3>\n<p>查看版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ansible --version</span><br><span class=\"line\">ansible 2.9.27</span><br><span class=\"line\">  config file = /etc/ansible/ansible.cfg</span><br><span class=\"line\">  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class=\"line\">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class=\"line\">  executable location = /usr/bin/ansible</span><br><span class=\"line\">  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span><br></pre></td></tr></table></figure>\n<p>查看/etc/ansible/路径下配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ll /etc/ansible/</span><br><span class=\"line\">total 28</span><br><span class=\"line\">-rw-r--r--. 1 root root 19983 May 23 04:53 ansible.cfg</span><br><span class=\"line\">-rw-r--r--. 1 root root  1219 May 23 04:32 hosts</span><br><span class=\"line\">drwxr-xr-x. 2 root root     6 Jan 15  2022 roles</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-编辑host文件\">3. 编辑host文件</h3>\n<p>在<code>/etc/ansible/hosts</code>文件里面，添加三台测试机器的用户信息。</p>\n<p>当然，此方式不安全，大家都知道。更安全的是配置私钥连接或者将密码加密。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kubernetes]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-编辑playbook-sample\">4. 编辑playbook sample</h3>\n<p>在<code>/etc/ansible/</code>路径下添加<code>test.yml</code>文件如下，<code>hosts: kubernetes</code>表示对应的[3. 编辑host文件]谈到的服务器组。tasks则是执行任务，name遵守开发命名规范即可。</p>\n<p>命令含义：将字符串<code>kongkong</code>输出到<code>/etc/kongkong.txt</code>文件中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: kubernetes</span><br><span class=\"line\">  gather_facts: No</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: echo test data to file</span><br><span class=\"line\">    shell: echo kongkong &gt;&gt; /etc/kongkong.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-执行测试\">5. 执行测试</h3>\n<p>查看执行结果<code>ok=1    changed=1</code>表示执行成功，update1个。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ansible]# ansible-playbook test.yml</span><br><span class=\"line\"></span><br><span class=\"line\">PLAY [kubernetes] ****************************************************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [find file] *****************************************************************************************************</span><br><span class=\"line\">changed: [192.168.132.131]</span><br><span class=\"line\">changed: [192.168.132.130]</span><br><span class=\"line\">changed: [192.168.132.129]</span><br><span class=\"line\"></span><br><span class=\"line\">PLAY RECAP ***********************************************************************************************************</span><br><span class=\"line\">192.168.132.129            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class=\"line\">192.168.132.130            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class=\"line\">192.168.132.131            : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-验证测试结果\">6. 验证测试结果</h3>\n<p>到192.168.132.[129-130]任意一台机器，查看如下结果，表示成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/kongkong.txt</span><br><span class=\"line\">kongkong</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、Ansible配置\">二、Ansible配置</h2>\n<h3 id=\"1-主机分组\">1. 主机分组</h3>\n<ul>\n<li>hosts文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">密码设置</span></span><br><span class=\"line\">[master]</span><br><span class=\"line\">192.168.132.129 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=1</span><br><span class=\"line\"></span><br><span class=\"line\">[node1]</span><br><span class=\"line\">192.168.132.130 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=2</span><br><span class=\"line\"></span><br><span class=\"line\">[node2]</span><br><span class=\"line\">192.168.132.131 ansible_ssh_user=root ansible_ssh_pass=&#x27;***&#x27; zk_myid=3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">分组设置</span></span><br><span class=\"line\">[kubernetes:children]</span><br><span class=\"line\">master</span><br><span class=\"line\">node1</span><br><span class=\"line\">node2</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-测试分发文件到所有主机\">2.测试分发文件到所有主机</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过ansible批量更新hostname\">3.通过ansible批量更新hostname</h3>\n<p>配置HOST，默认配置在<code>inventory = /etc/ansible/hosts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[local-node001]</span><br><span class=\"line\">192.168.139.11 hostname=local-node001 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node002]</span><br><span class=\"line\">192.168.139.12 hostname=local-node002 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node003]</span><br><span class=\"line\">192.168.139.13 hostname=local-node003 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node004]</span><br><span class=\"line\">192.168.139.14 hostname=local-node004 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node005]</span><br><span class=\"line\">192.168.139.15 hostname=local-node005 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node006]</span><br><span class=\"line\">192.168.139.16 hostname=local-node006 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node007]</span><br><span class=\"line\">192.168.139.17 hostname=local-node007 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[local-node008]</span><br><span class=\"line\">192.168.139.18 hostname=local-node008 ansible_ssh_user=dahouzi ansible_ssh_pass=<span class=\"string\">&#x27;dahouzi&#x27;</span> ansible_become_pass=<span class=\"string\">&quot;dahouzi&quot;</span></span><br><span class=\"line\">[localcluser:children]</span><br><span class=\"line\">local-node001</span><br><span class=\"line\">local-node002</span><br><span class=\"line\">local-node003</span><br><span class=\"line\">local-node004</span><br><span class=\"line\">local-node005</span><br><span class=\"line\">local-node006</span><br><span class=\"line\">local-node007</span><br><span class=\"line\">local-node008</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑和执行主机命名脚本<br>\n创建文件：<code>set_hostname.yaml</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: localcluser</span><br><span class=\"line\">  become: <span class=\"built_in\">yes</span></span><br><span class=\"line\">  become_user: root</span><br><span class=\"line\">  become_method: <span class=\"built_in\">sudo</span></span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: <span class=\"built_in\">set</span> hostname</span><br><span class=\"line\">    shell: hostnamectl set-hostname &#123;&#123;hostname&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行</span></span><br><span class=\"line\">ansible-playbook set_hostname.yaml</span><br><span class=\"line\">[WARNING]: Invalid characters were found <span class=\"keyword\">in</span> group names but not replaced, use -vvvv to see details</span><br><span class=\"line\">PLAY [localcluser] *****************</span><br><span class=\"line\">TASK [Gathering Facts] *************</span><br><span class=\"line\">ok: [192.168.10.182]</span><br><span class=\"line\">ok: [192.168.10.183]</span><br><span class=\"line\">ok: [192.168.10.185]</span><br><span class=\"line\">TASK [<span class=\"built_in\">set</span> hostname] ****************</span><br><span class=\"line\">changed: [192.168.10.182]</span><br><span class=\"line\">changed: [192.168.10.183]</span><br><span class=\"line\">changed: [192.168.10.181]</span><br><span class=\"line\">PLAY RECAP *************************</span><br><span class=\"line\">192.168.10.181 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure>\n"},{"_content":"\n## 1.环境准备\n\n\n````shell\nmkdir -p /docker_data/kafka/{config,data,plugins,logs}\n\ndocker stop prod_kafka_cluster_01 && docker rm prod_kafka_cluster_01\ndocker logs prod_kafka_cluster_02\n```\n\n## 2.配置准备\n需修改三处：name，KAFKA_BROKER_ID，KAFKA_ADVERTISED_LISTENERS\n\n```bash\ndocker run --name prod_kafka_cluster_01 \\\n-e KAFKA_BROKER_ID=1 \\\n-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.181:9092 \\\n-e KAFKA_ZOOKEEPER_CONNECT=192.168.10.181:2181,192.168.10.182:2181,192.168.10.183:2181,192.168.10.184:2181,192.168.10.185:2181,192.168.10.186:2181 \\\n-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\n-e KAFKA_HEAP_OPTS=\"-Xmx1024m -Xms1024m\" \\\n-e TZ='Asia/Shanghai' \\\n-e LANG=\"en_US.UTF-8\" \\\n-v /docker_data/kafka:/kafka \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /etc/localtime:/etc/localtime \\\n--network=host --privileged=true --restart=always \\\n-d wurstmeister/kafka:2.13-2.8.1\n\n\nprod_cluster_kafka_01_1  | [Configuring] 'default.replication.factor' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'advertised.listeners' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'port' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | Excluding KAFKA_HOME from broker config\nprod_cluster_kafka_01_1  | [Configuring] 'log.dirs' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'listeners' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | Excluding KAFKA_VERSION from broker config\nprod_cluster_kafka_01_1  | [Configuring] 'zookeeper.connect' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'broker.id' in '/opt/kafka/config/server.properties'\n```\n\n\n## 3.配置优化\n\n```shell\n#JVM参数\n-Xmx6g -Xms6g -XX:MetaspaceSize=96m -XX:+UseG1GC\n-XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M\n-XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -XX:+ExplicitGCInvokesConcurrent\n# ----------------------------------------------------------\n#                        Kafka配置\n# 1、两个副本\n# 2、日志，消息保留14天\n# ----------------------------------------------------------\n\n# 单独配置端口\nport=19092\n\n#在服务器上启用主题的自动创建\nauto.create.topics.enable=true\n#默认创建topic的副本数\ndefault.replication.factor=2\n# 表示消息至少要被写入副本数才算是“已提交”,设置1<min.insync.replicas<default.replication.factor的值\nmin.insync.replicas=1\n# follower拉取leader副本消息的线程数\nnum.replica.fetchers=16\n# borker处理磁盘io的线程数\nnum.io.threads=16\n\n# broker的负载均衡（可以开启），因为数据量不大\nauto.leader.rebalance.enable=true\n# log数据留存时间2周\nlog.retention.hours=336\n# 当producer写入10000条消息时，刷数据到磁盘\nlog.flush.interval.messages=10000\n# 每隔1s刷数据到磁盘\nlog.flush.interval.ms=1000\n# 日志文件大小2G\nlog.segment.bytes = 2147483647\n# 200m，防止oom\nsocket.request.max.bytes=2147483600\n\n\n# topic消息保存时长，此处设14天\nretention.ms=1209600000\n# topic消息总磁盘空间，默认值：1073741824byte即1GB,此处设8G\nretention.bytes=8589934592\n```\n\n## 4.压力测试\n\n\n```bash\n#测试\n\ndocker exec -it prod_loganalysis_kafka_03 /bin/bash\ncd /opt/kafka_2.13-2.8.1/bin\n\n\n#生产消息，总数2000W，吞吐量20000，每条消息1000字节\n./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092\n\n#消费消息，16线程，2000W消息，1MB一次请求\n./kafka-consumer-perf-test.sh --broker-list 192.168.10.182:9092 --topic test_of_kongkong --fetch-size 1048576 --messages 20000000 --threads 16 --reporting-interval 2000 --timeout 10000\n\n```\n\n## 5.测试记录\n\n```bash\nbash-5.1# ./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092\n99962 records sent, 19984.4 records/sec (19.06 MB/sec), 82.5 ms avg latency, 452.0 ms max latency.\n100080 records sent, 20016.0 records/sec (19.09 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.\n99980 records sent, 19992.0 records/sec (19.07 MB/sec), 2.0 ms avg latency, 12.0 ms max latency.\n100060 records sent, 20012.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.\n100012 records sent, 20002.4 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.\n100004 records sent, 19996.8 records/sec (19.07 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.\n100020 records sent, 20004.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 9.0 ms max latency.\n99964 records sent, 19992.8 records/sec (19.07 MB/sec), 45.6 ms avg latency, 222.0 ms max latency.\n100036 records sent, 20003.2 records/sec (19.08 MB/sec), 2.0 ms avg latency, 10.0 ms max latency.\n100056 records sent, 20011.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 11.0 ms max latency.\n99968 records sent, 19989.6 records/sec (19.06 MB/sec), 3.0 ms avg latency, 37.0 ms max latency.\n100036 records sent, 20007.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.\n99936 records sent, 19983.2 records/sec (19.06 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n100108 records sent, 20017.6 records/sec (19.09 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n99972 records sent, 19994.4 records/sec (19.07 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n100044 records sent, 20000.8 records/sec (19.07 MB/sec), 2.1 ms avg latency, 13.0 ms max latency.\n100040 records sent, 20008.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 13.0 ms max latency.\n100000 records sent, 19996.0 records/sec (19.07 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.\n\n\n\nstart.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec\n2023-07-04 11:11:44:634, 2023-07-04 11:13:59:020, 19073.4863, 141.9306, 20000000, 148825.0264, 421, 133965, 142.3766, 149292.7257\n\n\n```\n\n\n\n\n\n### 参考文档\n参考：https://zhuanlan.zhihu.com/p/137720038\n官网：https://kafka.apache.org/documentation/#java\n\n","source":"_posts/07中间件/7.5.Kafka集群容器部署.md","raw":"\n## 1.环境准备\n\n\n````shell\nmkdir -p /docker_data/kafka/{config,data,plugins,logs}\n\ndocker stop prod_kafka_cluster_01 && docker rm prod_kafka_cluster_01\ndocker logs prod_kafka_cluster_02\n```\n\n## 2.配置准备\n需修改三处：name，KAFKA_BROKER_ID，KAFKA_ADVERTISED_LISTENERS\n\n```bash\ndocker run --name prod_kafka_cluster_01 \\\n-e KAFKA_BROKER_ID=1 \\\n-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.181:9092 \\\n-e KAFKA_ZOOKEEPER_CONNECT=192.168.10.181:2181,192.168.10.182:2181,192.168.10.183:2181,192.168.10.184:2181,192.168.10.185:2181,192.168.10.186:2181 \\\n-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\n-e KAFKA_HEAP_OPTS=\"-Xmx1024m -Xms1024m\" \\\n-e TZ='Asia/Shanghai' \\\n-e LANG=\"en_US.UTF-8\" \\\n-v /docker_data/kafka:/kafka \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /etc/localtime:/etc/localtime \\\n--network=host --privileged=true --restart=always \\\n-d wurstmeister/kafka:2.13-2.8.1\n\n\nprod_cluster_kafka_01_1  | [Configuring] 'default.replication.factor' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'advertised.listeners' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'port' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | Excluding KAFKA_HOME from broker config\nprod_cluster_kafka_01_1  | [Configuring] 'log.dirs' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'listeners' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | Excluding KAFKA_VERSION from broker config\nprod_cluster_kafka_01_1  | [Configuring] 'zookeeper.connect' in '/opt/kafka/config/server.properties'\nprod_cluster_kafka_01_1  | [Configuring] 'broker.id' in '/opt/kafka/config/server.properties'\n```\n\n\n## 3.配置优化\n\n```shell\n#JVM参数\n-Xmx6g -Xms6g -XX:MetaspaceSize=96m -XX:+UseG1GC\n-XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M\n-XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -XX:+ExplicitGCInvokesConcurrent\n# ----------------------------------------------------------\n#                        Kafka配置\n# 1、两个副本\n# 2、日志，消息保留14天\n# ----------------------------------------------------------\n\n# 单独配置端口\nport=19092\n\n#在服务器上启用主题的自动创建\nauto.create.topics.enable=true\n#默认创建topic的副本数\ndefault.replication.factor=2\n# 表示消息至少要被写入副本数才算是“已提交”,设置1<min.insync.replicas<default.replication.factor的值\nmin.insync.replicas=1\n# follower拉取leader副本消息的线程数\nnum.replica.fetchers=16\n# borker处理磁盘io的线程数\nnum.io.threads=16\n\n# broker的负载均衡（可以开启），因为数据量不大\nauto.leader.rebalance.enable=true\n# log数据留存时间2周\nlog.retention.hours=336\n# 当producer写入10000条消息时，刷数据到磁盘\nlog.flush.interval.messages=10000\n# 每隔1s刷数据到磁盘\nlog.flush.interval.ms=1000\n# 日志文件大小2G\nlog.segment.bytes = 2147483647\n# 200m，防止oom\nsocket.request.max.bytes=2147483600\n\n\n# topic消息保存时长，此处设14天\nretention.ms=1209600000\n# topic消息总磁盘空间，默认值：1073741824byte即1GB,此处设8G\nretention.bytes=8589934592\n```\n\n## 4.压力测试\n\n\n```bash\n#测试\n\ndocker exec -it prod_loganalysis_kafka_03 /bin/bash\ncd /opt/kafka_2.13-2.8.1/bin\n\n\n#生产消息，总数2000W，吞吐量20000，每条消息1000字节\n./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092\n\n#消费消息，16线程，2000W消息，1MB一次请求\n./kafka-consumer-perf-test.sh --broker-list 192.168.10.182:9092 --topic test_of_kongkong --fetch-size 1048576 --messages 20000000 --threads 16 --reporting-interval 2000 --timeout 10000\n\n```\n\n## 5.测试记录\n\n```bash\nbash-5.1# ./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092\n99962 records sent, 19984.4 records/sec (19.06 MB/sec), 82.5 ms avg latency, 452.0 ms max latency.\n100080 records sent, 20016.0 records/sec (19.09 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.\n99980 records sent, 19992.0 records/sec (19.07 MB/sec), 2.0 ms avg latency, 12.0 ms max latency.\n100060 records sent, 20012.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.\n100012 records sent, 20002.4 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.\n100004 records sent, 19996.8 records/sec (19.07 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.\n100020 records sent, 20004.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 9.0 ms max latency.\n99964 records sent, 19992.8 records/sec (19.07 MB/sec), 45.6 ms avg latency, 222.0 ms max latency.\n100036 records sent, 20003.2 records/sec (19.08 MB/sec), 2.0 ms avg latency, 10.0 ms max latency.\n100056 records sent, 20011.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 11.0 ms max latency.\n99968 records sent, 19989.6 records/sec (19.06 MB/sec), 3.0 ms avg latency, 37.0 ms max latency.\n100036 records sent, 20007.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.\n99936 records sent, 19983.2 records/sec (19.06 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n100108 records sent, 20017.6 records/sec (19.09 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n99972 records sent, 19994.4 records/sec (19.07 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.\n100044 records sent, 20000.8 records/sec (19.07 MB/sec), 2.1 ms avg latency, 13.0 ms max latency.\n100040 records sent, 20008.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 13.0 ms max latency.\n100000 records sent, 19996.0 records/sec (19.07 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.\n\n\n\nstart.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec\n2023-07-04 11:11:44:634, 2023-07-04 11:13:59:020, 19073.4863, 141.9306, 20000000, 148825.0264, 421, 133965, 142.3766, 149292.7257\n\n\n```\n\n\n\n\n\n### 参考文档\n参考：https://zhuanlan.zhihu.com/p/137720038\n官网：https://kafka.apache.org/documentation/#java\n\n","slug":"07中间件/7.5.Kafka集群容器部署","published":1,"date":"2024-07-20T08:25:03.736Z","updated":"2024-07-20T08:35:36.954Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqn000ej38ae8xn9dvj","content":"<h2 id=\"1-环境准备\">1.环境准备</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /docker_data/kafka/&#123;config,data,plugins,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop prod_kafka_cluster_01 &amp;&amp; docker rm prod_kafka_cluster_01</span><br><span class=\"line\">docker logs prod_kafka_cluster_02</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置准备\">2.配置准备</h2>\n<p>需修改三处：name，KAFKA_BROKER_ID，KAFKA_ADVERTISED_LISTENERS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name prod_kafka_cluster_01 \\</span><br><span class=\"line\">-e KAFKA_BROKER_ID=1 \\</span><br><span class=\"line\">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.181:9092 \\</span><br><span class=\"line\">-e KAFKA_ZOOKEEPER_CONNECT=192.168.10.181:2181,192.168.10.182:2181,192.168.10.183:2181,192.168.10.184:2181,192.168.10.185:2181,192.168.10.186:2181 \\</span><br><span class=\"line\">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\</span><br><span class=\"line\">-e KAFKA_HEAP_OPTS=<span class=\"string\">&quot;-Xmx1024m -Xms1024m&quot;</span> \\</span><br><span class=\"line\">-e TZ=<span class=\"string\">&#x27;Asia/Shanghai&#x27;</span> \\</span><br><span class=\"line\">-e LANG=<span class=\"string\">&quot;en_US.UTF-8&quot;</span> \\</span><br><span class=\"line\">-v /docker_data/kafka:/kafka \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">--network=host --privileged=<span class=\"literal\">true</span> --restart=always \\</span><br><span class=\"line\">-d wurstmeister/kafka:2.13-2.8.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;default.replication.factor&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;advertised.listeners&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;port&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | Excluding KAFKA_HOME from broker config</span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;log.dirs&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;listeners&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | Excluding KAFKA_VERSION from broker config</span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;zookeeper.connect&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;broker.id&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置优化\">3.配置优化</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">JVM参数</span></span><br><span class=\"line\">-Xmx6g -Xms6g -XX:MetaspaceSize=96m -XX:+UseG1GC</span><br><span class=\"line\">-XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M</span><br><span class=\"line\">-XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -XX:+ExplicitGCInvokesConcurrent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">                       Kafka配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、两个副本</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、日志，消息保留14天</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">单独配置端口</span></span><br><span class=\"line\">port=19092</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在服务器上启用主题的自动创建</span></span><br><span class=\"line\">auto.create.topics.enable=true</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认创建topic的副本数</span></span><br><span class=\"line\">default.replication.factor=2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示消息至少要被写入副本数才算是“已提交”,设置1&lt;min.insync.replicas&lt;default.replication.factor的值</span></span><br><span class=\"line\">min.insync.replicas=1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">follower拉取leader副本消息的线程数</span></span><br><span class=\"line\">num.replica.fetchers=16</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">borker处理磁盘io的线程数</span></span><br><span class=\"line\">num.io.threads=16</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">broker的负载均衡（可以开启），因为数据量不大</span></span><br><span class=\"line\">auto.leader.rebalance.enable=true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">log</span>数据留存时间2周</span></span><br><span class=\"line\">log.retention.hours=336</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当producer写入10000条消息时，刷数据到磁盘</span></span><br><span class=\"line\">log.flush.interval.messages=10000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">每隔1s刷数据到磁盘</span></span><br><span class=\"line\">log.flush.interval.ms=1000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">日志文件大小2G</span></span><br><span class=\"line\">log.segment.bytes = 2147483647</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">200m，防止oom</span></span><br><span class=\"line\">socket.request.max.bytes=2147483600</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic消息保存时长，此处设14天</span></span><br><span class=\"line\">retention.ms=1209600000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic消息总磁盘空间，默认值：1073741824byte即1GB,此处设8G</span></span><br><span class=\"line\">retention.bytes=8589934592</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-压力测试\">4.压力测试</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it prod_loganalysis_kafka_03 /bin/bash</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/kafka_2.13-2.8.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生产消息，总数2000W，吞吐量20000，每条消息1000字节</span></span><br><span class=\"line\">./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费消息，16线程，2000W消息，1MB一次请求</span></span><br><span class=\"line\">./kafka-consumer-perf-test.sh --broker-list 192.168.10.182:9092 --topic test_of_kongkong --fetch-size 1048576 --messages 20000000 --threads 16 --reporting-interval 2000 --<span class=\"built_in\">timeout</span> 10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试记录\">5.测试记录</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-5.1# ./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092</span><br><span class=\"line\">99962 records sent, 19984.4 records/sec (19.06 MB/sec), 82.5 ms avg latency, 452.0 ms max latency.</span><br><span class=\"line\">100080 records sent, 20016.0 records/sec (19.09 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.</span><br><span class=\"line\">99980 records sent, 19992.0 records/sec (19.07 MB/sec), 2.0 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\">100060 records sent, 20012.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">100012 records sent, 20002.4 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">100004 records sent, 19996.8 records/sec (19.07 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.</span><br><span class=\"line\">100020 records sent, 20004.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 9.0 ms max latency.</span><br><span class=\"line\">99964 records sent, 19992.8 records/sec (19.07 MB/sec), 45.6 ms avg latency, 222.0 ms max latency.</span><br><span class=\"line\">100036 records sent, 20003.2 records/sec (19.08 MB/sec), 2.0 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100056 records sent, 20011.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">99968 records sent, 19989.6 records/sec (19.06 MB/sec), 3.0 ms avg latency, 37.0 ms max latency.</span><br><span class=\"line\">100036 records sent, 20007.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\">99936 records sent, 19983.2 records/sec (19.06 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100108 records sent, 20017.6 records/sec (19.09 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">99972 records sent, 19994.4 records/sec (19.07 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100044 records sent, 20000.8 records/sec (19.07 MB/sec), 2.1 ms avg latency, 13.0 ms max latency.</span><br><span class=\"line\">100040 records sent, 20008.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 13.0 ms max latency.</span><br><span class=\"line\">100000 records sent, 19996.0 records/sec (19.07 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec</span><br><span class=\"line\">2023-07-04 11:11:44:634, 2023-07-04 11:13:59:020, 19073.4863, 141.9306, 20000000, 148825.0264, 421, 133965, 142.3766, 149292.7257</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文档\">参考文档</h3>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/137720038\">https://zhuanlan.zhihu.com/p/137720038</a><br>\n官网：<a href=\"https://kafka.apache.org/documentation/#java\">https://kafka.apache.org/documentation/#java</a></p>\n","excerpt":"","more":"<h2 id=\"1-环境准备\">1.环境准备</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /docker_data/kafka/&#123;config,data,plugins,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">docker stop prod_kafka_cluster_01 &amp;&amp; docker rm prod_kafka_cluster_01</span><br><span class=\"line\">docker logs prod_kafka_cluster_02</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置准备\">2.配置准备</h2>\n<p>需修改三处：name，KAFKA_BROKER_ID，KAFKA_ADVERTISED_LISTENERS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name prod_kafka_cluster_01 \\</span><br><span class=\"line\">-e KAFKA_BROKER_ID=1 \\</span><br><span class=\"line\">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.10.181:9092 \\</span><br><span class=\"line\">-e KAFKA_ZOOKEEPER_CONNECT=192.168.10.181:2181,192.168.10.182:2181,192.168.10.183:2181,192.168.10.184:2181,192.168.10.185:2181,192.168.10.186:2181 \\</span><br><span class=\"line\">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\</span><br><span class=\"line\">-e KAFKA_HEAP_OPTS=<span class=\"string\">&quot;-Xmx1024m -Xms1024m&quot;</span> \\</span><br><span class=\"line\">-e TZ=<span class=\"string\">&#x27;Asia/Shanghai&#x27;</span> \\</span><br><span class=\"line\">-e LANG=<span class=\"string\">&quot;en_US.UTF-8&quot;</span> \\</span><br><span class=\"line\">-v /docker_data/kafka:/kafka \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">--network=host --privileged=<span class=\"literal\">true</span> --restart=always \\</span><br><span class=\"line\">-d wurstmeister/kafka:2.13-2.8.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;default.replication.factor&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;advertised.listeners&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;port&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | Excluding KAFKA_HOME from broker config</span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;log.dirs&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;listeners&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | Excluding KAFKA_VERSION from broker config</span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;zookeeper.connect&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br><span class=\"line\">prod_cluster_kafka_01_1  | [Configuring] <span class=\"string\">&#x27;broker.id&#x27;</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;/opt/kafka/config/server.properties&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置优化\">3.配置优化</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">JVM参数</span></span><br><span class=\"line\">-Xmx6g -Xms6g -XX:MetaspaceSize=96m -XX:+UseG1GC</span><br><span class=\"line\">-XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M</span><br><span class=\"line\">-XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -XX:+ExplicitGCInvokesConcurrent</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">                       Kafka配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、两个副本</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、日志，消息保留14天</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">单独配置端口</span></span><br><span class=\"line\">port=19092</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在服务器上启用主题的自动创建</span></span><br><span class=\"line\">auto.create.topics.enable=true</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认创建topic的副本数</span></span><br><span class=\"line\">default.replication.factor=2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示消息至少要被写入副本数才算是“已提交”,设置1&lt;min.insync.replicas&lt;default.replication.factor的值</span></span><br><span class=\"line\">min.insync.replicas=1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">follower拉取leader副本消息的线程数</span></span><br><span class=\"line\">num.replica.fetchers=16</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">borker处理磁盘io的线程数</span></span><br><span class=\"line\">num.io.threads=16</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">broker的负载均衡（可以开启），因为数据量不大</span></span><br><span class=\"line\">auto.leader.rebalance.enable=true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">log</span>数据留存时间2周</span></span><br><span class=\"line\">log.retention.hours=336</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当producer写入10000条消息时，刷数据到磁盘</span></span><br><span class=\"line\">log.flush.interval.messages=10000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">每隔1s刷数据到磁盘</span></span><br><span class=\"line\">log.flush.interval.ms=1000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">日志文件大小2G</span></span><br><span class=\"line\">log.segment.bytes = 2147483647</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">200m，防止oom</span></span><br><span class=\"line\">socket.request.max.bytes=2147483600</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic消息保存时长，此处设14天</span></span><br><span class=\"line\">retention.ms=1209600000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">topic消息总磁盘空间，默认值：1073741824byte即1GB,此处设8G</span></span><br><span class=\"line\">retention.bytes=8589934592</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-压力测试\">4.压力测试</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it prod_loganalysis_kafka_03 /bin/bash</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/kafka_2.13-2.8.1/bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生产消息，总数2000W，吞吐量20000，每条消息1000字节</span></span><br><span class=\"line\">./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费消息，16线程，2000W消息，1MB一次请求</span></span><br><span class=\"line\">./kafka-consumer-perf-test.sh --broker-list 192.168.10.182:9092 --topic test_of_kongkong --fetch-size 1048576 --messages 20000000 --threads 16 --reporting-interval 2000 --<span class=\"built_in\">timeout</span> 10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试记录\">5.测试记录</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-5.1# ./kafka-producer-perf-test.sh --topic test_of_kongkong --num-records 20000000 --record-size 1000  --throughput 20000 --producer-props bootstrap.servers=192.168.10.182:9092</span><br><span class=\"line\">99962 records sent, 19984.4 records/sec (19.06 MB/sec), 82.5 ms avg latency, 452.0 ms max latency.</span><br><span class=\"line\">100080 records sent, 20016.0 records/sec (19.09 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.</span><br><span class=\"line\">99980 records sent, 19992.0 records/sec (19.07 MB/sec), 2.0 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\">100060 records sent, 20012.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">100012 records sent, 20002.4 records/sec (19.08 MB/sec), 2.0 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">100004 records sent, 19996.8 records/sec (19.07 MB/sec), 2.0 ms avg latency, 8.0 ms max latency.</span><br><span class=\"line\">100020 records sent, 20004.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 9.0 ms max latency.</span><br><span class=\"line\">99964 records sent, 19992.8 records/sec (19.07 MB/sec), 45.6 ms avg latency, 222.0 ms max latency.</span><br><span class=\"line\">100036 records sent, 20003.2 records/sec (19.08 MB/sec), 2.0 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100056 records sent, 20011.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 11.0 ms max latency.</span><br><span class=\"line\">99968 records sent, 19989.6 records/sec (19.06 MB/sec), 3.0 ms avg latency, 37.0 ms max latency.</span><br><span class=\"line\">100036 records sent, 20007.2 records/sec (19.08 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\">99936 records sent, 19983.2 records/sec (19.06 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100108 records sent, 20017.6 records/sec (19.09 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">99972 records sent, 19994.4 records/sec (19.07 MB/sec), 2.1 ms avg latency, 10.0 ms max latency.</span><br><span class=\"line\">100044 records sent, 20000.8 records/sec (19.07 MB/sec), 2.1 ms avg latency, 13.0 ms max latency.</span><br><span class=\"line\">100040 records sent, 20008.0 records/sec (19.08 MB/sec), 2.0 ms avg latency, 13.0 ms max latency.</span><br><span class=\"line\">100000 records sent, 19996.0 records/sec (19.07 MB/sec), 2.1 ms avg latency, 12.0 ms max latency.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec</span><br><span class=\"line\">2023-07-04 11:11:44:634, 2023-07-04 11:13:59:020, 19073.4863, 141.9306, 20000000, 148825.0264, 421, 133965, 142.3766, 149292.7257</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文档\">参考文档</h3>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/137720038\">https://zhuanlan.zhihu.com/p/137720038</a><br>\n官网：<a href=\"https://kafka.apache.org/documentation/#java\">https://kafka.apache.org/documentation/#java</a></p>\n"},{"title":"2019年题目","_content":"**EN:**\n\n(a) Write a straightforward recursive function to calculate Fibonacci number.\n\n(b) What is the time complexity of the function in (1)(a) above, in big O? Explain your answer.\n\n(c) What is dynamic programming? Apply dynamic programming approach to calculate a Fibonacci number, and describe the way dynamic programming calculates the Fibonacci number using an appropriate example.\n\n**ZH:**\n\n（a）写一个直接的递归函数来计算斐波那契数。\n\n（b）上面（1）（a）中的函数的时间复杂度是什么，大 O 是多少？解释你的答案。\n\n（c）什么是动态规划？应用动态规划方法来计算斐波那契数，并描述动态规划使用适当的示例计算斐波那契数的方法。\n\n**中文解释：**\n\n**（a）斐波那契数的递归函数**\n\n斐波那契数列是一个数列，其中前两个数为 0 和 1，而从第三个数开始，每个数都是前两个数的和。一个简单的递归函数可以用于计算斐波那契数：\n\n```python\n\ndef fibonacci(n):\n\nif n < 2:\n\nreturn n\n\nelse:\n\nreturn fibonacci(n-1) + fibonacci(n-2)\n\n```\n\n**（b）时间复杂度**\n\n给定自然数 n，递归函数 fibonacci(n) 的时间复杂度为 O(2^n)。这是因为对于每个输入 n，该函数都会递归地调用自身两次，并且这种模式会一直重复到 n 达到 0 或 1。\n\n**（c）动态规划**\n\n动态规划是一种解决优化问题的技术，它将问题分解成子问题，然后通过存储子问题的解决方案来避免重复计算。对于斐波那契数，我们可以使用动态规划来计算斐波那契数，方法是存储已计算出的斐波那契数。\n\n以下是动态规划方法计算斐波那契数的一个示例：\n\n```python\n\ndef fibonacci_dp(n):\n\nfib_cache = [0, 1]  # 存储已计算出的斐波那契数\n\nwhile n >= len(fib_cache):\n\nnext_fib = fib_cache[-1] + fib_cache[-2]\n\nfib_cache.append(next_fib)\n\nreturn fib_cache[n]\n\n```\n\n在该实现中，fib_cache 列表存储已计算出的斐波那契数。当 n 大于 fib_cache 的长度时，它将计算并存储下一个斐波那契数。通过使用 fib_cache，动态规划方法避免了重复计算，从而将时间复杂度从 O(2^n) 降低到 O(n)。","source":"_posts/05高级算法/2019年题目.md","raw":"---\ntitle: 2019年题目\n---\n**EN:**\n\n(a) Write a straightforward recursive function to calculate Fibonacci number.\n\n(b) What is the time complexity of the function in (1)(a) above, in big O? Explain your answer.\n\n(c) What is dynamic programming? Apply dynamic programming approach to calculate a Fibonacci number, and describe the way dynamic programming calculates the Fibonacci number using an appropriate example.\n\n**ZH:**\n\n（a）写一个直接的递归函数来计算斐波那契数。\n\n（b）上面（1）（a）中的函数的时间复杂度是什么，大 O 是多少？解释你的答案。\n\n（c）什么是动态规划？应用动态规划方法来计算斐波那契数，并描述动态规划使用适当的示例计算斐波那契数的方法。\n\n**中文解释：**\n\n**（a）斐波那契数的递归函数**\n\n斐波那契数列是一个数列，其中前两个数为 0 和 1，而从第三个数开始，每个数都是前两个数的和。一个简单的递归函数可以用于计算斐波那契数：\n\n```python\n\ndef fibonacci(n):\n\nif n < 2:\n\nreturn n\n\nelse:\n\nreturn fibonacci(n-1) + fibonacci(n-2)\n\n```\n\n**（b）时间复杂度**\n\n给定自然数 n，递归函数 fibonacci(n) 的时间复杂度为 O(2^n)。这是因为对于每个输入 n，该函数都会递归地调用自身两次，并且这种模式会一直重复到 n 达到 0 或 1。\n\n**（c）动态规划**\n\n动态规划是一种解决优化问题的技术，它将问题分解成子问题，然后通过存储子问题的解决方案来避免重复计算。对于斐波那契数，我们可以使用动态规划来计算斐波那契数，方法是存储已计算出的斐波那契数。\n\n以下是动态规划方法计算斐波那契数的一个示例：\n\n```python\n\ndef fibonacci_dp(n):\n\nfib_cache = [0, 1]  # 存储已计算出的斐波那契数\n\nwhile n >= len(fib_cache):\n\nnext_fib = fib_cache[-1] + fib_cache[-2]\n\nfib_cache.append(next_fib)\n\nreturn fib_cache[n]\n\n```\n\n在该实现中，fib_cache 列表存储已计算出的斐波那契数。当 n 大于 fib_cache 的长度时，它将计算并存储下一个斐波那契数。通过使用 fib_cache，动态规划方法避免了重复计算，从而将时间复杂度从 O(2^n) 降低到 O(n)。","slug":"05高级算法/2019年题目","published":1,"date":"2024-07-10T08:14:31.325Z","updated":"2024-07-10T10:15:35.708Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqo000fj38ahl29gfbx","content":"<p><strong>EN:</strong></p>\n<p>(a) Write a straightforward recursive function to calculate Fibonacci number.</p>\n<p>(b) What is the time complexity of the function in (1)(a) above, in big O? Explain your answer.</p>\n<p>© What is dynamic programming? Apply dynamic programming approach to calculate a Fibonacci number, and describe the way dynamic programming calculates the Fibonacci number using an appropriate example.</p>\n<p><strong>ZH:</strong></p>\n<p>（a）写一个直接的递归函数来计算斐波那契数。</p>\n<p>（b）上面（1）（a）中的函数的时间复杂度是什么，大 O 是多少？解释你的答案。</p>\n<p>（c）什么是动态规划？应用动态规划方法来计算斐波那契数，并描述动态规划使用适当的示例计算斐波那契数的方法。</p>\n<p><strong>中文解释：</strong></p>\n<p><strong>（a）斐波那契数的递归函数</strong></p>\n<p>斐波那契数列是一个数列，其中前两个数为 0 和 1，而从第三个数开始，每个数都是前两个数的和。一个简单的递归函数可以用于计算斐波那契数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> fibonacci(n-<span class=\"number\">1</span>) + fibonacci(n-<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>（b）时间复杂度</strong></p>\n<p>给定自然数 n，递归函数 fibonacci(n) 的时间复杂度为 O(2^n)。这是因为对于每个输入 n，该函数都会递归地调用自身两次，并且这种模式会一直重复到 n 达到 0 或 1。</p>\n<p><strong>（c）动态规划</strong></p>\n<p>动态规划是一种解决优化问题的技术，它将问题分解成子问题，然后通过存储子问题的解决方案来避免重复计算。对于斐波那契数，我们可以使用动态规划来计算斐波那契数，方法是存储已计算出的斐波那契数。</p>\n<p>以下是动态规划方法计算斐波那契数的一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci_dp</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">fib_cache = [<span class=\"number\">0</span>, <span class=\"number\">1</span>]  <span class=\"comment\"># 存储已计算出的斐波那契数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt;= <span class=\"built_in\">len</span>(fib_cache):</span><br><span class=\"line\"></span><br><span class=\"line\">next_fib = fib_cache[-<span class=\"number\">1</span>] + fib_cache[-<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fib_cache.append(next_fib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> fib_cache[n]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在该实现中，fib_cache 列表存储已计算出的斐波那契数。当 n 大于 fib_cache 的长度时，它将计算并存储下一个斐波那契数。通过使用 fib_cache，动态规划方法避免了重复计算，从而将时间复杂度从 O(2^n) 降低到 O(n)。</p>\n","excerpt":"","more":"<p><strong>EN:</strong></p>\n<p>(a) Write a straightforward recursive function to calculate Fibonacci number.</p>\n<p>(b) What is the time complexity of the function in (1)(a) above, in big O? Explain your answer.</p>\n<p>© What is dynamic programming? Apply dynamic programming approach to calculate a Fibonacci number, and describe the way dynamic programming calculates the Fibonacci number using an appropriate example.</p>\n<p><strong>ZH:</strong></p>\n<p>（a）写一个直接的递归函数来计算斐波那契数。</p>\n<p>（b）上面（1）（a）中的函数的时间复杂度是什么，大 O 是多少？解释你的答案。</p>\n<p>（c）什么是动态规划？应用动态规划方法来计算斐波那契数，并描述动态规划使用适当的示例计算斐波那契数的方法。</p>\n<p><strong>中文解释：</strong></p>\n<p><strong>（a）斐波那契数的递归函数</strong></p>\n<p>斐波那契数列是一个数列，其中前两个数为 0 和 1，而从第三个数开始，每个数都是前两个数的和。一个简单的递归函数可以用于计算斐波那契数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> fibonacci(n-<span class=\"number\">1</span>) + fibonacci(n-<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>（b）时间复杂度</strong></p>\n<p>给定自然数 n，递归函数 fibonacci(n) 的时间复杂度为 O(2^n)。这是因为对于每个输入 n，该函数都会递归地调用自身两次，并且这种模式会一直重复到 n 达到 0 或 1。</p>\n<p><strong>（c）动态规划</strong></p>\n<p>动态规划是一种解决优化问题的技术，它将问题分解成子问题，然后通过存储子问题的解决方案来避免重复计算。对于斐波那契数，我们可以使用动态规划来计算斐波那契数，方法是存储已计算出的斐波那契数。</p>\n<p>以下是动态规划方法计算斐波那契数的一个示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci_dp</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">fib_cache = [<span class=\"number\">0</span>, <span class=\"number\">1</span>]  <span class=\"comment\"># 存储已计算出的斐波那契数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt;= <span class=\"built_in\">len</span>(fib_cache):</span><br><span class=\"line\"></span><br><span class=\"line\">next_fib = fib_cache[-<span class=\"number\">1</span>] + fib_cache[-<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fib_cache.append(next_fib)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> fib_cache[n]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在该实现中，fib_cache 列表存储已计算出的斐波那契数。当 n 大于 fib_cache 的长度时，它将计算并存储下一个斐波那契数。通过使用 fib_cache，动态规划方法避免了重复计算，从而将时间复杂度从 O(2^n) 降低到 O(n)。</p>\n"},{"title":"BFS (Breadth-First Search)","weight":20,"_content":"# BFS (Breadth-First Search)\n\n\n## 1. 用途\n\n广度优先搜索（BFS）在现实中有许多实际用途，主要用于解决以下问题：\n1. 最短路径搜索：BFS 可以用于无权图或者所有边权重相同的图中寻找最短路径。这在网络路由、社交网络中的最短友谊链、广告投放中的最短路径传播等方面有广泛应用。\n1. 图的连通性检测：BFS 可以用来检测图是否是连通的，即从一个节点能否到达图中的所有其他节点。这在计算机网络中的连通性检测、社交网络中的社群发现等方面很有用。\n1. 状态空间搜索：BFS 可以应用于状态空间搜索问题，如在迷宫游戏中找到从起点到终点的最短路径，或者在解决八皇后问题等排列组合问题时寻找最优解。\n1. Web爬虫：在网络爬虫中，BFS 用来抓取网页，并且可以限制爬取深度，确保优先爬取距离种子页面更近的链接。\n1. 层次遍历：BFS 的特性使其适合进行层次遍历，例如`树的层次遍历`、多级菜单的展开等。\n1. 游戏开发：在游戏开发中，BFS 可以用于寻找玩家或NPC的移动路径，或者在地图中寻找最近的敌人或资源。\n\n\n\n## 2. 代码\n\n```java\nimport java.util.*;\n\npublic class BFSGraphTraversal {\n    // 使用邻接列表表示图\n    private Map<Character, List<Character>> graph;\n\n    public BFSGraphTraversal() {\n        graph = new HashMap<>();\n    }\n\n    // 添加边的方法\n    public void addEdge(char from, char to) {\n        graph.computeIfAbsent(from, k -> new ArrayList<>()).add(to);\n        graph.computeIfAbsent(to, k -> new ArrayList<>()).add(from); // 如果是有向图，删除此行\n    }\n\n    // BFS 遍历方法\n    public List<Character> bfs(char start) {\n        List<Character> traversalOrder = new ArrayList<>();\n        if (!graph.containsKey(start)) {\n            return traversalOrder;\n        }\n\n        Queue<Character> queue = new LinkedList<>();\n        Set<Character> visited = new HashSet<>();\n\n        queue.offer(start);\n        visited.add(start);\n\n        while (!queue.isEmpty()) {\n            char current = queue.poll();\n            traversalOrder.add(current);\n\n            for (char neighbor : graph.getOrDefault(current, new ArrayList<>())) {\n                if (!visited.contains(neighbor)) {\n                    queue.offer(neighbor);\n                    visited.add(neighbor);\n                }\n            }\n        }\n\n        return traversalOrder;\n    }\n\n    public static void main(String[] args) {\n        BFSGraphTraversal graph = new BFSGraphTraversal();\n\n        // 添加图的边\n        graph.addEdge('A', 'B');\n        graph.addEdge('A', 'C');\n        graph.addEdge('B', 'D');\n        graph.addEdge('B', 'E');\n        graph.addEdge('C', 'F');\n        graph.addEdge('E', 'F');\n\n        // 从节点 'A' 开始进行 BFS 遍历\n        List<Character> traversalOrder = graph.bfs('A');\n        System.out.println(\"BFS traversal order starting from node A: \" + traversalOrder);\n    }\n}\n\n\n```","source":"_posts/05高级算法/BFS.md","raw":"---\ntitle: BFS (Breadth-First Search)\nweight: 20\n---\n# BFS (Breadth-First Search)\n\n\n## 1. 用途\n\n广度优先搜索（BFS）在现实中有许多实际用途，主要用于解决以下问题：\n1. 最短路径搜索：BFS 可以用于无权图或者所有边权重相同的图中寻找最短路径。这在网络路由、社交网络中的最短友谊链、广告投放中的最短路径传播等方面有广泛应用。\n1. 图的连通性检测：BFS 可以用来检测图是否是连通的，即从一个节点能否到达图中的所有其他节点。这在计算机网络中的连通性检测、社交网络中的社群发现等方面很有用。\n1. 状态空间搜索：BFS 可以应用于状态空间搜索问题，如在迷宫游戏中找到从起点到终点的最短路径，或者在解决八皇后问题等排列组合问题时寻找最优解。\n1. Web爬虫：在网络爬虫中，BFS 用来抓取网页，并且可以限制爬取深度，确保优先爬取距离种子页面更近的链接。\n1. 层次遍历：BFS 的特性使其适合进行层次遍历，例如`树的层次遍历`、多级菜单的展开等。\n1. 游戏开发：在游戏开发中，BFS 可以用于寻找玩家或NPC的移动路径，或者在地图中寻找最近的敌人或资源。\n\n\n\n## 2. 代码\n\n```java\nimport java.util.*;\n\npublic class BFSGraphTraversal {\n    // 使用邻接列表表示图\n    private Map<Character, List<Character>> graph;\n\n    public BFSGraphTraversal() {\n        graph = new HashMap<>();\n    }\n\n    // 添加边的方法\n    public void addEdge(char from, char to) {\n        graph.computeIfAbsent(from, k -> new ArrayList<>()).add(to);\n        graph.computeIfAbsent(to, k -> new ArrayList<>()).add(from); // 如果是有向图，删除此行\n    }\n\n    // BFS 遍历方法\n    public List<Character> bfs(char start) {\n        List<Character> traversalOrder = new ArrayList<>();\n        if (!graph.containsKey(start)) {\n            return traversalOrder;\n        }\n\n        Queue<Character> queue = new LinkedList<>();\n        Set<Character> visited = new HashSet<>();\n\n        queue.offer(start);\n        visited.add(start);\n\n        while (!queue.isEmpty()) {\n            char current = queue.poll();\n            traversalOrder.add(current);\n\n            for (char neighbor : graph.getOrDefault(current, new ArrayList<>())) {\n                if (!visited.contains(neighbor)) {\n                    queue.offer(neighbor);\n                    visited.add(neighbor);\n                }\n            }\n        }\n\n        return traversalOrder;\n    }\n\n    public static void main(String[] args) {\n        BFSGraphTraversal graph = new BFSGraphTraversal();\n\n        // 添加图的边\n        graph.addEdge('A', 'B');\n        graph.addEdge('A', 'C');\n        graph.addEdge('B', 'D');\n        graph.addEdge('B', 'E');\n        graph.addEdge('C', 'F');\n        graph.addEdge('E', 'F');\n\n        // 从节点 'A' 开始进行 BFS 遍历\n        List<Character> traversalOrder = graph.bfs('A');\n        System.out.println(\"BFS traversal order starting from node A: \" + traversalOrder);\n    }\n}\n\n\n```","slug":"05高级算法/BFS","published":1,"date":"2024-07-10T10:07:16.855Z","updated":"2024-07-10T10:07:16.856Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqo000gj38a9rzq50yn","content":"<h1>BFS (Breadth-First Search)</h1>\n<h2 id=\"1-用途\">1. 用途</h2>\n<p>广度优先搜索（BFS）在现实中有许多实际用途，主要用于解决以下问题：</p>\n<ol>\n<li>最短路径搜索：BFS 可以用于无权图或者所有边权重相同的图中寻找最短路径。这在网络路由、社交网络中的最短友谊链、广告投放中的最短路径传播等方面有广泛应用。</li>\n<li>图的连通性检测：BFS 可以用来检测图是否是连通的，即从一个节点能否到达图中的所有其他节点。这在计算机网络中的连通性检测、社交网络中的社群发现等方面很有用。</li>\n<li>状态空间搜索：BFS 可以应用于状态空间搜索问题，如在迷宫游戏中找到从起点到终点的最短路径，或者在解决八皇后问题等排列组合问题时寻找最优解。</li>\n<li>Web爬虫：在网络爬虫中，BFS 用来抓取网页，并且可以限制爬取深度，确保优先爬取距离种子页面更近的链接。</li>\n<li>层次遍历：BFS 的特性使其适合进行层次遍历，例如<code>树的层次遍历</code>、多级菜单的展开等。</li>\n<li>游戏开发：在游戏开发中，BFS 可以用于寻找玩家或NPC的移动路径，或者在地图中寻找最近的敌人或资源。</li>\n</ol>\n<h2 id=\"2-代码\">2. 代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BFSGraphTraversal</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用邻接列表表示图</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Character, List&lt;Character&gt;&gt; graph;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BFSGraphTraversal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        graph = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加边的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addEdge</span><span class=\"params\">(<span class=\"type\">char</span> from, <span class=\"type\">char</span> to)</span> &#123;</span><br><span class=\"line\">        graph.computeIfAbsent(from, k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;()).add(to);</span><br><span class=\"line\">        graph.computeIfAbsent(to, k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;()).add(from); <span class=\"comment\">// 如果是有向图，删除此行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// BFS 遍历方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Character&gt; <span class=\"title function_\">bfs</span><span class=\"params\">(<span class=\"type\">char</span> start)</span> &#123;</span><br><span class=\"line\">        List&lt;Character&gt; traversalOrder = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!graph.containsKey(start)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> traversalOrder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Queue&lt;Character&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Character&gt; visited = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.offer(start);</span><br><span class=\"line\">        visited.add(start);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">            traversalOrder.add(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> neighbor : graph.getOrDefault(current, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!visited.contains(neighbor)) &#123;</span><br><span class=\"line\">                    queue.offer(neighbor);</span><br><span class=\"line\">                    visited.add(neighbor);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> traversalOrder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BFSGraphTraversal</span> <span class=\"variable\">graph</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BFSGraphTraversal</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加图的边</span></span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从节点 &#x27;A&#x27; 开始进行 BFS 遍历</span></span><br><span class=\"line\">        List&lt;Character&gt; traversalOrder = graph.bfs(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BFS traversal order starting from node A: &quot;</span> + traversalOrder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1>BFS (Breadth-First Search)</h1>\n<h2 id=\"1-用途\">1. 用途</h2>\n<p>广度优先搜索（BFS）在现实中有许多实际用途，主要用于解决以下问题：</p>\n<ol>\n<li>最短路径搜索：BFS 可以用于无权图或者所有边权重相同的图中寻找最短路径。这在网络路由、社交网络中的最短友谊链、广告投放中的最短路径传播等方面有广泛应用。</li>\n<li>图的连通性检测：BFS 可以用来检测图是否是连通的，即从一个节点能否到达图中的所有其他节点。这在计算机网络中的连通性检测、社交网络中的社群发现等方面很有用。</li>\n<li>状态空间搜索：BFS 可以应用于状态空间搜索问题，如在迷宫游戏中找到从起点到终点的最短路径，或者在解决八皇后问题等排列组合问题时寻找最优解。</li>\n<li>Web爬虫：在网络爬虫中，BFS 用来抓取网页，并且可以限制爬取深度，确保优先爬取距离种子页面更近的链接。</li>\n<li>层次遍历：BFS 的特性使其适合进行层次遍历，例如<code>树的层次遍历</code>、多级菜单的展开等。</li>\n<li>游戏开发：在游戏开发中，BFS 可以用于寻找玩家或NPC的移动路径，或者在地图中寻找最近的敌人或资源。</li>\n</ol>\n<h2 id=\"2-代码\">2. 代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BFSGraphTraversal</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用邻接列表表示图</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Character, List&lt;Character&gt;&gt; graph;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BFSGraphTraversal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        graph = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加边的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addEdge</span><span class=\"params\">(<span class=\"type\">char</span> from, <span class=\"type\">char</span> to)</span> &#123;</span><br><span class=\"line\">        graph.computeIfAbsent(from, k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;()).add(to);</span><br><span class=\"line\">        graph.computeIfAbsent(to, k -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;()).add(from); <span class=\"comment\">// 如果是有向图，删除此行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// BFS 遍历方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Character&gt; <span class=\"title function_\">bfs</span><span class=\"params\">(<span class=\"type\">char</span> start)</span> &#123;</span><br><span class=\"line\">        List&lt;Character&gt; traversalOrder = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!graph.containsKey(start)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> traversalOrder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Queue&lt;Character&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        Set&lt;Character&gt; visited = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.offer(start);</span><br><span class=\"line\">        visited.add(start);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">            traversalOrder.add(current);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> neighbor : graph.getOrDefault(current, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!visited.contains(neighbor)) &#123;</span><br><span class=\"line\">                    queue.offer(neighbor);</span><br><span class=\"line\">                    visited.add(neighbor);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> traversalOrder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BFSGraphTraversal</span> <span class=\"variable\">graph</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BFSGraphTraversal</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加图的边</span></span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">        graph.addEdge(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从节点 &#x27;A&#x27; 开始进行 BFS 遍历</span></span><br><span class=\"line\">        List&lt;Character&gt; traversalOrder = graph.bfs(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BFS traversal order starting from node A: &quot;</span> + traversalOrder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"greedy algorithm 贪心算法","weight":20,"_content":"\n## 1. 简述\n贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。\n比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。\n\n## 2. 应用\n\n贪心算法可以解决一些最优化问题，如：求图中的最小生成树、求哈夫曼编码。","source":"_posts/05高级算法/GreedyAlgorithm.md","raw":"---\ntitle: greedy algorithm 贪心算法\nweight: 20\n---\n\n## 1. 简述\n贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。\n比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。\n\n## 2. 应用\n\n贪心算法可以解决一些最优化问题，如：求图中的最小生成树、求哈夫曼编码。","slug":"05高级算法/GreedyAlgorithm","published":1,"date":"2024-07-12T10:57:46.832Z","updated":"2024-07-12T12:03:20.580Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqp000hj38a4c89aqzv","content":"<h2 id=\"1-简述\">1. 简述</h2>\n<p>贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。<br>\n比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p>\n<h2 id=\"2-应用\">2. 应用</h2>\n<p>贪心算法可以解决一些最优化问题，如：求图中的最小生成树、求哈夫曼编码。</p>\n","excerpt":"","more":"<h2 id=\"1-简述\">1. 简述</h2>\n<p>贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。<br>\n比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p>\n<h2 id=\"2-应用\">2. 应用</h2>\n<p>贪心算法可以解决一些最优化问题，如：求图中的最小生成树、求哈夫曼编码。</p>\n"},{"title":"P-NP问题","weight":10,"_content":"\n## P-NP问题\n### 1. 问题解释\n---\nP-NP问题是计算机科学中的一个著名难题。简单来说，它问的是：所有可以快速验证的答案，是否也可以快速找到？\n\n- P类问题是那些可以用计算机在多项式时间内（即相对较快）解决的问题。\n- NP类问题是那些答案可以在多项式时间内验证的问题，但我们不知道是否可以在同样的时间内找到这些答案。\n\n这个问题之所以重要，是因为如果证明P=NP，那么所有现在认为很难解决的问题都能很快解决。反之，如果P≠NP，那么有些问题是我们无法快速解决的。**换而言之就是当前所使用的这部分体系会被颠覆，需要重构**。\n\n\n### 2. 解决后果\n如果P=NP问题得到解决，并证明所有NP问题都可以在多项式时间内解决，将会对多个领域产生深远影响，特别是密码学领域。以下是可能的后果：\n\n1. 公钥加密\n- 现状： 目前的公钥加密（如RSA和椭圆曲线加密）依赖于一些数学难题（如大整数分解和离散对数问题）的难以解决性。这些问题目前被认为无法在多项式时间内解决，因此被广泛用于保护互联网通信和金融交易的安全。\n\n- 后果： 如果P=NP，那么这些问题可以在多项式时间内解决，从而使得公钥加密方案变得不再安全。任何人都可以在合理的时间内破解这些加密方案，从而可以解密敏感数据和窃取信息。\n\n2. 对称加密\n- 现状： 对称加密算法（如AES和3DES）依赖于密钥的难以破解性，目前认为这些算法在没有密钥的情况下很难被破解。\n- 后果： 如果P=NP，那么找到密钥变得容易，从而破坏对称加密的安全性。攻击者可以在多项式时间内找到正确的密钥，从而解密通信数据。\n\n3. 加密哈希\n- 现状： 加密哈希函数（如SHA-256）广泛用于数据完整性验证、数字签名和加密货币（如比特币）。这些哈希函数依赖于找到原像（给定哈希值找到相应输入）的难度。\n- 后果： 如果P=NP，找到哈希函数的前映像将变得简单，可以在多项式时间内完成，从而破坏加密哈希的安全性。攻击者可以伪造数据、生成冲突，甚至破坏区块链的完整性。\n\n4. 整体影响\n- 现状： 现代安全系统依赖于一些问题的计算复杂性，这些问题目前被认为在合理时间内无法解决。\n- 后果： 如果P=NP，所有依赖于计算复杂性的安全系统将变得不再可靠。需要开发新的基于信息论安全的解决方案，这些方案不依赖于计算复杂性假设。\n\n**替代方案**\n- 信息论安全： 这类安全方案在理论上是无懈可击的，不依赖于计算难题。例如，量子加密（如量子密钥分发）在理论上可以提供无条件的安全性。\n- 新算法： 研究者需要寻找新的算法和协议，这些算法和协议不依赖于现有的计算难题，可能涉及新的数学和理论基础。\n总结而言，如果P=NP被证明，将需要重新设计和实现现代密码系统，确保数据和通信的安全性。这个过程将是一个巨大的挑战，但也会推动计算机科学和密码学的进步。\n\n### 专业术语\nWhat are the differences between NP, NP-Complete and NP-Hard?\n\n\n1. NP（非确定性多项式时间）：\n\nNP类问题是指那些可以在多项式时间内由非确定性图灵机（Nondeterministic Turing Machine）解决的问题。\n换句话说，NP问题是那些解可以在多项式时间内验证的问题。\n例如，给定一个数独谜题（Sudoku puzzle）和一个解答，我们可以在多项式时间内验证这个解答是否正确。\n\n2. NP完全（NP-Complete）：\n\nNP完全问题是NP类问题中的一个子集，具有以下两个特性：\n该问题本身是NP问题。\n任何NP问题都可以在多项式时间内归约（转换）为这个问题。\n这意味着，如果我们能够在多项式时间内解决任何一个NP完全问题，那么所有NP问题都可以在多项式时间内解决。\n例如，旅行推销员问题（Traveling Salesman Problem, TSP）是一个经典的NP完全问题。\n\n3. NP困难（NP-Hard）：\n\nNP困难问题是那些至少和NP问题一样难的问题。\n这些问题不一定是NP问题，也就是说，NP困难问题的解不一定能在多项式时间内验证。\n例如，计算一个图的最大团（Maximal Clique）是一个NP困难问题，它不仅是一个很难解决的问题，而且我们也不能在多项式时间内验证其解的正确性。\n**举个例子：**\n假设我们有一个物流公司的运输问题：\n\nNP问题：判断是否存在一种路径，使得运输成本不超过某个给定的预算。验证一条具体的路径是否满足这个条件是可以在多项式时间内完成的，因此这是一个NP问题。\n\nNP完全问题：在上述运输问题中，找到一条确切的路径，使得运输成本正好等于预算，并且是最短的路径。这可以归约为旅行推销员问题（TSP），所以这是一个NP完全问题。\n\nNP困难问题：假设这个物流公司想要最优地安排车辆，以最小化所有可能路径的总运输成本，这涉及到图论中的车辆路径问题（Vehicle Routing Problem, VRP），这是一个NP困难问题，因为它不仅难以解决，而且即使找到一个解，也无法在多项式时间内验证其最优性。\n\n\n### 问题\nIn comparing NP-complete and NP-hard, which of the following statements are TRUE?\n\ni） The theory of NP-completeness provides a method of obtaining a polynomial time for NP algorithms.\nii） All NP-complete problems are NP-Hard.","source":"_posts/05高级算法/P-NP问题.md","raw":"---\ntitle: P-NP问题\nweight: 10\n---\n\n## P-NP问题\n### 1. 问题解释\n---\nP-NP问题是计算机科学中的一个著名难题。简单来说，它问的是：所有可以快速验证的答案，是否也可以快速找到？\n\n- P类问题是那些可以用计算机在多项式时间内（即相对较快）解决的问题。\n- NP类问题是那些答案可以在多项式时间内验证的问题，但我们不知道是否可以在同样的时间内找到这些答案。\n\n这个问题之所以重要，是因为如果证明P=NP，那么所有现在认为很难解决的问题都能很快解决。反之，如果P≠NP，那么有些问题是我们无法快速解决的。**换而言之就是当前所使用的这部分体系会被颠覆，需要重构**。\n\n\n### 2. 解决后果\n如果P=NP问题得到解决，并证明所有NP问题都可以在多项式时间内解决，将会对多个领域产生深远影响，特别是密码学领域。以下是可能的后果：\n\n1. 公钥加密\n- 现状： 目前的公钥加密（如RSA和椭圆曲线加密）依赖于一些数学难题（如大整数分解和离散对数问题）的难以解决性。这些问题目前被认为无法在多项式时间内解决，因此被广泛用于保护互联网通信和金融交易的安全。\n\n- 后果： 如果P=NP，那么这些问题可以在多项式时间内解决，从而使得公钥加密方案变得不再安全。任何人都可以在合理的时间内破解这些加密方案，从而可以解密敏感数据和窃取信息。\n\n2. 对称加密\n- 现状： 对称加密算法（如AES和3DES）依赖于密钥的难以破解性，目前认为这些算法在没有密钥的情况下很难被破解。\n- 后果： 如果P=NP，那么找到密钥变得容易，从而破坏对称加密的安全性。攻击者可以在多项式时间内找到正确的密钥，从而解密通信数据。\n\n3. 加密哈希\n- 现状： 加密哈希函数（如SHA-256）广泛用于数据完整性验证、数字签名和加密货币（如比特币）。这些哈希函数依赖于找到原像（给定哈希值找到相应输入）的难度。\n- 后果： 如果P=NP，找到哈希函数的前映像将变得简单，可以在多项式时间内完成，从而破坏加密哈希的安全性。攻击者可以伪造数据、生成冲突，甚至破坏区块链的完整性。\n\n4. 整体影响\n- 现状： 现代安全系统依赖于一些问题的计算复杂性，这些问题目前被认为在合理时间内无法解决。\n- 后果： 如果P=NP，所有依赖于计算复杂性的安全系统将变得不再可靠。需要开发新的基于信息论安全的解决方案，这些方案不依赖于计算复杂性假设。\n\n**替代方案**\n- 信息论安全： 这类安全方案在理论上是无懈可击的，不依赖于计算难题。例如，量子加密（如量子密钥分发）在理论上可以提供无条件的安全性。\n- 新算法： 研究者需要寻找新的算法和协议，这些算法和协议不依赖于现有的计算难题，可能涉及新的数学和理论基础。\n总结而言，如果P=NP被证明，将需要重新设计和实现现代密码系统，确保数据和通信的安全性。这个过程将是一个巨大的挑战，但也会推动计算机科学和密码学的进步。\n\n### 专业术语\nWhat are the differences between NP, NP-Complete and NP-Hard?\n\n\n1. NP（非确定性多项式时间）：\n\nNP类问题是指那些可以在多项式时间内由非确定性图灵机（Nondeterministic Turing Machine）解决的问题。\n换句话说，NP问题是那些解可以在多项式时间内验证的问题。\n例如，给定一个数独谜题（Sudoku puzzle）和一个解答，我们可以在多项式时间内验证这个解答是否正确。\n\n2. NP完全（NP-Complete）：\n\nNP完全问题是NP类问题中的一个子集，具有以下两个特性：\n该问题本身是NP问题。\n任何NP问题都可以在多项式时间内归约（转换）为这个问题。\n这意味着，如果我们能够在多项式时间内解决任何一个NP完全问题，那么所有NP问题都可以在多项式时间内解决。\n例如，旅行推销员问题（Traveling Salesman Problem, TSP）是一个经典的NP完全问题。\n\n3. NP困难（NP-Hard）：\n\nNP困难问题是那些至少和NP问题一样难的问题。\n这些问题不一定是NP问题，也就是说，NP困难问题的解不一定能在多项式时间内验证。\n例如，计算一个图的最大团（Maximal Clique）是一个NP困难问题，它不仅是一个很难解决的问题，而且我们也不能在多项式时间内验证其解的正确性。\n**举个例子：**\n假设我们有一个物流公司的运输问题：\n\nNP问题：判断是否存在一种路径，使得运输成本不超过某个给定的预算。验证一条具体的路径是否满足这个条件是可以在多项式时间内完成的，因此这是一个NP问题。\n\nNP完全问题：在上述运输问题中，找到一条确切的路径，使得运输成本正好等于预算，并且是最短的路径。这可以归约为旅行推销员问题（TSP），所以这是一个NP完全问题。\n\nNP困难问题：假设这个物流公司想要最优地安排车辆，以最小化所有可能路径的总运输成本，这涉及到图论中的车辆路径问题（Vehicle Routing Problem, VRP），这是一个NP困难问题，因为它不仅难以解决，而且即使找到一个解，也无法在多项式时间内验证其最优性。\n\n\n### 问题\nIn comparing NP-complete and NP-hard, which of the following statements are TRUE?\n\ni） The theory of NP-completeness provides a method of obtaining a polynomial time for NP algorithms.\nii） All NP-complete problems are NP-Hard.","slug":"05高级算法/P-NP问题","published":1,"date":"2024-07-10T10:07:16.873Z","updated":"2024-07-10T10:07:16.874Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqq000ij38a2v2g3c4f","content":"<h2 id=\"P-NP问题\">P-NP问题</h2>\n<h3 id=\"1-问题解释\">1. 问题解释</h3>\n<hr>\n<p>P-NP问题是计算机科学中的一个著名难题。简单来说，它问的是：所有可以快速验证的答案，是否也可以快速找到？</p>\n<ul>\n<li>P类问题是那些可以用计算机在多项式时间内（即相对较快）解决的问题。</li>\n<li>NP类问题是那些答案可以在多项式时间内验证的问题，但我们不知道是否可以在同样的时间内找到这些答案。</li>\n</ul>\n<p>这个问题之所以重要，是因为如果证明P=NP，那么所有现在认为很难解决的问题都能很快解决。反之，如果P≠NP，那么有些问题是我们无法快速解决的。<strong>换而言之就是当前所使用的这部分体系会被颠覆，需要重构</strong>。</p>\n<h3 id=\"2-解决后果\">2. 解决后果</h3>\n<p>如果P=NP问题得到解决，并证明所有NP问题都可以在多项式时间内解决，将会对多个领域产生深远影响，特别是密码学领域。以下是可能的后果：</p>\n<ol>\n<li>公钥加密</li>\n</ol>\n<ul>\n<li>\n<p>现状： 目前的公钥加密（如RSA和椭圆曲线加密）依赖于一些数学难题（如大整数分解和离散对数问题）的难以解决性。这些问题目前被认为无法在多项式时间内解决，因此被广泛用于保护互联网通信和金融交易的安全。</p>\n</li>\n<li>\n<p>后果： 如果P=NP，那么这些问题可以在多项式时间内解决，从而使得公钥加密方案变得不再安全。任何人都可以在合理的时间内破解这些加密方案，从而可以解密敏感数据和窃取信息。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>对称加密</li>\n</ol>\n<ul>\n<li>现状： 对称加密算法（如AES和3DES）依赖于密钥的难以破解性，目前认为这些算法在没有密钥的情况下很难被破解。</li>\n<li>后果： 如果P=NP，那么找到密钥变得容易，从而破坏对称加密的安全性。攻击者可以在多项式时间内找到正确的密钥，从而解密通信数据。</li>\n</ul>\n<ol start=\"3\">\n<li>加密哈希</li>\n</ol>\n<ul>\n<li>现状： 加密哈希函数（如SHA-256）广泛用于数据完整性验证、数字签名和加密货币（如比特币）。这些哈希函数依赖于找到原像（给定哈希值找到相应输入）的难度。</li>\n<li>后果： 如果P=NP，找到哈希函数的前映像将变得简单，可以在多项式时间内完成，从而破坏加密哈希的安全性。攻击者可以伪造数据、生成冲突，甚至破坏区块链的完整性。</li>\n</ul>\n<ol start=\"4\">\n<li>整体影响</li>\n</ol>\n<ul>\n<li>现状： 现代安全系统依赖于一些问题的计算复杂性，这些问题目前被认为在合理时间内无法解决。</li>\n<li>后果： 如果P=NP，所有依赖于计算复杂性的安全系统将变得不再可靠。需要开发新的基于信息论安全的解决方案，这些方案不依赖于计算复杂性假设。</li>\n</ul>\n<p><strong>替代方案</strong></p>\n<ul>\n<li>信息论安全： 这类安全方案在理论上是无懈可击的，不依赖于计算难题。例如，量子加密（如量子密钥分发）在理论上可以提供无条件的安全性。</li>\n<li>新算法： 研究者需要寻找新的算法和协议，这些算法和协议不依赖于现有的计算难题，可能涉及新的数学和理论基础。<br>\n总结而言，如果P=NP被证明，将需要重新设计和实现现代密码系统，确保数据和通信的安全性。这个过程将是一个巨大的挑战，但也会推动计算机科学和密码学的进步。</li>\n</ul>\n<h3 id=\"专业术语\">专业术语</h3>\n<p>What are the differences between NP, NP-Complete and NP-Hard?</p>\n<ol>\n<li>NP（非确定性多项式时间）：</li>\n</ol>\n<p>NP类问题是指那些可以在多项式时间内由非确定性图灵机（Nondeterministic Turing Machine）解决的问题。<br>\n换句话说，NP问题是那些解可以在多项式时间内验证的问题。<br>\n例如，给定一个数独谜题（Sudoku puzzle）和一个解答，我们可以在多项式时间内验证这个解答是否正确。</p>\n<ol start=\"2\">\n<li>NP完全（NP-Complete）：</li>\n</ol>\n<p>NP完全问题是NP类问题中的一个子集，具有以下两个特性：<br>\n该问题本身是NP问题。<br>\n任何NP问题都可以在多项式时间内归约（转换）为这个问题。<br>\n这意味着，如果我们能够在多项式时间内解决任何一个NP完全问题，那么所有NP问题都可以在多项式时间内解决。<br>\n例如，旅行推销员问题（Traveling Salesman Problem, TSP）是一个经典的NP完全问题。</p>\n<ol start=\"3\">\n<li>NP困难（NP-Hard）：</li>\n</ol>\n<p>NP困难问题是那些至少和NP问题一样难的问题。<br>\n这些问题不一定是NP问题，也就是说，NP困难问题的解不一定能在多项式时间内验证。<br>\n例如，计算一个图的最大团（Maximal Clique）是一个NP困难问题，它不仅是一个很难解决的问题，而且我们也不能在多项式时间内验证其解的正确性。<br>\n<strong>举个例子：</strong><br>\n假设我们有一个物流公司的运输问题：</p>\n<p>NP问题：判断是否存在一种路径，使得运输成本不超过某个给定的预算。验证一条具体的路径是否满足这个条件是可以在多项式时间内完成的，因此这是一个NP问题。</p>\n<p>NP完全问题：在上述运输问题中，找到一条确切的路径，使得运输成本正好等于预算，并且是最短的路径。这可以归约为旅行推销员问题（TSP），所以这是一个NP完全问题。</p>\n<p>NP困难问题：假设这个物流公司想要最优地安排车辆，以最小化所有可能路径的总运输成本，这涉及到图论中的车辆路径问题（Vehicle Routing Problem, VRP），这是一个NP困难问题，因为它不仅难以解决，而且即使找到一个解，也无法在多项式时间内验证其最优性。</p>\n<h3 id=\"问题\">问题</h3>\n<p>In comparing NP-complete and NP-hard, which of the following statements are TRUE?</p>\n<p>i） The theory of NP-completeness provides a method of obtaining a polynomial time for NP algorithms.<br>\nii） All NP-complete problems are NP-Hard.</p>\n","excerpt":"","more":"<h2 id=\"P-NP问题\">P-NP问题</h2>\n<h3 id=\"1-问题解释\">1. 问题解释</h3>\n<hr>\n<p>P-NP问题是计算机科学中的一个著名难题。简单来说，它问的是：所有可以快速验证的答案，是否也可以快速找到？</p>\n<ul>\n<li>P类问题是那些可以用计算机在多项式时间内（即相对较快）解决的问题。</li>\n<li>NP类问题是那些答案可以在多项式时间内验证的问题，但我们不知道是否可以在同样的时间内找到这些答案。</li>\n</ul>\n<p>这个问题之所以重要，是因为如果证明P=NP，那么所有现在认为很难解决的问题都能很快解决。反之，如果P≠NP，那么有些问题是我们无法快速解决的。<strong>换而言之就是当前所使用的这部分体系会被颠覆，需要重构</strong>。</p>\n<h3 id=\"2-解决后果\">2. 解决后果</h3>\n<p>如果P=NP问题得到解决，并证明所有NP问题都可以在多项式时间内解决，将会对多个领域产生深远影响，特别是密码学领域。以下是可能的后果：</p>\n<ol>\n<li>公钥加密</li>\n</ol>\n<ul>\n<li>\n<p>现状： 目前的公钥加密（如RSA和椭圆曲线加密）依赖于一些数学难题（如大整数分解和离散对数问题）的难以解决性。这些问题目前被认为无法在多项式时间内解决，因此被广泛用于保护互联网通信和金融交易的安全。</p>\n</li>\n<li>\n<p>后果： 如果P=NP，那么这些问题可以在多项式时间内解决，从而使得公钥加密方案变得不再安全。任何人都可以在合理的时间内破解这些加密方案，从而可以解密敏感数据和窃取信息。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>对称加密</li>\n</ol>\n<ul>\n<li>现状： 对称加密算法（如AES和3DES）依赖于密钥的难以破解性，目前认为这些算法在没有密钥的情况下很难被破解。</li>\n<li>后果： 如果P=NP，那么找到密钥变得容易，从而破坏对称加密的安全性。攻击者可以在多项式时间内找到正确的密钥，从而解密通信数据。</li>\n</ul>\n<ol start=\"3\">\n<li>加密哈希</li>\n</ol>\n<ul>\n<li>现状： 加密哈希函数（如SHA-256）广泛用于数据完整性验证、数字签名和加密货币（如比特币）。这些哈希函数依赖于找到原像（给定哈希值找到相应输入）的难度。</li>\n<li>后果： 如果P=NP，找到哈希函数的前映像将变得简单，可以在多项式时间内完成，从而破坏加密哈希的安全性。攻击者可以伪造数据、生成冲突，甚至破坏区块链的完整性。</li>\n</ul>\n<ol start=\"4\">\n<li>整体影响</li>\n</ol>\n<ul>\n<li>现状： 现代安全系统依赖于一些问题的计算复杂性，这些问题目前被认为在合理时间内无法解决。</li>\n<li>后果： 如果P=NP，所有依赖于计算复杂性的安全系统将变得不再可靠。需要开发新的基于信息论安全的解决方案，这些方案不依赖于计算复杂性假设。</li>\n</ul>\n<p><strong>替代方案</strong></p>\n<ul>\n<li>信息论安全： 这类安全方案在理论上是无懈可击的，不依赖于计算难题。例如，量子加密（如量子密钥分发）在理论上可以提供无条件的安全性。</li>\n<li>新算法： 研究者需要寻找新的算法和协议，这些算法和协议不依赖于现有的计算难题，可能涉及新的数学和理论基础。<br>\n总结而言，如果P=NP被证明，将需要重新设计和实现现代密码系统，确保数据和通信的安全性。这个过程将是一个巨大的挑战，但也会推动计算机科学和密码学的进步。</li>\n</ul>\n<h3 id=\"专业术语\">专业术语</h3>\n<p>What are the differences between NP, NP-Complete and NP-Hard?</p>\n<ol>\n<li>NP（非确定性多项式时间）：</li>\n</ol>\n<p>NP类问题是指那些可以在多项式时间内由非确定性图灵机（Nondeterministic Turing Machine）解决的问题。<br>\n换句话说，NP问题是那些解可以在多项式时间内验证的问题。<br>\n例如，给定一个数独谜题（Sudoku puzzle）和一个解答，我们可以在多项式时间内验证这个解答是否正确。</p>\n<ol start=\"2\">\n<li>NP完全（NP-Complete）：</li>\n</ol>\n<p>NP完全问题是NP类问题中的一个子集，具有以下两个特性：<br>\n该问题本身是NP问题。<br>\n任何NP问题都可以在多项式时间内归约（转换）为这个问题。<br>\n这意味着，如果我们能够在多项式时间内解决任何一个NP完全问题，那么所有NP问题都可以在多项式时间内解决。<br>\n例如，旅行推销员问题（Traveling Salesman Problem, TSP）是一个经典的NP完全问题。</p>\n<ol start=\"3\">\n<li>NP困难（NP-Hard）：</li>\n</ol>\n<p>NP困难问题是那些至少和NP问题一样难的问题。<br>\n这些问题不一定是NP问题，也就是说，NP困难问题的解不一定能在多项式时间内验证。<br>\n例如，计算一个图的最大团（Maximal Clique）是一个NP困难问题，它不仅是一个很难解决的问题，而且我们也不能在多项式时间内验证其解的正确性。<br>\n<strong>举个例子：</strong><br>\n假设我们有一个物流公司的运输问题：</p>\n<p>NP问题：判断是否存在一种路径，使得运输成本不超过某个给定的预算。验证一条具体的路径是否满足这个条件是可以在多项式时间内完成的，因此这是一个NP问题。</p>\n<p>NP完全问题：在上述运输问题中，找到一条确切的路径，使得运输成本正好等于预算，并且是最短的路径。这可以归约为旅行推销员问题（TSP），所以这是一个NP完全问题。</p>\n<p>NP困难问题：假设这个物流公司想要最优地安排车辆，以最小化所有可能路径的总运输成本，这涉及到图论中的车辆路径问题（Vehicle Routing Problem, VRP），这是一个NP困难问题，因为它不仅难以解决，而且即使找到一个解，也无法在多项式时间内验证其最优性。</p>\n<h3 id=\"问题\">问题</h3>\n<p>In comparing NP-complete and NP-hard, which of the following statements are TRUE?</p>\n<p>i） The theory of NP-completeness provides a method of obtaining a polynomial time for NP algorithms.<br>\nii） All NP-complete problems are NP-Hard.</p>\n"},{"title":"最小生成树·Prim Jarnik algorithm","weight":10,"_content":"\n","source":"_posts/05高级算法/PrimJarnik算法.md","raw":"---\ntitle: 最小生成树·Prim Jarnik algorithm\nweight: 10\n---\n\n","slug":"05高级算法/PrimJarnik算法","published":1,"date":"2024-07-12T10:35:49.512Z","updated":"2024-07-12T10:36:23.243Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqr000jj38a7h6sd9ne","content":"","excerpt":"","more":""},{"title":"图论","_content":"\n## 1. Disconnected Graph (图形不连通 / 断开图)\n\nEnglish: A graph in which there are at least two vertices such that there is no path connecting them.\n中文: 一个图中至少有两个顶点之间没有路径相连。\n\n```\nA---B         E---F\n    |\n    C---D\n```\n\n## 2. Bipartite Graph (二部图 / 二分图)\n`bipartite ［bipartit］; adj. 二深裂的［指叶子］；由双方组成的，两党的，由两党组成的.`\n\nEnglish: A graph whose vertices can be divided into two disjoint and independent sets such that every edge connects a vertex in one set to a vertex in the other set.\n中文: 将顶点分成两类，边只存在不同类的顶点之间，同类顶点之间没有边。\n\n**应用：**\n\n二部图在许多领域的应用中非常常见，包括：\n\n* 最大匹配问题：寻找图中不存在共用顶点的最大边集。\n\n* 婚姻问题：将 n 位女士与 n 位男士配对，使得每位女士都嫁给一位男士，每位男士都娶一位女士。\n\n* 流量网络：表示商品在网络中从源点到汇点的流动。\n\n```\nSet 1: A, C, E\nSet 2: B, D, F\n\n  A--B\n   \\/\n   /\\\n  C--D\n   \\/\n   /\\\n  E--F\n\n```\n\n## 3. Planar Graph (平面图)\n\nEnglish: A graph that can be drawn on a plane without any edges crossing each other.\n中文: 一种图，可以在平面上绘制而`不`出现任何边`交叉`。\n\n```\n    A\n   / \\\n  /   \\\n B-----C\n |     |\n D-----E\n\n```\n\n## 4. Subgraph (子图)\n\nEnglish: A graph formed from a subset of the vertices and edges of another graph.\n中文: 从另一个图的顶点和边的子集中形成的图。（可以没有一些边和点）\n```\nOriginal Graph:\nA---B---C\n|       |\nD---E---F\n\nSubgraph:\nA---B\n|  \nD---E\n\n```\n\n\n## 5. Spanning Subgraph (生成子图)\n`中古高地德語 spān ← 古高地德語 spān (“木屑，削片”) ← 原始日耳曼語 *spēnuz (“碎屑，削片”)。 与古英語 spōn (“木片，碎屑”)同源`\nEnglish: A subgraph that includes all the vertices of the original graph.\n中文: 包含原图所有顶点的子图。（可以没有一些边，但不能少点）\n\n```\nOriginal Graph:\nA---B\n|   |\nC---D---E\n\nSpanning Subgraph:\nA---B\n|  \nC---D---E\n\n```\n\n## 6. Separation edges and separation vertices\n","source":"_posts/05高级算法/图论.md","raw":"---\ntitle: 图论\n---\n\n## 1. Disconnected Graph (图形不连通 / 断开图)\n\nEnglish: A graph in which there are at least two vertices such that there is no path connecting them.\n中文: 一个图中至少有两个顶点之间没有路径相连。\n\n```\nA---B         E---F\n    |\n    C---D\n```\n\n## 2. Bipartite Graph (二部图 / 二分图)\n`bipartite ［bipartit］; adj. 二深裂的［指叶子］；由双方组成的，两党的，由两党组成的.`\n\nEnglish: A graph whose vertices can be divided into two disjoint and independent sets such that every edge connects a vertex in one set to a vertex in the other set.\n中文: 将顶点分成两类，边只存在不同类的顶点之间，同类顶点之间没有边。\n\n**应用：**\n\n二部图在许多领域的应用中非常常见，包括：\n\n* 最大匹配问题：寻找图中不存在共用顶点的最大边集。\n\n* 婚姻问题：将 n 位女士与 n 位男士配对，使得每位女士都嫁给一位男士，每位男士都娶一位女士。\n\n* 流量网络：表示商品在网络中从源点到汇点的流动。\n\n```\nSet 1: A, C, E\nSet 2: B, D, F\n\n  A--B\n   \\/\n   /\\\n  C--D\n   \\/\n   /\\\n  E--F\n\n```\n\n## 3. Planar Graph (平面图)\n\nEnglish: A graph that can be drawn on a plane without any edges crossing each other.\n中文: 一种图，可以在平面上绘制而`不`出现任何边`交叉`。\n\n```\n    A\n   / \\\n  /   \\\n B-----C\n |     |\n D-----E\n\n```\n\n## 4. Subgraph (子图)\n\nEnglish: A graph formed from a subset of the vertices and edges of another graph.\n中文: 从另一个图的顶点和边的子集中形成的图。（可以没有一些边和点）\n```\nOriginal Graph:\nA---B---C\n|       |\nD---E---F\n\nSubgraph:\nA---B\n|  \nD---E\n\n```\n\n\n## 5. Spanning Subgraph (生成子图)\n`中古高地德語 spān ← 古高地德語 spān (“木屑，削片”) ← 原始日耳曼語 *spēnuz (“碎屑，削片”)。 与古英語 spōn (“木片，碎屑”)同源`\nEnglish: A subgraph that includes all the vertices of the original graph.\n中文: 包含原图所有顶点的子图。（可以没有一些边，但不能少点）\n\n```\nOriginal Graph:\nA---B\n|   |\nC---D---E\n\nSpanning Subgraph:\nA---B\n|  \nC---D---E\n\n```\n\n## 6. Separation edges and separation vertices\n","slug":"05高级算法/图论","published":1,"date":"2024-07-10T08:14:31.325Z","updated":"2024-07-12T08:49:14.489Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqs000kj38afues3mit","content":"<h2 id=\"1-Disconnected-Graph-图形不连通-断开图\">1. Disconnected Graph (图形不连通 / 断开图)</h2>\n<p>English: A graph in which there are at least two vertices such that there is no path connecting them.<br>\n中文: 一个图中至少有两个顶点之间没有路径相连。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A---B         E---F</span><br><span class=\"line\">    |</span><br><span class=\"line\">    C---D</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Bipartite-Graph-二部图-二分图\">2. Bipartite Graph (二部图 / 二分图)</h2>\n<p><code>bipartite ［bipartit］; adj. 二深裂的［指叶子］；由双方组成的，两党的，由两党组成的.</code></p>\n<p>English: A graph whose vertices can be divided into two disjoint and independent sets such that every edge connects a vertex in one set to a vertex in the other set.<br>\n中文: 将顶点分成两类，边只存在不同类的顶点之间，同类顶点之间没有边。</p>\n<p><strong>应用：</strong></p>\n<p>二部图在许多领域的应用中非常常见，包括：</p>\n<ul>\n<li>\n<p>最大匹配问题：寻找图中不存在共用顶点的最大边集。</p>\n</li>\n<li>\n<p>婚姻问题：将 n 位女士与 n 位男士配对，使得每位女士都嫁给一位男士，每位男士都娶一位女士。</p>\n</li>\n<li>\n<p>流量网络：表示商品在网络中从源点到汇点的流动。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set 1: A, C, E</span><br><span class=\"line\">Set 2: B, D, F</span><br><span class=\"line\"></span><br><span class=\"line\">  A--B</span><br><span class=\"line\">   \\/</span><br><span class=\"line\">   /\\</span><br><span class=\"line\">  C--D</span><br><span class=\"line\">   \\/</span><br><span class=\"line\">   /\\</span><br><span class=\"line\">  E--F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Planar-Graph-平面图\">3. Planar Graph (平面图)</h2>\n<p>English: A graph that can be drawn on a plane without any edges crossing each other.<br>\n中文: 一种图，可以在平面上绘制而<code>不</code>出现任何边<code>交叉</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   A</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> /   \\</span><br><span class=\"line\">B-----C</span><br><span class=\"line\">|     |</span><br><span class=\"line\">D-----E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Subgraph-子图\">4. Subgraph (子图)</h2>\n<p>English: A graph formed from a subset of the vertices and edges of another graph.<br>\n中文: 从另一个图的顶点和边的子集中形成的图。（可以没有一些边和点）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Original Graph:</span><br><span class=\"line\">A---B---C</span><br><span class=\"line\">|       |</span><br><span class=\"line\">D---E---F</span><br><span class=\"line\"></span><br><span class=\"line\">Subgraph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|  </span><br><span class=\"line\">D---E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Spanning-Subgraph-生成子图\">5. Spanning Subgraph (生成子图)</h2>\n<p><code>中古高地德語 spān ← 古高地德語 spān (“木屑，削片”) ← 原始日耳曼語 *spēnuz (“碎屑，削片”)。 与古英語 spōn (“木片，碎屑”)同源</code><br>\nEnglish: A subgraph that includes all the vertices of the original graph.<br>\n中文: 包含原图所有顶点的子图。（可以没有一些边，但不能少点）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Original Graph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|   |</span><br><span class=\"line\">C---D---E</span><br><span class=\"line\"></span><br><span class=\"line\">Spanning Subgraph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|  </span><br><span class=\"line\">C---D---E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-Separation-edges-and-separation-vertices\">6. Separation edges and separation vertices</h2>\n","excerpt":"","more":"<h2 id=\"1-Disconnected-Graph-图形不连通-断开图\">1. Disconnected Graph (图形不连通 / 断开图)</h2>\n<p>English: A graph in which there are at least two vertices such that there is no path connecting them.<br>\n中文: 一个图中至少有两个顶点之间没有路径相连。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A---B         E---F</span><br><span class=\"line\">    |</span><br><span class=\"line\">    C---D</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Bipartite-Graph-二部图-二分图\">2. Bipartite Graph (二部图 / 二分图)</h2>\n<p><code>bipartite ［bipartit］; adj. 二深裂的［指叶子］；由双方组成的，两党的，由两党组成的.</code></p>\n<p>English: A graph whose vertices can be divided into two disjoint and independent sets such that every edge connects a vertex in one set to a vertex in the other set.<br>\n中文: 将顶点分成两类，边只存在不同类的顶点之间，同类顶点之间没有边。</p>\n<p><strong>应用：</strong></p>\n<p>二部图在许多领域的应用中非常常见，包括：</p>\n<ul>\n<li>\n<p>最大匹配问题：寻找图中不存在共用顶点的最大边集。</p>\n</li>\n<li>\n<p>婚姻问题：将 n 位女士与 n 位男士配对，使得每位女士都嫁给一位男士，每位男士都娶一位女士。</p>\n</li>\n<li>\n<p>流量网络：表示商品在网络中从源点到汇点的流动。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set 1: A, C, E</span><br><span class=\"line\">Set 2: B, D, F</span><br><span class=\"line\"></span><br><span class=\"line\">  A--B</span><br><span class=\"line\">   \\/</span><br><span class=\"line\">   /\\</span><br><span class=\"line\">  C--D</span><br><span class=\"line\">   \\/</span><br><span class=\"line\">   /\\</span><br><span class=\"line\">  E--F</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Planar-Graph-平面图\">3. Planar Graph (平面图)</h2>\n<p>English: A graph that can be drawn on a plane without any edges crossing each other.<br>\n中文: 一种图，可以在平面上绘制而<code>不</code>出现任何边<code>交叉</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   A</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> /   \\</span><br><span class=\"line\">B-----C</span><br><span class=\"line\">|     |</span><br><span class=\"line\">D-----E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Subgraph-子图\">4. Subgraph (子图)</h2>\n<p>English: A graph formed from a subset of the vertices and edges of another graph.<br>\n中文: 从另一个图的顶点和边的子集中形成的图。（可以没有一些边和点）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Original Graph:</span><br><span class=\"line\">A---B---C</span><br><span class=\"line\">|       |</span><br><span class=\"line\">D---E---F</span><br><span class=\"line\"></span><br><span class=\"line\">Subgraph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|  </span><br><span class=\"line\">D---E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Spanning-Subgraph-生成子图\">5. Spanning Subgraph (生成子图)</h2>\n<p><code>中古高地德語 spān ← 古高地德語 spān (“木屑，削片”) ← 原始日耳曼語 *spēnuz (“碎屑，削片”)。 与古英語 spōn (“木片，碎屑”)同源</code><br>\nEnglish: A subgraph that includes all the vertices of the original graph.<br>\n中文: 包含原图所有顶点的子图。（可以没有一些边，但不能少点）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Original Graph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|   |</span><br><span class=\"line\">C---D---E</span><br><span class=\"line\"></span><br><span class=\"line\">Spanning Subgraph:</span><br><span class=\"line\">A---B</span><br><span class=\"line\">|  </span><br><span class=\"line\">C---D---E</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-Separation-edges-and-separation-vertices\">6. Separation edges and separation vertices</h2>\n"},{"_content":"## Stack\n\n### 特点：\n- LIFO（Last In, First Out）：最后进来的元素最先被处理。\n- 常用操作：push（入栈）、pop（出栈）、peek（查看栈顶元素）。\n\n### 性能：\n- 入栈（push）和出栈（pop）：时间复杂度为 O(1)。\n- 空间复杂度：与存储的元素数量成正比，为 O(n)。\n\n### 优势：\n- 操作简单，适用于需要后进先出（LIFO）策略的场景，如函数调用栈、表达式求值等。\n- 内存使用效率高。\n\n### 劣势：\n- 访问非栈顶元素效率低，需要遍历。\n\n## Queue\n\n### 特点：\n- FIFO（First In, First Out）：最先进来的元素最先被处理。\n- 常用操作：enqueue（入队）、dequeue（出队）、peek（查看队首元素）。\n\n### 性能：\n- 入队（enqueue）和出队（dequeue）：时间复杂度为 O(1)（使用链表或循环数组实现时）。\n- 空间复杂度：与存储的元素数量成正比，为 O(n)。\n\n### 优势：\n- 适用于需要先进先出（FIFO）策略的场景，如任务调度、缓冲区管理等。\n- 操作简单，入队和出队操作效率高。\n\n### 劣势：\n- 访问非队首元素效率低，需要遍历。\n\n## PriorityQueue\n\n### 特点：\n- 元素按照优先级顺序进行出队，优先级高的元素先出队。\n- 常用操作：insert（插入元素）、remove（移除元素）、peek（查看优先级最高的元素）。\n\n### 性能：\n- 插入（insert）：时间复杂度为 O(log n)（使用二叉堆实现时）。\n- 删除（remove）：时间复杂度为 O(log n)（删除优先级最高的元素）。\n- 查看优先级最高元素（peek）：时间复杂度为 O(1)。\n\n### 优势：\n- 适用于需要动态管理元素优先级的场景，如任务调度、路径规划（如Dijkstra算法）、事件驱动模拟等。\n- 可以快速获取和删除优先级最高的元素。\n\n### 劣势：\n- 插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。\n- 需要维护优先级，内存开销可能较大。\n\n## 总结\n\n- Stack：适用于需要 LIFO 策略的场景，入栈和出栈操作效率高（O(1)），但访问非栈顶元素效率低。\n- Queue：适用于需要 FIFO 策略的场景，入队和出队操作效率高（O(1)），但访问非队首元素效率低。\n- PriorityQueue：适用于需要根据优先级动态管理元素的场景，可以快速获取和删除优先级最高的元素（O(log n)），但插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。\n","source":"_posts/05高级算法/队栈.md","raw":"## Stack\n\n### 特点：\n- LIFO（Last In, First Out）：最后进来的元素最先被处理。\n- 常用操作：push（入栈）、pop（出栈）、peek（查看栈顶元素）。\n\n### 性能：\n- 入栈（push）和出栈（pop）：时间复杂度为 O(1)。\n- 空间复杂度：与存储的元素数量成正比，为 O(n)。\n\n### 优势：\n- 操作简单，适用于需要后进先出（LIFO）策略的场景，如函数调用栈、表达式求值等。\n- 内存使用效率高。\n\n### 劣势：\n- 访问非栈顶元素效率低，需要遍历。\n\n## Queue\n\n### 特点：\n- FIFO（First In, First Out）：最先进来的元素最先被处理。\n- 常用操作：enqueue（入队）、dequeue（出队）、peek（查看队首元素）。\n\n### 性能：\n- 入队（enqueue）和出队（dequeue）：时间复杂度为 O(1)（使用链表或循环数组实现时）。\n- 空间复杂度：与存储的元素数量成正比，为 O(n)。\n\n### 优势：\n- 适用于需要先进先出（FIFO）策略的场景，如任务调度、缓冲区管理等。\n- 操作简单，入队和出队操作效率高。\n\n### 劣势：\n- 访问非队首元素效率低，需要遍历。\n\n## PriorityQueue\n\n### 特点：\n- 元素按照优先级顺序进行出队，优先级高的元素先出队。\n- 常用操作：insert（插入元素）、remove（移除元素）、peek（查看优先级最高的元素）。\n\n### 性能：\n- 插入（insert）：时间复杂度为 O(log n)（使用二叉堆实现时）。\n- 删除（remove）：时间复杂度为 O(log n)（删除优先级最高的元素）。\n- 查看优先级最高元素（peek）：时间复杂度为 O(1)。\n\n### 优势：\n- 适用于需要动态管理元素优先级的场景，如任务调度、路径规划（如Dijkstra算法）、事件驱动模拟等。\n- 可以快速获取和删除优先级最高的元素。\n\n### 劣势：\n- 插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。\n- 需要维护优先级，内存开销可能较大。\n\n## 总结\n\n- Stack：适用于需要 LIFO 策略的场景，入栈和出栈操作效率高（O(1)），但访问非栈顶元素效率低。\n- Queue：适用于需要 FIFO 策略的场景，入队和出队操作效率高（O(1)），但访问非队首元素效率低。\n- PriorityQueue：适用于需要根据优先级动态管理元素的场景，可以快速获取和删除优先级最高的元素（O(log n)），但插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。\n","slug":"05高级算法/队栈","published":1,"date":"2024-07-12T08:30:12.525Z","updated":"2024-07-12T08:38:38.483Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqs000lj38a86ha7z6t","content":"<h2 id=\"Stack\">Stack</h2>\n<h3 id=\"特点：\">特点：</h3>\n<ul>\n<li>LIFO（Last In, First Out）：最后进来的元素最先被处理。</li>\n<li>常用操作：push（入栈）、pop（出栈）、peek（查看栈顶元素）。</li>\n</ul>\n<h3 id=\"性能：\">性能：</h3>\n<ul>\n<li>入栈（push）和出栈（pop）：时间复杂度为 O(1)。</li>\n<li>空间复杂度：与存储的元素数量成正比，为 O(n)。</li>\n</ul>\n<h3 id=\"优势：\">优势：</h3>\n<ul>\n<li>操作简单，适用于需要后进先出（LIFO）策略的场景，如函数调用栈、表达式求值等。</li>\n<li>内存使用效率高。</li>\n</ul>\n<h3 id=\"劣势：\">劣势：</h3>\n<ul>\n<li>访问非栈顶元素效率低，需要遍历。</li>\n</ul>\n<h2 id=\"Queue\">Queue</h2>\n<h3 id=\"特点：-2\">特点：</h3>\n<ul>\n<li>FIFO（First In, First Out）：最先进来的元素最先被处理。</li>\n<li>常用操作：enqueue（入队）、dequeue（出队）、peek（查看队首元素）。</li>\n</ul>\n<h3 id=\"性能：-2\">性能：</h3>\n<ul>\n<li>入队（enqueue）和出队（dequeue）：时间复杂度为 O(1)（使用链表或循环数组实现时）。</li>\n<li>空间复杂度：与存储的元素数量成正比，为 O(n)。</li>\n</ul>\n<h3 id=\"优势：-2\">优势：</h3>\n<ul>\n<li>适用于需要先进先出（FIFO）策略的场景，如任务调度、缓冲区管理等。</li>\n<li>操作简单，入队和出队操作效率高。</li>\n</ul>\n<h3 id=\"劣势：-2\">劣势：</h3>\n<ul>\n<li>访问非队首元素效率低，需要遍历。</li>\n</ul>\n<h2 id=\"PriorityQueue\">PriorityQueue</h2>\n<h3 id=\"特点：-3\">特点：</h3>\n<ul>\n<li>元素按照优先级顺序进行出队，优先级高的元素先出队。</li>\n<li>常用操作：insert（插入元素）、remove（移除元素）、peek（查看优先级最高的元素）。</li>\n</ul>\n<h3 id=\"性能：-3\">性能：</h3>\n<ul>\n<li>插入（insert）：时间复杂度为 O(log n)（使用二叉堆实现时）。</li>\n<li>删除（remove）：时间复杂度为 O(log n)（删除优先级最高的元素）。</li>\n<li>查看优先级最高元素（peek）：时间复杂度为 O(1)。</li>\n</ul>\n<h3 id=\"优势：-3\">优势：</h3>\n<ul>\n<li>适用于需要动态管理元素优先级的场景，如任务调度、路径规划（如Dijkstra算法）、事件驱动模拟等。</li>\n<li>可以快速获取和删除优先级最高的元素。</li>\n</ul>\n<h3 id=\"劣势：-3\">劣势：</h3>\n<ul>\n<li>插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。</li>\n<li>需要维护优先级，内存开销可能较大。</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<ul>\n<li>Stack：适用于需要 LIFO 策略的场景，入栈和出栈操作效率高（O(1)），但访问非栈顶元素效率低。</li>\n<li>Queue：适用于需要 FIFO 策略的场景，入队和出队操作效率高（O(1)），但访问非队首元素效率低。</li>\n<li>PriorityQueue：适用于需要根据优先级动态管理元素的场景，可以快速获取和删除优先级最高的元素（O(log n)），但插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Stack\">Stack</h2>\n<h3 id=\"特点：\">特点：</h3>\n<ul>\n<li>LIFO（Last In, First Out）：最后进来的元素最先被处理。</li>\n<li>常用操作：push（入栈）、pop（出栈）、peek（查看栈顶元素）。</li>\n</ul>\n<h3 id=\"性能：\">性能：</h3>\n<ul>\n<li>入栈（push）和出栈（pop）：时间复杂度为 O(1)。</li>\n<li>空间复杂度：与存储的元素数量成正比，为 O(n)。</li>\n</ul>\n<h3 id=\"优势：\">优势：</h3>\n<ul>\n<li>操作简单，适用于需要后进先出（LIFO）策略的场景，如函数调用栈、表达式求值等。</li>\n<li>内存使用效率高。</li>\n</ul>\n<h3 id=\"劣势：\">劣势：</h3>\n<ul>\n<li>访问非栈顶元素效率低，需要遍历。</li>\n</ul>\n<h2 id=\"Queue\">Queue</h2>\n<h3 id=\"特点：-2\">特点：</h3>\n<ul>\n<li>FIFO（First In, First Out）：最先进来的元素最先被处理。</li>\n<li>常用操作：enqueue（入队）、dequeue（出队）、peek（查看队首元素）。</li>\n</ul>\n<h3 id=\"性能：-2\">性能：</h3>\n<ul>\n<li>入队（enqueue）和出队（dequeue）：时间复杂度为 O(1)（使用链表或循环数组实现时）。</li>\n<li>空间复杂度：与存储的元素数量成正比，为 O(n)。</li>\n</ul>\n<h3 id=\"优势：-2\">优势：</h3>\n<ul>\n<li>适用于需要先进先出（FIFO）策略的场景，如任务调度、缓冲区管理等。</li>\n<li>操作简单，入队和出队操作效率高。</li>\n</ul>\n<h3 id=\"劣势：-2\">劣势：</h3>\n<ul>\n<li>访问非队首元素效率低，需要遍历。</li>\n</ul>\n<h2 id=\"PriorityQueue\">PriorityQueue</h2>\n<h3 id=\"特点：-3\">特点：</h3>\n<ul>\n<li>元素按照优先级顺序进行出队，优先级高的元素先出队。</li>\n<li>常用操作：insert（插入元素）、remove（移除元素）、peek（查看优先级最高的元素）。</li>\n</ul>\n<h3 id=\"性能：-3\">性能：</h3>\n<ul>\n<li>插入（insert）：时间复杂度为 O(log n)（使用二叉堆实现时）。</li>\n<li>删除（remove）：时间复杂度为 O(log n)（删除优先级最高的元素）。</li>\n<li>查看优先级最高元素（peek）：时间复杂度为 O(1)。</li>\n</ul>\n<h3 id=\"优势：-3\">优势：</h3>\n<ul>\n<li>适用于需要动态管理元素优先级的场景，如任务调度、路径规划（如Dijkstra算法）、事件驱动模拟等。</li>\n<li>可以快速获取和删除优先级最高的元素。</li>\n</ul>\n<h3 id=\"劣势：-3\">劣势：</h3>\n<ul>\n<li>插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。</li>\n<li>需要维护优先级，内存开销可能较大。</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<ul>\n<li>Stack：适用于需要 LIFO 策略的场景，入栈和出栈操作效率高（O(1)），但访问非栈顶元素效率低。</li>\n<li>Queue：适用于需要 FIFO 策略的场景，入队和出队操作效率高（O(1)），但访问非队首元素效率低。</li>\n<li>PriorityQueue：适用于需要根据优先级动态管理元素的场景，可以快速获取和删除优先级最高的元素（O(log n)），但插入和删除操作比 Stack 和 Queue 要复杂，时间复杂度较高。</li>\n</ul>\n"},{"title":"高级算法目录","_content":"## 高级算法目录\n```\nGraph Theory (BFS, DFS, Biconnectivity)\nShortest Path (Djikstra, Bellman, DAG, All-pairs)\nPattern Matchings (KMP, Bayers Moore)\n```\n### 1.1. BFS (Breadth-First Search)\n\n广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。\n\n**实现步骤：**\n1. 创建一个空队列 `queue` 和一个空集合 `visited`。\n2. 将起始节点放入队列和访问集合中。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中的节点，将其标记为已访问。\n   - 将所有未访问过的邻居节点加入队列和访问集合。\n\n\n### 1.2. DFS (Depth-First Search)\n\n深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。\n\n**实现步骤：**\n1. 创建一个空集合 `visited` 来记录访问过的节点。\n2. 从起始节点开始调用递归函数 `dfs`：\n   - 将当前节点标记为已访问。\n   - 对于当前节点的每个未访问的邻居节点，递归调用 `dfs` 函数。\n\n## 2. Shortest Path Algorithms\n\n\n### 2.1. Dijkstra\n\nDijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。\n\n**实现步骤：**\n1. 创建一个优先队列 `pq` 和距离字典 `distances`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 将起始节点和距离 0 放入队列。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中距离最小的节点。\n   - 对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。\n\n---\n\n### 2.2. Bellman-Ford\n\nBellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。\n\n**实现步骤：**\n1. 创建距离字典 `distance`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 进行 |V|-1 次迭代，每次迭代遍历所有边：\n   - 对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。\n3. 再次遍历所有边，检查是否存在负权环。\n\n## 3. Pattern Matching Algorithms\n\n\n### 3.1. KMP (Knuth-Morris-Pratt)\n\nKMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。\n\n**实现步骤：**\n1. 构建部分匹配表 `lps`，用于指示在匹配失败时模式串应移动的位置。\n2. 使用两个指针 i 和 j 分别遍历文本和模式串：\n   - 如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。\n   - 如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。\n   - 如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。\n\n\n\n### 3.2. Boyer-Moore\n\nBoyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。\n\n**实现步骤：**\n1. 构建字符到最后出现位置的映射表 `last`。\n2. 使用两个指针 s 和 j 分别遍历文本和模式串：\n   - 从右向左比较模式串和文本，当匹配失败时根据 `last` 表跳过一定的字符。\n   - 如果完全匹配，记录匹配的起始位置并移动 s。\n   - 如果部分匹配但未完全匹配，根据 `last` 表调整 j 的位置。\n\n这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。\n","source":"_posts/05高级算法/高级算法目录.md","raw":"---\ntitle: 高级算法目录\n---\n## 高级算法目录\n```\nGraph Theory (BFS, DFS, Biconnectivity)\nShortest Path (Djikstra, Bellman, DAG, All-pairs)\nPattern Matchings (KMP, Bayers Moore)\n```\n### 1.1. BFS (Breadth-First Search)\n\n广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。\n\n**实现步骤：**\n1. 创建一个空队列 `queue` 和一个空集合 `visited`。\n2. 将起始节点放入队列和访问集合中。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中的节点，将其标记为已访问。\n   - 将所有未访问过的邻居节点加入队列和访问集合。\n\n\n### 1.2. DFS (Depth-First Search)\n\n深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。\n\n**实现步骤：**\n1. 创建一个空集合 `visited` 来记录访问过的节点。\n2. 从起始节点开始调用递归函数 `dfs`：\n   - 将当前节点标记为已访问。\n   - 对于当前节点的每个未访问的邻居节点，递归调用 `dfs` 函数。\n\n## 2. Shortest Path Algorithms\n\n\n### 2.1. Dijkstra\n\nDijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。\n\n**实现步骤：**\n1. 创建一个优先队列 `pq` 和距离字典 `distances`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 将起始节点和距离 0 放入队列。\n3. 当队列不为空时，重复以下步骤：\n   - 弹出队列中距离最小的节点。\n   - 对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。\n\n---\n\n### 2.2. Bellman-Ford\n\nBellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。\n\n**实现步骤：**\n1. 创建距离字典 `distance`，初始化起始节点的距离为 0，其余节点为无穷大。\n2. 进行 |V|-1 次迭代，每次迭代遍历所有边：\n   - 对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。\n3. 再次遍历所有边，检查是否存在负权环。\n\n## 3. Pattern Matching Algorithms\n\n\n### 3.1. KMP (Knuth-Morris-Pratt)\n\nKMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。\n\n**实现步骤：**\n1. 构建部分匹配表 `lps`，用于指示在匹配失败时模式串应移动的位置。\n2. 使用两个指针 i 和 j 分别遍历文本和模式串：\n   - 如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。\n   - 如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。\n   - 如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。\n\n\n\n### 3.2. Boyer-Moore\n\nBoyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。\n\n**实现步骤：**\n1. 构建字符到最后出现位置的映射表 `last`。\n2. 使用两个指针 s 和 j 分别遍历文本和模式串：\n   - 从右向左比较模式串和文本，当匹配失败时根据 `last` 表跳过一定的字符。\n   - 如果完全匹配，记录匹配的起始位置并移动 s。\n   - 如果部分匹配但未完全匹配，根据 `last` 表调整 j 的位置。\n\n这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。\n","slug":"05高级算法/高级算法目录","published":1,"date":"2024-07-10T10:07:16.811Z","updated":"2024-07-10T10:08:51.419Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqv000mj38a6gile2w2","content":"<h2 id=\"高级算法目录\">高级算法目录</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Graph Theory (BFS, DFS, Biconnectivity)</span><br><span class=\"line\">Shortest Path (Djikstra, Bellman, DAG, All-pairs)</span><br><span class=\"line\">Pattern Matchings (KMP, Bayers Moore)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-BFS-Breadth-First-Search\">1.1. BFS (Breadth-First Search)</h3>\n<p>广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空队列 <code>queue</code> 和一个空集合 <code>visited</code>。</li>\n<li>将起始节点放入队列和访问集合中。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中的节点，将其标记为已访问。</li>\n<li>将所有未访问过的邻居节点加入队列和访问集合。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-2-DFS-Depth-First-Search\">1.2. DFS (Depth-First Search)</h3>\n<p>深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空集合 <code>visited</code> 来记录访问过的节点。</li>\n<li>从起始节点开始调用递归函数 <code>dfs</code>：\n<ul>\n<li>将当前节点标记为已访问。</li>\n<li>对于当前节点的每个未访问的邻居节点，递归调用 <code>dfs</code> 函数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-Shortest-Path-Algorithms\">2. Shortest Path Algorithms</h2>\n<h3 id=\"2-1-Dijkstra\">2.1. Dijkstra</h3>\n<p>Dijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个优先队列 <code>pq</code> 和距离字典 <code>distances</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>将起始节点和距离 0 放入队列。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中距离最小的节点。</li>\n<li>对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-Bellman-Ford\">2.2. Bellman-Ford</h3>\n<p>Bellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建距离字典 <code>distance</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>进行 |V|-1 次迭代，每次迭代遍历所有边：\n<ul>\n<li>对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。</li>\n</ul>\n</li>\n<li>再次遍历所有边，检查是否存在负权环。</li>\n</ol>\n<h2 id=\"3-Pattern-Matching-Algorithms\">3. Pattern Matching Algorithms</h2>\n<h3 id=\"3-1-KMP-Knuth-Morris-Pratt\">3.1. KMP (Knuth-Morris-Pratt)</h3>\n<p>KMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建部分匹配表 <code>lps</code>，用于指示在匹配失败时模式串应移动的位置。</li>\n<li>使用两个指针 i 和 j 分别遍历文本和模式串：\n<ul>\n<li>如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。</li>\n<li>如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。</li>\n<li>如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-Boyer-Moore\">3.2. Boyer-Moore</h3>\n<p>Boyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建字符到最后出现位置的映射表 <code>last</code>。</li>\n<li>使用两个指针 s 和 j 分别遍历文本和模式串：\n<ul>\n<li>从右向左比较模式串和文本，当匹配失败时根据 <code>last</code> 表跳过一定的字符。</li>\n<li>如果完全匹配，记录匹配的起始位置并移动 s。</li>\n<li>如果部分匹配但未完全匹配，根据 <code>last</code> 表调整 j 的位置。</li>\n</ul>\n</li>\n</ol>\n<p>这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。</p>\n","excerpt":"","more":"<h2 id=\"高级算法目录\">高级算法目录</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Graph Theory (BFS, DFS, Biconnectivity)</span><br><span class=\"line\">Shortest Path (Djikstra, Bellman, DAG, All-pairs)</span><br><span class=\"line\">Pattern Matchings (KMP, Bayers Moore)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-BFS-Breadth-First-Search\">1.1. BFS (Breadth-First Search)</h3>\n<p>广度优先搜索（BFS）是一种图搜索算法，从起始节点开始，逐层向外扩展，访问所有相邻节点。BFS 使用队列来跟踪要访问的节点顺序，适用于寻找最短路径（在无权图中）和检测图的连通性。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空队列 <code>queue</code> 和一个空集合 <code>visited</code>。</li>\n<li>将起始节点放入队列和访问集合中。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中的节点，将其标记为已访问。</li>\n<li>将所有未访问过的邻居节点加入队列和访问集合。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-2-DFS-Depth-First-Search\">1.2. DFS (Depth-First Search)</h3>\n<p>深度优先搜索（DFS）是一种图搜索算法，从起始节点开始，沿着一个分支深入，直到不能继续为止，然后回溯并继续搜索未访问的节点。DFS 使用栈来实现递归，适用于检测环、拓扑排序等。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个空集合 <code>visited</code> 来记录访问过的节点。</li>\n<li>从起始节点开始调用递归函数 <code>dfs</code>：\n<ul>\n<li>将当前节点标记为已访问。</li>\n<li>对于当前节点的每个未访问的邻居节点，递归调用 <code>dfs</code> 函数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-Shortest-Path-Algorithms\">2. Shortest Path Algorithms</h2>\n<h3 id=\"2-1-Dijkstra\">2.1. Dijkstra</h3>\n<p>Dijkstra 算法用于计算单源最短路径，适用于边权重非负的图。它使用优先队列来选择当前最短路径的节点，逐步更新其邻居的最短路径。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建一个优先队列 <code>pq</code> 和距离字典 <code>distances</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>将起始节点和距离 0 放入队列。</li>\n<li>当队列不为空时，重复以下步骤：\n<ul>\n<li>弹出队列中距离最小的节点。</li>\n<li>对于该节点的每个邻居节点，如果通过当前节点到达该邻居节点的路径距离更短，则更新距离并将其加入队列。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"2-2-Bellman-Ford\">2.2. Bellman-Ford</h3>\n<p>Bellman-Ford 算法用于计算单源最短路径，适用于包含负权边的图。它通过反复松弛所有边，更新最短路径，最多进行 |V|-1 次迭代。它还能检测负权环。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>创建距离字典 <code>distance</code>，初始化起始节点的距离为 0，其余节点为无穷大。</li>\n<li>进行 |V|-1 次迭代，每次迭代遍历所有边：\n<ul>\n<li>对于每条边 (u, v) 权重为 w，如果通过节点 u 到节点 v 的路径距离更短，则更新距离。</li>\n</ul>\n</li>\n<li>再次遍历所有边，检查是否存在负权环。</li>\n</ol>\n<h2 id=\"3-Pattern-Matching-Algorithms\">3. Pattern Matching Algorithms</h2>\n<h3 id=\"3-1-KMP-Knuth-Morris-Pratt\">3.1. KMP (Knuth-Morris-Pratt)</h3>\n<p>KMP 算法用于字符串模式匹配，通过预处理模式串构建部分匹配表，从而在匹配过程中避免重复扫描文本。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建部分匹配表 <code>lps</code>，用于指示在匹配失败时模式串应移动的位置。</li>\n<li>使用两个指针 i 和 j 分别遍历文本和模式串：\n<ul>\n<li>如果匹配成功（text[i] == pattern[j]），则同时向前移动 i 和 j。</li>\n<li>如果 j 达到模式串末尾，说明找到了匹配，记录匹配的起始位置。</li>\n<li>如果匹配失败（text[i] != pattern[j]），根据部分匹配表移动模式串的位置 j。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-Boyer-Moore\">3.2. Boyer-Moore</h3>\n<p>Boyer-Moore 算法是另一种字符串模式匹配算法，通过从右向左匹配和使用跳跃表显著减少比较次数，提高匹配效率。</p>\n<p><strong>实现步骤：</strong></p>\n<ol>\n<li>构建字符到最后出现位置的映射表 <code>last</code>。</li>\n<li>使用两个指针 s 和 j 分别遍历文本和模式串：\n<ul>\n<li>从右向左比较模式串和文本，当匹配失败时根据 <code>last</code> 表跳过一定的字符。</li>\n<li>如果完全匹配，记录匹配的起始位置并移动 s。</li>\n<li>如果部分匹配但未完全匹配，根据 <code>last</code> 表调整 j 的位置。</li>\n</ul>\n</li>\n</ol>\n<p>这些算法在图论、路径查找和字符串模式匹配领域中具有重要应用，能够有效解决各种复杂问题。</p>\n"},{"_content":"## 虚拟化ESXi、KVM对比\n\n### 1. 官方介绍\n\n```shell\n全虚拟化（Full Virtualization）：完全模拟底层硬件，虚拟机无法感知自己运行在虚拟化环境中，因此虚拟机可以运行未经修改的操作系统和应用程序。这种虚拟化技术的代表是 VMware。\n半虚拟化（Paravirtualization）：虚拟机知道自己运行在虚拟化环境中，虚拟机操作系统需要进行修改以便能够与虚拟化层进行通信，因此半虚拟化技术要求操作系统需要支持半虚拟化接口。这种虚拟化技术的代表是 Xen。\n操作系统虚拟化（Operating  System  Virtualization）：也称为容器化，是指通过对操作系统进行虚拟化来实现多个操作系统实例之间的隔离。每个容器都运行在主机操作系统的用户空间中，共享主机操作系统的内核。这种虚拟化技术的代表是  Docker。\n硬件辅助虚拟化（Hardware-assisted Virtualization）：是指利用CPU和主板的硬件虚拟化扩展实现虚拟化，这样可以提高虚拟化的性能。这种虚拟化技术的代表是 KVM。\n无虚拟化（Bare Metal）虚拟化，它不需要虚拟化层，直接在裸机上运行虚拟机，能够提供更高的性能和更好的资源利用率，但需要硬件支持。\n```\n\nEXSi：商业版\n\n- https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html\n- https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\n- 报价（基础版1,394.00 美元/三年）：[vSphere Landing Page | VMware](https://store-us.vmware.com/products/data-center-virtualization-cloud-infrastructure.html)\n\nKVM：基于内核的虚拟机 (KVM)\n\n- PVE：https://www.proxmox.com/en/proxmox-ve/featurs\n\nXenserver免费与付费区别\n\n  [XenServer学习笔记二 XenServer免费版本和收费版本的区别_51CTO博客_xenserver免费版和收费版区别](https://blog.51cto.com/shenhj/420500)\n  在线迁移的XenMotion、虚拟机磁盘快照和自动恢复、XenCenter管理软件和虚拟机转化工具软件\n\n### 2. 虚拟化功能\n\n- Multi Server Management with XenCenter GUI：多服务器图形化管理\n- Active Directory Integration：AD域集成\n- Dynamic Memory Control：内存动态控制\n- Live Memory VM Snapshot and Revert：快照热恢复\n- Live VM Migration：服务器热迁移\n- Scheduled Snapshots：定时快照\n- XenServer Conversion Manager：虚拟化服务迁移管理（P2V）\n- Maximum Pool Size：最大资源池\n- Distributed Virtual Switch Controller：交换机虚拟化\n\n```shell\n免费EXSI缺点：\n没有VMware官方支持\n每个VM最大支持8vCPU\n不能通过vCenter集中管理\nvStorage API不能使用\n```\n\n### 3. 核心需求\n\n- 多服务器图形化管理\n- 快照管理\n\n### 4. 满足需求的虚拟化平台\n\n选型确定docker，容器化部署中间件。\n\n\n\n### 5. 测试环境（部署）\n\n控制方式，三种均为root用户\n\n- EXSi支持WEB和客户端两种方式操作\n\nhttps://192.168.10.90/ui/#/host\n密码：dahouzi@SZ\n\n\n\n- PVE WEB界面登录操作\n\n[pve - Proxmox Virtual Environment](https://192.168.215.135:8006/#v1:0:=storage%2Fpve%2Flocal:4:::::::)登陆后关闭弹窗即可，因为是免费许可。\n\nip:192.168.215.135\n\npassword: dahouzi\n\n\n\n- Xen下载Xencenter客户端操作\n\nip:192.168.215.133\n密码: dahouzi!\n\n","source":"_posts/06虚拟化/6.1.虚拟化ESXi与KVM对比.md","raw":"## 虚拟化ESXi、KVM对比\n\n### 1. 官方介绍\n\n```shell\n全虚拟化（Full Virtualization）：完全模拟底层硬件，虚拟机无法感知自己运行在虚拟化环境中，因此虚拟机可以运行未经修改的操作系统和应用程序。这种虚拟化技术的代表是 VMware。\n半虚拟化（Paravirtualization）：虚拟机知道自己运行在虚拟化环境中，虚拟机操作系统需要进行修改以便能够与虚拟化层进行通信，因此半虚拟化技术要求操作系统需要支持半虚拟化接口。这种虚拟化技术的代表是 Xen。\n操作系统虚拟化（Operating  System  Virtualization）：也称为容器化，是指通过对操作系统进行虚拟化来实现多个操作系统实例之间的隔离。每个容器都运行在主机操作系统的用户空间中，共享主机操作系统的内核。这种虚拟化技术的代表是  Docker。\n硬件辅助虚拟化（Hardware-assisted Virtualization）：是指利用CPU和主板的硬件虚拟化扩展实现虚拟化，这样可以提高虚拟化的性能。这种虚拟化技术的代表是 KVM。\n无虚拟化（Bare Metal）虚拟化，它不需要虚拟化层，直接在裸机上运行虚拟机，能够提供更高的性能和更好的资源利用率，但需要硬件支持。\n```\n\nEXSi：商业版\n\n- https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html\n- https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\n- 报价（基础版1,394.00 美元/三年）：[vSphere Landing Page | VMware](https://store-us.vmware.com/products/data-center-virtualization-cloud-infrastructure.html)\n\nKVM：基于内核的虚拟机 (KVM)\n\n- PVE：https://www.proxmox.com/en/proxmox-ve/featurs\n\nXenserver免费与付费区别\n\n  [XenServer学习笔记二 XenServer免费版本和收费版本的区别_51CTO博客_xenserver免费版和收费版区别](https://blog.51cto.com/shenhj/420500)\n  在线迁移的XenMotion、虚拟机磁盘快照和自动恢复、XenCenter管理软件和虚拟机转化工具软件\n\n### 2. 虚拟化功能\n\n- Multi Server Management with XenCenter GUI：多服务器图形化管理\n- Active Directory Integration：AD域集成\n- Dynamic Memory Control：内存动态控制\n- Live Memory VM Snapshot and Revert：快照热恢复\n- Live VM Migration：服务器热迁移\n- Scheduled Snapshots：定时快照\n- XenServer Conversion Manager：虚拟化服务迁移管理（P2V）\n- Maximum Pool Size：最大资源池\n- Distributed Virtual Switch Controller：交换机虚拟化\n\n```shell\n免费EXSI缺点：\n没有VMware官方支持\n每个VM最大支持8vCPU\n不能通过vCenter集中管理\nvStorage API不能使用\n```\n\n### 3. 核心需求\n\n- 多服务器图形化管理\n- 快照管理\n\n### 4. 满足需求的虚拟化平台\n\n选型确定docker，容器化部署中间件。\n\n\n\n### 5. 测试环境（部署）\n\n控制方式，三种均为root用户\n\n- EXSi支持WEB和客户端两种方式操作\n\nhttps://192.168.10.90/ui/#/host\n密码：dahouzi@SZ\n\n\n\n- PVE WEB界面登录操作\n\n[pve - Proxmox Virtual Environment](https://192.168.215.135:8006/#v1:0:=storage%2Fpve%2Flocal:4:::::::)登陆后关闭弹窗即可，因为是免费许可。\n\nip:192.168.215.135\n\npassword: dahouzi\n\n\n\n- Xen下载Xencenter客户端操作\n\nip:192.168.215.133\n密码: dahouzi!\n\n","slug":"06虚拟化/6.1.虚拟化ESXi与KVM对比","published":1,"date":"2024-07-18T06:25:36.196Z","updated":"2024-07-18T06:28:44.720Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqw000nj38a02of2bxo","content":"<h2 id=\"虚拟化ESXi、KVM对比\">虚拟化ESXi、KVM对比</h2>\n<h3 id=\"1-官方介绍\">1. 官方介绍</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全虚拟化（Full Virtualization）：完全模拟底层硬件，虚拟机无法感知自己运行在虚拟化环境中，因此虚拟机可以运行未经修改的操作系统和应用程序。这种虚拟化技术的代表是 VMware。</span><br><span class=\"line\">半虚拟化（Paravirtualization）：虚拟机知道自己运行在虚拟化环境中，虚拟机操作系统需要进行修改以便能够与虚拟化层进行通信，因此半虚拟化技术要求操作系统需要支持半虚拟化接口。这种虚拟化技术的代表是 Xen。</span><br><span class=\"line\">操作系统虚拟化（Operating  System  Virtualization）：也称为容器化，是指通过对操作系统进行虚拟化来实现多个操作系统实例之间的隔离。每个容器都运行在主机操作系统的用户空间中，共享主机操作系统的内核。这种虚拟化技术的代表是  Docker。</span><br><span class=\"line\">硬件辅助虚拟化（Hardware-assisted Virtualization）：是指利用CPU和主板的硬件虚拟化扩展实现虚拟化，这样可以提高虚拟化的性能。这种虚拟化技术的代表是 KVM。</span><br><span class=\"line\">无虚拟化（Bare Metal）虚拟化，它不需要虚拟化层，直接在裸机上运行虚拟机，能够提供更高的性能和更好的资源利用率，但需要硬件支持。</span><br></pre></td></tr></table></figure>\n<p>EXSi：商业版</p>\n<ul>\n<li><a href=\"https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html\">https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html</a></li>\n<li><a href=\"https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\">https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html</a></li>\n<li>报价（基础版1,394.00 美元/三年）：<a href=\"https://store-us.vmware.com/products/data-center-virtualization-cloud-infrastructure.html\">vSphere Landing Page | VMware</a></li>\n</ul>\n<p>KVM：基于内核的虚拟机 (KVM)</p>\n<ul>\n<li>PVE：<a href=\"https://www.proxmox.com/en/proxmox-ve/featurs\">https://www.proxmox.com/en/proxmox-ve/featurs</a></li>\n</ul>\n<p>Xenserver免费与付费区别</p>\n<p><a href=\"https://blog.51cto.com/shenhj/420500\">XenServer学习笔记二 XenServer免费版本和收费版本的区别_51CTO博客_xenserver免费版和收费版区别</a><br>\n在线迁移的XenMotion、虚拟机磁盘快照和自动恢复、XenCenter管理软件和虚拟机转化工具软件</p>\n<h3 id=\"2-虚拟化功能\">2. 虚拟化功能</h3>\n<ul>\n<li>Multi Server Management with XenCenter GUI：多服务器图形化管理</li>\n<li>Active Directory Integration：AD域集成</li>\n<li>Dynamic Memory Control：内存动态控制</li>\n<li>Live Memory VM Snapshot and Revert：快照热恢复</li>\n<li>Live VM Migration：服务器热迁移</li>\n<li>Scheduled Snapshots：定时快照</li>\n<li>XenServer Conversion Manager：虚拟化服务迁移管理（P2V）</li>\n<li>Maximum Pool Size：最大资源池</li>\n<li>Distributed Virtual Switch Controller：交换机虚拟化</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">免费EXSI缺点：</span><br><span class=\"line\">没有VMware官方支持</span><br><span class=\"line\">每个VM最大支持8vCPU</span><br><span class=\"line\">不能通过vCenter集中管理</span><br><span class=\"line\">vStorage API不能使用</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-核心需求\">3. 核心需求</h3>\n<ul>\n<li>多服务器图形化管理</li>\n<li>快照管理</li>\n</ul>\n<h3 id=\"4-满足需求的虚拟化平台\">4. 满足需求的虚拟化平台</h3>\n<p>选型确定docker，容器化部署中间件。</p>\n<h3 id=\"5-测试环境（部署）\">5. 测试环境（部署）</h3>\n<p>控制方式，三种均为root用户</p>\n<ul>\n<li>EXSi支持WEB和客户端两种方式操作</li>\n</ul>\n<p><a href=\"https://192.168.10.90/ui/#/host\">https://192.168.10.90/ui/#/host</a><br>\n密码：dahouzi@SZ</p>\n<ul>\n<li>PVE WEB界面登录操作</li>\n</ul>\n<p><a href=\"https://192.168.215.135:8006/#v1:0:=storage%2Fpve%2Flocal:4:::::::\">pve - Proxmox Virtual Environment</a>登陆后关闭弹窗即可，因为是免费许可。</p>\n<p>ip:192.168.215.135</p>\n<p>password: dahouzi</p>\n<ul>\n<li>Xen下载Xencenter客户端操作</li>\n</ul>\n<p>ip:192.168.215.133<br>\n密码: dahouzi!</p>\n","excerpt":"","more":"<h2 id=\"虚拟化ESXi、KVM对比\">虚拟化ESXi、KVM对比</h2>\n<h3 id=\"1-官方介绍\">1. 官方介绍</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全虚拟化（Full Virtualization）：完全模拟底层硬件，虚拟机无法感知自己运行在虚拟化环境中，因此虚拟机可以运行未经修改的操作系统和应用程序。这种虚拟化技术的代表是 VMware。</span><br><span class=\"line\">半虚拟化（Paravirtualization）：虚拟机知道自己运行在虚拟化环境中，虚拟机操作系统需要进行修改以便能够与虚拟化层进行通信，因此半虚拟化技术要求操作系统需要支持半虚拟化接口。这种虚拟化技术的代表是 Xen。</span><br><span class=\"line\">操作系统虚拟化（Operating  System  Virtualization）：也称为容器化，是指通过对操作系统进行虚拟化来实现多个操作系统实例之间的隔离。每个容器都运行在主机操作系统的用户空间中，共享主机操作系统的内核。这种虚拟化技术的代表是  Docker。</span><br><span class=\"line\">硬件辅助虚拟化（Hardware-assisted Virtualization）：是指利用CPU和主板的硬件虚拟化扩展实现虚拟化，这样可以提高虚拟化的性能。这种虚拟化技术的代表是 KVM。</span><br><span class=\"line\">无虚拟化（Bare Metal）虚拟化，它不需要虚拟化层，直接在裸机上运行虚拟机，能够提供更高的性能和更好的资源利用率，但需要硬件支持。</span><br></pre></td></tr></table></figure>\n<p>EXSi：商业版</p>\n<ul>\n<li><a href=\"https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html\">https://docs.vmware.com/cn/VMware-vSphere/6.5/rn/vsphere-esxi-65u3-release-notes.html</a></li>\n<li><a href=\"https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html\">https://docs.vmware.com/cn/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-70-release-notes.html</a></li>\n<li>报价（基础版1,394.00 美元/三年）：<a href=\"https://store-us.vmware.com/products/data-center-virtualization-cloud-infrastructure.html\">vSphere Landing Page | VMware</a></li>\n</ul>\n<p>KVM：基于内核的虚拟机 (KVM)</p>\n<ul>\n<li>PVE：<a href=\"https://www.proxmox.com/en/proxmox-ve/featurs\">https://www.proxmox.com/en/proxmox-ve/featurs</a></li>\n</ul>\n<p>Xenserver免费与付费区别</p>\n<p><a href=\"https://blog.51cto.com/shenhj/420500\">XenServer学习笔记二 XenServer免费版本和收费版本的区别_51CTO博客_xenserver免费版和收费版区别</a><br>\n在线迁移的XenMotion、虚拟机磁盘快照和自动恢复、XenCenter管理软件和虚拟机转化工具软件</p>\n<h3 id=\"2-虚拟化功能\">2. 虚拟化功能</h3>\n<ul>\n<li>Multi Server Management with XenCenter GUI：多服务器图形化管理</li>\n<li>Active Directory Integration：AD域集成</li>\n<li>Dynamic Memory Control：内存动态控制</li>\n<li>Live Memory VM Snapshot and Revert：快照热恢复</li>\n<li>Live VM Migration：服务器热迁移</li>\n<li>Scheduled Snapshots：定时快照</li>\n<li>XenServer Conversion Manager：虚拟化服务迁移管理（P2V）</li>\n<li>Maximum Pool Size：最大资源池</li>\n<li>Distributed Virtual Switch Controller：交换机虚拟化</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">免费EXSI缺点：</span><br><span class=\"line\">没有VMware官方支持</span><br><span class=\"line\">每个VM最大支持8vCPU</span><br><span class=\"line\">不能通过vCenter集中管理</span><br><span class=\"line\">vStorage API不能使用</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-核心需求\">3. 核心需求</h3>\n<ul>\n<li>多服务器图形化管理</li>\n<li>快照管理</li>\n</ul>\n<h3 id=\"4-满足需求的虚拟化平台\">4. 满足需求的虚拟化平台</h3>\n<p>选型确定docker，容器化部署中间件。</p>\n<h3 id=\"5-测试环境（部署）\">5. 测试环境（部署）</h3>\n<p>控制方式，三种均为root用户</p>\n<ul>\n<li>EXSi支持WEB和客户端两种方式操作</li>\n</ul>\n<p><a href=\"https://192.168.10.90/ui/#/host\">https://192.168.10.90/ui/#/host</a><br>\n密码：dahouzi@SZ</p>\n<ul>\n<li>PVE WEB界面登录操作</li>\n</ul>\n<p><a href=\"https://192.168.215.135:8006/#v1:0:=storage%2Fpve%2Flocal:4:::::::\">pve - Proxmox Virtual Environment</a>登陆后关闭弹窗即可，因为是免费许可。</p>\n<p>ip:192.168.215.135</p>\n<p>password: dahouzi</p>\n<ul>\n<li>Xen下载Xencenter客户端操作</li>\n</ul>\n<p>ip:192.168.215.133<br>\n密码: dahouzi!</p>\n"},{"_content":"\n\n\n### docker和container区别\n\n熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容","source":"_posts/06虚拟化/K8S安装.md","raw":"\n\n\n### docker和container区别\n\n熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容","slug":"06虚拟化/K8S安装","published":1,"date":"2024-07-18T03:58:03.210Z","updated":"2024-07-18T04:44:33.310Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqx000oj38aaa8bg727","content":"<h3 id=\"docker和container区别\">docker和container区别</h3>\n<p>熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容</p>\n","excerpt":"","more":"<h3 id=\"docker和container区别\">docker和container区别</h3>\n<p>熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容</p>\n"},{"title":"6.2.Docker-compose环境配置","author":"空空","date":"2023-05-31T16:00:00.000Z","_content":"\n### 1.安装Docker\n\n首先，添加Docker CE镜像源：\n\n```bash\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n然后，安装Docker CE、Docker CLI和Containerd：\n\n```bash\nyum install docker-ce docker-ce-cli containerd.io\n//启动docker\nsystemctl enable docker\nsystemctl start docker\n//查看docker版本\ndocker --version\n//查看是否启动成功\n rpm -qa | grep  docker\n```\n\n- 配置国内源（请珍惜生命）\n```bash\n#docker 设置国内镜像源.创建或修改`vi /etc/docker/daemon.json` 文件，修改为如下形式\n\n{\n  \"registry-mirrors\": [\n    \"https://4sjn347i.mirror.aliyuncs.com\",\n    \"https://docker.mirrors.ustc.edu.cn\"\n  ],\n  \"max-concurrent-downloads\": 10,\n  \"insecure-registries\": [],\n  \"debug\": true,\n  \"experimental\": false,\n  \"features\": {\n    \"buildkit\": true\n  }\n}\n\n```\n\n\n### 2.安装Docker Compose\n\n下载Docker Compose可执行文件：\n\n```bash\ncurl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n```\n\n创建软链接到`/usr/bin`目录：\n\n```bash\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n授予执行权限：\n\n```bash\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n验证安装是否成功：\n\n```bash\ndocker-compose --version\n```\n\n### 3.完整安装过程\n\n以下是完整的安装过程：\n\n```bash\n[root@node71 ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nLoaded plugins: fastestmirror, langpacks\nadding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\ngrabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\nrepo saved to /etc/yum.repos.d/docker-ce.repo\n\n[root@node71 ~]# yum install docker-ce docker-ce-cli containerd.io\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirrors.bfsu.edu.cn\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\ndocker-ce-stable                                                                                                                                                                       | 3.5 kB  00:00:00\nPackage 3:docker-ce-24.0.2-1.el7.x86_64 already installed and latest version\nPackage 1:docker-ce-cli-24.0.2-1.el7.x86_64 already installed and latest version\nPackage containerd.io-1.6.21-3.1.el7.x86_64 already installed and latest version\nNothing to do\n\n[root@node71 ~]# systemctl start docker\n\n[root@node71 ~]# systemctl enabled docker\nUnknown operation 'enabled'.\n\n[root@node71 ~]# systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n\n[root@node71 ~]# curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 52.0M  100 52.0M    0     0  1012k      0  0:00:52  0:00:52 --:--:-- 2080k\n\n[root@node71 ~]# sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n[root@node71 ~]# docker-compose --version\n-bash: /usr/local/bin/docker-compose: Permission denied\n\n[root@node71 ~]# sudo chmod +x /usr/local/bin/docker-compose\n\n[root@node71 ~]# docker-compose --version\nDocker Compose version v2.18.1\n```\n\n### 4.docker维护\n\n```\n#查看运行中的容器\n[root@ansible prometheus]# docker ps -a\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                      NAMES\n1e67cc0cd48a   prom/prometheus   \"/bin/prometheus --c…\"   3 minutes ago    Created                                    crazy_varahamihira\n121e8c4fae84   prom/prometheus   \"/bin/prometheus --c…\"   19 minutes ago   Up 19 minutes   127.0.0.1:9090->9090/tcp   prometheus\n\n#停止运行中的容器\n[root@ansible prometheus]# docker stop prometheus\nprometheus\n\n\n\ndocker info                # 查看docker的信息\n\ndocker search img_name     # 搜索名为img_name的镜像\ndocker pull img_name       # 将名为img_name的镜像下载到本地\ndocker images              # 查看本地已有的镜像\ndocker rmi img_name        # 删除名为img_name的镜像\n \ndocker ps                  # 列出正在运行的容器\ndocker ps -a               # 列出所有的容器\n# 使用img_name以交互模式在后台运行分配了伪终端的名为container_name的镜像\ndocker run -itd --name=container_name img_name  \n \ndocker start container_name/container_id        # 通过容器名字或ID启动容器\ndocker stop container_name/container_id         # 通过容器名字或ID停止容器\ndocker restart container_name/container_id      # 通过容器名字或ID重启容器\ndocker rm container_name/container_id           # 通过容器名字或ID删除容器\n \ndocker exec -it  id /bin/bash   # 通过容器名字或ID进入容器\nexit               # 退出容器\n\n#docker进入容器命令\ndocker exec -it 44fc0f0582d9 /bin/bash\n\n\n```\n\n\n\n### 5.查看报错\n\n```\n#查看log\ndocker logs 34d9cdf91e46\n\n\n1. # 通过查看容器日志，确定是什么问题,docker logs -f -t --tail 行数 容器名\n    docker logs -f -t --tail 100 <containerID> \n2. # 将容器中导致错误的文件拷贝到宿主机上\n    docker cp containerID:container_path host_path \n    ***说明***\n    \tcontainerID：容器ID\n    \tcontainer_path：容器内文件路径（需拷贝的源文件）\n    \thost_path：宿主机路径（拷贝文件的目标）\n3. # 修改拷贝出来的配置文件, 再将配置文件拷贝回去容器 \n    docker cp host_path containerID:container_path\n4. # 再次启动容器\n    docker start containerID\n\n```\n\n\n\n### 6.参考资料\n\n- [CSDN博客](https://blog.csdn.net/ytangdigl/article/details/103831739)\n- [Docker Compose官方文档](https://docs.docker.com/compose/install/standalone/)\n","source":"_posts/06虚拟化/6.2.Docker-compose环境配置.md","raw":"---\ntitle: 6.2.Docker-compose环境配置\nauthor: 空空\ndate: 2023-06-01\ncategories: [技术, 容器化]\ntags: [Docker, Docker Compose, 安装指南]\n---\n\n### 1.安装Docker\n\n首先，添加Docker CE镜像源：\n\n```bash\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n然后，安装Docker CE、Docker CLI和Containerd：\n\n```bash\nyum install docker-ce docker-ce-cli containerd.io\n//启动docker\nsystemctl enable docker\nsystemctl start docker\n//查看docker版本\ndocker --version\n//查看是否启动成功\n rpm -qa | grep  docker\n```\n\n- 配置国内源（请珍惜生命）\n```bash\n#docker 设置国内镜像源.创建或修改`vi /etc/docker/daemon.json` 文件，修改为如下形式\n\n{\n  \"registry-mirrors\": [\n    \"https://4sjn347i.mirror.aliyuncs.com\",\n    \"https://docker.mirrors.ustc.edu.cn\"\n  ],\n  \"max-concurrent-downloads\": 10,\n  \"insecure-registries\": [],\n  \"debug\": true,\n  \"experimental\": false,\n  \"features\": {\n    \"buildkit\": true\n  }\n}\n\n```\n\n\n### 2.安装Docker Compose\n\n下载Docker Compose可执行文件：\n\n```bash\ncurl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n```\n\n创建软链接到`/usr/bin`目录：\n\n```bash\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n授予执行权限：\n\n```bash\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n验证安装是否成功：\n\n```bash\ndocker-compose --version\n```\n\n### 3.完整安装过程\n\n以下是完整的安装过程：\n\n```bash\n[root@node71 ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nLoaded plugins: fastestmirror, langpacks\nadding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\ngrabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\nrepo saved to /etc/yum.repos.d/docker-ce.repo\n\n[root@node71 ~]# yum install docker-ce docker-ce-cli containerd.io\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirrors.bfsu.edu.cn\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\ndocker-ce-stable                                                                                                                                                                       | 3.5 kB  00:00:00\nPackage 3:docker-ce-24.0.2-1.el7.x86_64 already installed and latest version\nPackage 1:docker-ce-cli-24.0.2-1.el7.x86_64 already installed and latest version\nPackage containerd.io-1.6.21-3.1.el7.x86_64 already installed and latest version\nNothing to do\n\n[root@node71 ~]# systemctl start docker\n\n[root@node71 ~]# systemctl enabled docker\nUnknown operation 'enabled'.\n\n[root@node71 ~]# systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n\n[root@node71 ~]# curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 52.0M  100 52.0M    0     0  1012k      0  0:00:52  0:00:52 --:--:-- 2080k\n\n[root@node71 ~]# sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n[root@node71 ~]# docker-compose --version\n-bash: /usr/local/bin/docker-compose: Permission denied\n\n[root@node71 ~]# sudo chmod +x /usr/local/bin/docker-compose\n\n[root@node71 ~]# docker-compose --version\nDocker Compose version v2.18.1\n```\n\n### 4.docker维护\n\n```\n#查看运行中的容器\n[root@ansible prometheus]# docker ps -a\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                      NAMES\n1e67cc0cd48a   prom/prometheus   \"/bin/prometheus --c…\"   3 minutes ago    Created                                    crazy_varahamihira\n121e8c4fae84   prom/prometheus   \"/bin/prometheus --c…\"   19 minutes ago   Up 19 minutes   127.0.0.1:9090->9090/tcp   prometheus\n\n#停止运行中的容器\n[root@ansible prometheus]# docker stop prometheus\nprometheus\n\n\n\ndocker info                # 查看docker的信息\n\ndocker search img_name     # 搜索名为img_name的镜像\ndocker pull img_name       # 将名为img_name的镜像下载到本地\ndocker images              # 查看本地已有的镜像\ndocker rmi img_name        # 删除名为img_name的镜像\n \ndocker ps                  # 列出正在运行的容器\ndocker ps -a               # 列出所有的容器\n# 使用img_name以交互模式在后台运行分配了伪终端的名为container_name的镜像\ndocker run -itd --name=container_name img_name  \n \ndocker start container_name/container_id        # 通过容器名字或ID启动容器\ndocker stop container_name/container_id         # 通过容器名字或ID停止容器\ndocker restart container_name/container_id      # 通过容器名字或ID重启容器\ndocker rm container_name/container_id           # 通过容器名字或ID删除容器\n \ndocker exec -it  id /bin/bash   # 通过容器名字或ID进入容器\nexit               # 退出容器\n\n#docker进入容器命令\ndocker exec -it 44fc0f0582d9 /bin/bash\n\n\n```\n\n\n\n### 5.查看报错\n\n```\n#查看log\ndocker logs 34d9cdf91e46\n\n\n1. # 通过查看容器日志，确定是什么问题,docker logs -f -t --tail 行数 容器名\n    docker logs -f -t --tail 100 <containerID> \n2. # 将容器中导致错误的文件拷贝到宿主机上\n    docker cp containerID:container_path host_path \n    ***说明***\n    \tcontainerID：容器ID\n    \tcontainer_path：容器内文件路径（需拷贝的源文件）\n    \thost_path：宿主机路径（拷贝文件的目标）\n3. # 修改拷贝出来的配置文件, 再将配置文件拷贝回去容器 \n    docker cp host_path containerID:container_path\n4. # 再次启动容器\n    docker start containerID\n\n```\n\n\n\n### 6.参考资料\n\n- [CSDN博客](https://blog.csdn.net/ytangdigl/article/details/103831739)\n- [Docker Compose官方文档](https://docs.docker.com/compose/install/standalone/)\n","slug":"06虚拟化/6.2.Docker-compose环境配置","published":1,"updated":"2024-07-20T06:52:16.920Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqy000pj38a1vqcajeh","content":"<h3 id=\"1-安装Docker\">1.安装Docker</h3>\n<p>首先，添加Docker CE镜像源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>然后，安装Docker CE、Docker CLI和Containerd：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">//启动docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">//查看docker版本</span><br><span class=\"line\">docker --version</span><br><span class=\"line\">//查看是否启动成功</span><br><span class=\"line\"> rpm -qa | grep  docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置国内源（请珍惜生命）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker 设置国内镜像源.创建或修改`vi /etc/docker/daemon.json` 文件，修改为如下形式</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://4sjn347i.mirror.aliyuncs.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;max-concurrent-downloads&quot;</span>: 10,</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;debug&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;experimental&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;features&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;buildkit&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-安装Docker-Compose\">2.安装Docker Compose</h3>\n<p>下载Docker Compose可执行文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>创建软链接到<code>/usr/bin</code>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>授予执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>验证安装是否成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-完整安装过程\">3.完整安装过程</h3>\n<p>以下是完整的安装过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirrors.bfsu.edu.cn</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">docker-ce-stable                                                                                                                                                                       | 3.5 kB  00:00:00</span><br><span class=\"line\">Package 3:docker-ce-24.0.2-1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package 1:docker-ce-cli-24.0.2-1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package containerd.io-1.6.21-3.1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Nothing to <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl enabled docker</span><br><span class=\"line\">Unknown operation <span class=\"string\">&#x27;enabled&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class=\"line\">100 52.0M  100 52.0M    0     0  1012k      0  0:00:52  0:00:52 --:--:-- 2080k</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# docker-compose --version</span><br><span class=\"line\">-bash: /usr/local/bin/docker-compose: Permission denied</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# <span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# docker-compose --version</span><br><span class=\"line\">Docker Compose version v2.18.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-docker维护\">4.docker维护</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看运行中的容器</span><br><span class=\"line\">[root@ansible prometheus]# docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                      NAMES</span><br><span class=\"line\">1e67cc0cd48a   prom/prometheus   &quot;/bin/prometheus --c…&quot;   3 minutes ago    Created                                    crazy_varahamihira</span><br><span class=\"line\">121e8c4fae84   prom/prometheus   &quot;/bin/prometheus --c…&quot;   19 minutes ago   Up 19 minutes   127.0.0.1:9090-&gt;9090/tcp   prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">#停止运行中的容器</span><br><span class=\"line\">[root@ansible prometheus]# docker stop prometheus</span><br><span class=\"line\">prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker info                # 查看docker的信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker search img_name     # 搜索名为img_name的镜像</span><br><span class=\"line\">docker pull img_name       # 将名为img_name的镜像下载到本地</span><br><span class=\"line\">docker images              # 查看本地已有的镜像</span><br><span class=\"line\">docker rmi img_name        # 删除名为img_name的镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">docker ps                  # 列出正在运行的容器</span><br><span class=\"line\">docker ps -a               # 列出所有的容器</span><br><span class=\"line\"># 使用img_name以交互模式在后台运行分配了伪终端的名为container_name的镜像</span><br><span class=\"line\">docker run -itd --name=container_name img_name  </span><br><span class=\"line\"> </span><br><span class=\"line\">docker start container_name/container_id        # 通过容器名字或ID启动容器</span><br><span class=\"line\">docker stop container_name/container_id         # 通过容器名字或ID停止容器</span><br><span class=\"line\">docker restart container_name/container_id      # 通过容器名字或ID重启容器</span><br><span class=\"line\">docker rm container_name/container_id           # 通过容器名字或ID删除容器</span><br><span class=\"line\"> </span><br><span class=\"line\">docker exec -it  id /bin/bash   # 通过容器名字或ID进入容器</span><br><span class=\"line\">exit               # 退出容器</span><br><span class=\"line\"></span><br><span class=\"line\">#docker进入容器命令</span><br><span class=\"line\">docker exec -it 44fc0f0582d9 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看报错\">5.查看报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看log</span><br><span class=\"line\">docker logs 34d9cdf91e46</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. # 通过查看容器日志，确定是什么问题,docker logs -f -t --tail 行数 容器名</span><br><span class=\"line\">    docker logs -f -t --tail 100 &lt;containerID&gt; </span><br><span class=\"line\">2. # 将容器中导致错误的文件拷贝到宿主机上</span><br><span class=\"line\">    docker cp containerID:container_path host_path </span><br><span class=\"line\">    ***说明***</span><br><span class=\"line\">    \tcontainerID：容器ID</span><br><span class=\"line\">    \tcontainer_path：容器内文件路径（需拷贝的源文件）</span><br><span class=\"line\">    \thost_path：宿主机路径（拷贝文件的目标）</span><br><span class=\"line\">3. # 修改拷贝出来的配置文件, 再将配置文件拷贝回去容器 </span><br><span class=\"line\">    docker cp host_path containerID:container_path</span><br><span class=\"line\">4. # 再次启动容器</span><br><span class=\"line\">    docker start containerID</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-参考资料\">6.参考资料</h3>\n<ul>\n<li><a href=\"https://blog.csdn.net/ytangdigl/article/details/103831739\">CSDN博客</a></li>\n<li><a href=\"https://docs.docker.com/compose/install/standalone/\">Docker Compose官方文档</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"1-安装Docker\">1.安装Docker</h3>\n<p>首先，添加Docker CE镜像源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>然后，安装Docker CE、Docker CLI和Containerd：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">//启动docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">//查看docker版本</span><br><span class=\"line\">docker --version</span><br><span class=\"line\">//查看是否启动成功</span><br><span class=\"line\"> rpm -qa | grep  docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置国内源（请珍惜生命）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker 设置国内镜像源.创建或修改`vi /etc/docker/daemon.json` 文件，修改为如下形式</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://4sjn347i.mirror.aliyuncs.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">&quot;max-concurrent-downloads&quot;</span>: 10,</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;debug&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;experimental&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;features&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;buildkit&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-安装Docker-Compose\">2.安装Docker Compose</h3>\n<p>下载Docker Compose可执行文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>创建软链接到<code>/usr/bin</code>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>授予执行权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>验证安装是否成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-完整安装过程\">3.完整安装过程</h3>\n<p>以下是完整的安装过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node71 ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirrors.bfsu.edu.cn</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">docker-ce-stable                                                                                                                                                                       | 3.5 kB  00:00:00</span><br><span class=\"line\">Package 3:docker-ce-24.0.2-1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package 1:docker-ce-cli-24.0.2-1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package containerd.io-1.6.21-3.1.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Nothing to <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl enabled docker</span><br><span class=\"line\">Unknown operation <span class=\"string\">&#x27;enabled&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class=\"line\">100 52.0M  100 52.0M    0     0  1012k      0  0:00:52  0:00:52 --:--:-- 2080k</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# <span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# docker-compose --version</span><br><span class=\"line\">-bash: /usr/local/bin/docker-compose: Permission denied</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# <span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node71 ~]# docker-compose --version</span><br><span class=\"line\">Docker Compose version v2.18.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-docker维护\">4.docker维护</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看运行中的容器</span><br><span class=\"line\">[root@ansible prometheus]# docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                      NAMES</span><br><span class=\"line\">1e67cc0cd48a   prom/prometheus   &quot;/bin/prometheus --c…&quot;   3 minutes ago    Created                                    crazy_varahamihira</span><br><span class=\"line\">121e8c4fae84   prom/prometheus   &quot;/bin/prometheus --c…&quot;   19 minutes ago   Up 19 minutes   127.0.0.1:9090-&gt;9090/tcp   prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">#停止运行中的容器</span><br><span class=\"line\">[root@ansible prometheus]# docker stop prometheus</span><br><span class=\"line\">prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker info                # 查看docker的信息</span><br><span class=\"line\"></span><br><span class=\"line\">docker search img_name     # 搜索名为img_name的镜像</span><br><span class=\"line\">docker pull img_name       # 将名为img_name的镜像下载到本地</span><br><span class=\"line\">docker images              # 查看本地已有的镜像</span><br><span class=\"line\">docker rmi img_name        # 删除名为img_name的镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">docker ps                  # 列出正在运行的容器</span><br><span class=\"line\">docker ps -a               # 列出所有的容器</span><br><span class=\"line\"># 使用img_name以交互模式在后台运行分配了伪终端的名为container_name的镜像</span><br><span class=\"line\">docker run -itd --name=container_name img_name  </span><br><span class=\"line\"> </span><br><span class=\"line\">docker start container_name/container_id        # 通过容器名字或ID启动容器</span><br><span class=\"line\">docker stop container_name/container_id         # 通过容器名字或ID停止容器</span><br><span class=\"line\">docker restart container_name/container_id      # 通过容器名字或ID重启容器</span><br><span class=\"line\">docker rm container_name/container_id           # 通过容器名字或ID删除容器</span><br><span class=\"line\"> </span><br><span class=\"line\">docker exec -it  id /bin/bash   # 通过容器名字或ID进入容器</span><br><span class=\"line\">exit               # 退出容器</span><br><span class=\"line\"></span><br><span class=\"line\">#docker进入容器命令</span><br><span class=\"line\">docker exec -it 44fc0f0582d9 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看报错\">5.查看报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看log</span><br><span class=\"line\">docker logs 34d9cdf91e46</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. # 通过查看容器日志，确定是什么问题,docker logs -f -t --tail 行数 容器名</span><br><span class=\"line\">    docker logs -f -t --tail 100 &lt;containerID&gt; </span><br><span class=\"line\">2. # 将容器中导致错误的文件拷贝到宿主机上</span><br><span class=\"line\">    docker cp containerID:container_path host_path </span><br><span class=\"line\">    ***说明***</span><br><span class=\"line\">    \tcontainerID：容器ID</span><br><span class=\"line\">    \tcontainer_path：容器内文件路径（需拷贝的源文件）</span><br><span class=\"line\">    \thost_path：宿主机路径（拷贝文件的目标）</span><br><span class=\"line\">3. # 修改拷贝出来的配置文件, 再将配置文件拷贝回去容器 </span><br><span class=\"line\">    docker cp host_path containerID:container_path</span><br><span class=\"line\">4. # 再次启动容器</span><br><span class=\"line\">    docker start containerID</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-参考资料\">6.参考资料</h3>\n<ul>\n<li><a href=\"https://blog.csdn.net/ytangdigl/article/details/103831739\">CSDN博客</a></li>\n<li><a href=\"https://docs.docker.com/compose/install/standalone/\">Docker Compose官方文档</a></li>\n</ul>\n"},{"_content":"熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容","source":"_posts/06虚拟化/岗位摘要.md","raw":"熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容","slug":"06虚拟化/岗位摘要","published":1,"date":"2024-07-18T04:44:41.269Z","updated":"2024-07-18T04:44:46.802Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqqy000qj38acoqtflss","content":"<p>熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容</p>\n","excerpt":"","more":"<p>熟悉网络虚拟化原理，熟悉容器网络实现原理和相关技术，了解flannel, calico, cilium等开源组件；了解Docker/Containerd/K8S等相关内容</p>\n"},{"title":"10.2.openssh升级(版本：openssh-9.0p1)","_content":"\n`说明：在Centos7.6的自带SSH组件早些年已经爆出漏洞，虽然项目运行在内网，但修复仍然有必要性。`\n\n### 前置准备\n上传文件夹到root目录\n```bash\nscp -r /root/openssh_fix root@10.128.136.138:/root/\n```\n\n### 1、安装telnet/telnet-server\n\n```bash\n#下载telnet\n#yum -y install telnet telnet-server --downloadonly --downloaddir=/root/telnet\n\n# 安装telnet-server\ncd /root/openssh_fix/telnet\nyum localinstall *.rpm -y\n\n# 启动并设置开机自启动\nsystemctl start telnet.socket && systemctl enable telnet.socket\nsystemctl status telnet.socket \n\nnetstat -ntlp |grep 23\n```\n\n### 2、放开防火墙\n```shell\n# 防火墙放行23端口\nfirewall-cmd --zone=public --add-port=23/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --list-all\n\n### 验证telnet，确认可连接\ntelnet 10.128.136.138\n```\n\n### 3、安装依赖\n\n```shell\n#下载编译依赖包\n# yum install -y gcc gcc-c++ glibc make automake autoconf zlib zlib-devel pcre-devel  perl perl-Test-Simple --downloadonly --downloaddir=/root/telnet --downloadonly --downloaddir=/root/openssh_fix/relypackage\ncd /root/openssh_fix/relypackage\nyum localinstall *.rpm -y\n\n# yum install openssl openssl-devel --downloadonly --downloaddir=/root/ssl\ncd /root/openssh_fix/ssl\nyum localinstall *.rpm -y\n```\n\n### 4、卸载openssh\n```shell\n# 停止openssh服务\nsystemctl stop sshd\n\n# 备份\ncp -a /etc/ssh /etc/ssh.bak\ncp -a /usr/sbin/sshd /usr/sbin/sshd.bak\ncp -a /usr/bin/ssh /usr/bin/ssh.bak\n\n# 卸载\n[root@localhost telnet]# rpm -qa | grep openssh\nopenssh-clients-7.4p1-16.el7.x86_64\nopenssh-7.4p1-16.el7.x86_64\nopenssh-server-7.4p1-16.el7.x86_64\n[root@localhost telnet]# rpm -e `rpm -qa | grep openssh` --nodeps\n[root@localhost telnet]# rpm -qa | grep openssh\n```\n\n### 5、安装openssh\n```shell\ncd /root/openssh_fix/openssh9\ntar -zxvf openssh-9.0p1.tar.gz\ncd openssh-9.0p1\ncat INSTALL\n# 配置编译\n./configure --prefix=/usr/local/openssh --with-ssl-dir=/usr/local/openssl --with-zlib\n# 编译\nmake\n# 安装\nmake install\n\n# 检查旧版本启动文件\nls /usr/lib/systemd/system/ssh*\nrm -f /usr/lib/systemd/system/ssh*\n\n# 拷贝启动脚本\ncp contrib/redhat/sshd.init /etc/init.d/sshd\n\n# 建立软连接\nln -s /usr/local/openssh/etc /etc/ssh\nln -s /usr/local/openssh/sbin/sshd /usr/sbin/\nln -s /usr/local/openssh/bin/* /usr/bin/\n\n# 启动并设置开机自启动\nsystemctl daemon-reload\nsystemctl start sshd && systemctl enable sshd\n\n# 查看状态，已经是 running 状态了\nsystemctl status sshd\n# 确认版本\nssh -V\n```\n\n### 6、修改openssh配置\n```shell\nvi /usr/local/openssh/etc/sshd_config\n\nPermitRootLogin yes\n\n# 重启\nsystemctl restart sshd \n```\n\n### 7、停止telnet服务\n```shell\nsystemctl stop telnet.socket\nsystemctl disable telnet.socket\n```\n\n\n\n\n\n### 7、参考\nhttps://zhuanlan.zhihu.com/p/553027729?utm_id=0\n\n","source":"_posts/10未分类/10.2.openssh升级.md","raw":"---\ntitle: 10.2.openssh升级(版本：openssh-9.0p1)\n\n---\n\n`说明：在Centos7.6的自带SSH组件早些年已经爆出漏洞，虽然项目运行在内网，但修复仍然有必要性。`\n\n### 前置准备\n上传文件夹到root目录\n```bash\nscp -r /root/openssh_fix root@10.128.136.138:/root/\n```\n\n### 1、安装telnet/telnet-server\n\n```bash\n#下载telnet\n#yum -y install telnet telnet-server --downloadonly --downloaddir=/root/telnet\n\n# 安装telnet-server\ncd /root/openssh_fix/telnet\nyum localinstall *.rpm -y\n\n# 启动并设置开机自启动\nsystemctl start telnet.socket && systemctl enable telnet.socket\nsystemctl status telnet.socket \n\nnetstat -ntlp |grep 23\n```\n\n### 2、放开防火墙\n```shell\n# 防火墙放行23端口\nfirewall-cmd --zone=public --add-port=23/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --list-all\n\n### 验证telnet，确认可连接\ntelnet 10.128.136.138\n```\n\n### 3、安装依赖\n\n```shell\n#下载编译依赖包\n# yum install -y gcc gcc-c++ glibc make automake autoconf zlib zlib-devel pcre-devel  perl perl-Test-Simple --downloadonly --downloaddir=/root/telnet --downloadonly --downloaddir=/root/openssh_fix/relypackage\ncd /root/openssh_fix/relypackage\nyum localinstall *.rpm -y\n\n# yum install openssl openssl-devel --downloadonly --downloaddir=/root/ssl\ncd /root/openssh_fix/ssl\nyum localinstall *.rpm -y\n```\n\n### 4、卸载openssh\n```shell\n# 停止openssh服务\nsystemctl stop sshd\n\n# 备份\ncp -a /etc/ssh /etc/ssh.bak\ncp -a /usr/sbin/sshd /usr/sbin/sshd.bak\ncp -a /usr/bin/ssh /usr/bin/ssh.bak\n\n# 卸载\n[root@localhost telnet]# rpm -qa | grep openssh\nopenssh-clients-7.4p1-16.el7.x86_64\nopenssh-7.4p1-16.el7.x86_64\nopenssh-server-7.4p1-16.el7.x86_64\n[root@localhost telnet]# rpm -e `rpm -qa | grep openssh` --nodeps\n[root@localhost telnet]# rpm -qa | grep openssh\n```\n\n### 5、安装openssh\n```shell\ncd /root/openssh_fix/openssh9\ntar -zxvf openssh-9.0p1.tar.gz\ncd openssh-9.0p1\ncat INSTALL\n# 配置编译\n./configure --prefix=/usr/local/openssh --with-ssl-dir=/usr/local/openssl --with-zlib\n# 编译\nmake\n# 安装\nmake install\n\n# 检查旧版本启动文件\nls /usr/lib/systemd/system/ssh*\nrm -f /usr/lib/systemd/system/ssh*\n\n# 拷贝启动脚本\ncp contrib/redhat/sshd.init /etc/init.d/sshd\n\n# 建立软连接\nln -s /usr/local/openssh/etc /etc/ssh\nln -s /usr/local/openssh/sbin/sshd /usr/sbin/\nln -s /usr/local/openssh/bin/* /usr/bin/\n\n# 启动并设置开机自启动\nsystemctl daemon-reload\nsystemctl start sshd && systemctl enable sshd\n\n# 查看状态，已经是 running 状态了\nsystemctl status sshd\n# 确认版本\nssh -V\n```\n\n### 6、修改openssh配置\n```shell\nvi /usr/local/openssh/etc/sshd_config\n\nPermitRootLogin yes\n\n# 重启\nsystemctl restart sshd \n```\n\n### 7、停止telnet服务\n```shell\nsystemctl stop telnet.socket\nsystemctl disable telnet.socket\n```\n\n\n\n\n\n### 7、参考\nhttps://zhuanlan.zhihu.com/p/553027729?utm_id=0\n\n","slug":"10未分类/10.2.openssh升级","published":1,"date":"2024-07-19T16:54:57.097Z","updated":"2024-07-19T17:05:04.272Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqr9000tj38a1gsth7ip","content":"<p><code>说明：在Centos7.6的自带SSH组件早些年已经爆出漏洞，虽然项目运行在内网，但修复仍然有必要性。</code></p>\n<h3 id=\"前置准备\">前置准备</h3>\n<p>上传文件夹到root目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /root/openssh_fix root@10.128.136.138:/root/</span><br></pre></td></tr></table></figure>\n<h3 id=\"1、安装telnet-telnet-server\">1、安装telnet/telnet-server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载telnet</span></span><br><span class=\"line\"><span class=\"comment\">#yum -y install telnet telnet-server --downloadonly --downloaddir=/root/telnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装telnet-server</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/openssh_fix/telnet</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动并设置开机自启动</span></span><br><span class=\"line\">systemctl start telnet.socket &amp;&amp; systemctl <span class=\"built_in\">enable</span> telnet.socket</span><br><span class=\"line\">systemctl status telnet.socket </span><br><span class=\"line\"></span><br><span class=\"line\">netstat -ntlp |grep 23</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、放开防火墙\">2、放开防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙放行23端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=23/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 验证telnet，确认可连接</span></span></span><br><span class=\"line\">telnet 10.128.136.138</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、安装依赖\">3、安装依赖</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载编译依赖包</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum install -y gcc gcc-c++ glibc make automake autoconf zlib zlib-devel pcre-devel  perl perl-Test-Simple --downloadonly --downloaddir=/root/telnet --downloadonly --downloaddir=/root/openssh_fix/relypackage</span></span><br><span class=\"line\">cd /root/openssh_fix/relypackage</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum install openssl openssl-devel --downloadonly --downloaddir=/root/ssl</span></span><br><span class=\"line\">cd /root/openssh_fix/ssl</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、卸载openssh\">4、卸载openssh</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止openssh服务</span></span><br><span class=\"line\">systemctl stop sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备份</span></span><br><span class=\"line\">cp -a /etc/ssh /etc/ssh.bak</span><br><span class=\"line\">cp -a /usr/sbin/sshd /usr/sbin/sshd.bak</span><br><span class=\"line\">cp -a /usr/bin/ssh /usr/bin/ssh.bak</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载</span></span><br><span class=\"line\">[root@localhost telnet]# rpm -qa | grep openssh</span><br><span class=\"line\">openssh-clients-7.4p1-16.el7.x86_64</span><br><span class=\"line\">openssh-7.4p1-16.el7.x86_64</span><br><span class=\"line\">openssh-server-7.4p1-16.el7.x86_64</span><br><span class=\"line\">[root@localhost telnet]# rpm -e `rpm -qa | grep openssh` --nodeps</span><br><span class=\"line\">[root@localhost telnet]# rpm -qa | grep openssh</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、安装openssh\">5、安装openssh</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/openssh_fix/openssh9</span><br><span class=\"line\">tar -zxvf openssh-9.0p1.tar.gz</span><br><span class=\"line\">cd openssh-9.0p1</span><br><span class=\"line\">cat INSTALL</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置编译</span></span><br><span class=\"line\">./configure --prefix=/usr/local/openssh --with-ssl-dir=/usr/local/openssl --with-zlib</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查旧版本启动文件</span></span><br><span class=\"line\">ls /usr/lib/systemd/system/ssh*</span><br><span class=\"line\">rm -f /usr/lib/systemd/system/ssh*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本</span></span><br><span class=\"line\">cp contrib/redhat/sshd.init /etc/init.d/sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立软连接</span></span><br><span class=\"line\">ln -s /usr/local/openssh/etc /etc/ssh</span><br><span class=\"line\">ln -s /usr/local/openssh/sbin/sshd /usr/sbin/</span><br><span class=\"line\">ln -s /usr/local/openssh/bin/* /usr/bin/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动并设置开机自启动</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start sshd &amp;&amp; systemctl enable sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态，已经是 running 状态了</span></span><br><span class=\"line\">systemctl status sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确认版本</span></span><br><span class=\"line\">ssh -V</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、修改openssh配置\">6、修改openssh配置</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/openssh/etc/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">systemctl restart sshd </span><br></pre></td></tr></table></figure>\n<h3 id=\"7、停止telnet服务\">7、停止telnet服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop telnet.socket</span><br><span class=\"line\">systemctl disable telnet.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、参考\">7、参考</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/553027729?utm_id=0\">https://zhuanlan.zhihu.com/p/553027729?utm_id=0</a></p>\n","excerpt":"","more":"<p><code>说明：在Centos7.6的自带SSH组件早些年已经爆出漏洞，虽然项目运行在内网，但修复仍然有必要性。</code></p>\n<h3 id=\"前置准备\">前置准备</h3>\n<p>上传文件夹到root目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /root/openssh_fix root@10.128.136.138:/root/</span><br></pre></td></tr></table></figure>\n<h3 id=\"1、安装telnet-telnet-server\">1、安装telnet/telnet-server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载telnet</span></span><br><span class=\"line\"><span class=\"comment\">#yum -y install telnet telnet-server --downloadonly --downloaddir=/root/telnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装telnet-server</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/openssh_fix/telnet</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动并设置开机自启动</span></span><br><span class=\"line\">systemctl start telnet.socket &amp;&amp; systemctl <span class=\"built_in\">enable</span> telnet.socket</span><br><span class=\"line\">systemctl status telnet.socket </span><br><span class=\"line\"></span><br><span class=\"line\">netstat -ntlp |grep 23</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、放开防火墙\">2、放开防火墙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防火墙放行23端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=23/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\">firewall-cmd --list-all</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 验证telnet，确认可连接</span></span></span><br><span class=\"line\">telnet 10.128.136.138</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、安装依赖\">3、安装依赖</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载编译依赖包</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum install -y gcc gcc-c++ glibc make automake autoconf zlib zlib-devel pcre-devel  perl perl-Test-Simple --downloadonly --downloaddir=/root/telnet --downloadonly --downloaddir=/root/openssh_fix/relypackage</span></span><br><span class=\"line\">cd /root/openssh_fix/relypackage</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">yum install openssl openssl-devel --downloadonly --downloaddir=/root/ssl</span></span><br><span class=\"line\">cd /root/openssh_fix/ssl</span><br><span class=\"line\">yum localinstall *.rpm -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、卸载openssh\">4、卸载openssh</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止openssh服务</span></span><br><span class=\"line\">systemctl stop sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备份</span></span><br><span class=\"line\">cp -a /etc/ssh /etc/ssh.bak</span><br><span class=\"line\">cp -a /usr/sbin/sshd /usr/sbin/sshd.bak</span><br><span class=\"line\">cp -a /usr/bin/ssh /usr/bin/ssh.bak</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载</span></span><br><span class=\"line\">[root@localhost telnet]# rpm -qa | grep openssh</span><br><span class=\"line\">openssh-clients-7.4p1-16.el7.x86_64</span><br><span class=\"line\">openssh-7.4p1-16.el7.x86_64</span><br><span class=\"line\">openssh-server-7.4p1-16.el7.x86_64</span><br><span class=\"line\">[root@localhost telnet]# rpm -e `rpm -qa | grep openssh` --nodeps</span><br><span class=\"line\">[root@localhost telnet]# rpm -qa | grep openssh</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、安装openssh\">5、安装openssh</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/openssh_fix/openssh9</span><br><span class=\"line\">tar -zxvf openssh-9.0p1.tar.gz</span><br><span class=\"line\">cd openssh-9.0p1</span><br><span class=\"line\">cat INSTALL</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置编译</span></span><br><span class=\"line\">./configure --prefix=/usr/local/openssh --with-ssl-dir=/usr/local/openssl --with-zlib</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查旧版本启动文件</span></span><br><span class=\"line\">ls /usr/lib/systemd/system/ssh*</span><br><span class=\"line\">rm -f /usr/lib/systemd/system/ssh*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝启动脚本</span></span><br><span class=\"line\">cp contrib/redhat/sshd.init /etc/init.d/sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立软连接</span></span><br><span class=\"line\">ln -s /usr/local/openssh/etc /etc/ssh</span><br><span class=\"line\">ln -s /usr/local/openssh/sbin/sshd /usr/sbin/</span><br><span class=\"line\">ln -s /usr/local/openssh/bin/* /usr/bin/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动并设置开机自启动</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start sshd &amp;&amp; systemctl enable sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态，已经是 running 状态了</span></span><br><span class=\"line\">systemctl status sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确认版本</span></span><br><span class=\"line\">ssh -V</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、修改openssh配置\">6、修改openssh配置</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/openssh/etc/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">systemctl restart sshd </span><br></pre></td></tr></table></figure>\n<h3 id=\"7、停止telnet服务\">7、停止telnet服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop telnet.socket</span><br><span class=\"line\">systemctl disable telnet.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、参考\">7、参考</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/553027729?utm_id=0\">https://zhuanlan.zhihu.com/p/553027729?utm_id=0</a></p>\n"},{"title":"10.1.linux系统备份到NAS服务器","date":"2018-05-15T16:00:00.000Z","_content":"\n## 一、流程步骤解释\n### 1. 定义变量：\n\n设置用于访问远程共享目录的用户名和密码。\n定义远程共享目录路径。\n定义本地挂载点。\n\n### 2. 挂载远程共享目录：\n\n先卸载本地挂载点，避免异常。\n使用 mount 命令将远程共享目录挂载到本地路径。\n\n### 3. 本地备份：\n\n定义本地备份路径和备份文件名。\n检查并创建本地备份目录。\n使用 tar 命令将系统备份到本地备份文件，排除不需要备份的目录。\n\n### 4. 检查挂载：\n\n- 定义远程目录下的日志文件，用于判断路径是否成功挂载。\n- 检查日志文件是否存在以判断挂载是否成功。\n    如果挂载失败，记录失败日志。\n    如果挂载成功，执行以下操作：\n\n        记录挂载成功日志。\n        复制本地备份文件到远程共享目录。\n        删除本地备份文件。\n        删除远程3天前的备份文件，并记录日志。\n        记录备份成功日志。\n\n## 二、详细脚本\n\n```shell\n#!/bin/sh\n#此脚本用于将linux系统备份到windows共享文件夹或NAS服务器，\n#原理是1.备份系统到本地2.挂载远程路径到linux3.将备份文件复制到该路径下4.删除过期的备份文件、断开连接\n\n# 1. 定义变量\nusername='backup'              # 访问远程共享目录的用户名\npassword='backup'              # 访问远程共享目录的密码\nremotepath=\"//172.29.60.22/backup/linux/oracle\"  # 远程共享目录路径\n\nlocalpath=\"/backup22\"          # 本地挂载点\numount $localpath              # 先卸载本地挂载点，避免异常\n\n# 2. 挂载远程共享目录到本地\nmount -t cifs -o username=$username,password=$password $remotepath $localpath\n\n# 3. 定义本地备份路径和文件名\nlocalBackupPath=\"/usr/localbackup\"\nbackupToFile=$localBackupPath/$HOSTNAME\"_backup`date +%y%m%d`.tgz\"\n\n# 4. 定义要删除的3天前的备份文件路径\nbeforeThreeDayFile=\"/backup22/oradb_backup`date -d -8day +%y%m%d`.tgz\"\n\n# 5. 检查并创建本地备份目录\nif [ ! -d \"$localBackupPath\" ]; then\n    mkdir $localBackupPath\nfi\n\n# 6. 备份系统到本地备份文件\ntar -cvpzf $backupToFile --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media --exclude=$localBackupPath --exclude=$localpath /\n\n# 7. 定义远程目录下的日志文件，用于判断路径是否成功挂载\nlogFile=\"/backup22/backup_log_in22.txt\"\n\n# 8. 检查挂载是否成功\nif [ ! -f \"$logFile\" ]; then  \n    echo -e \"`date +%y%m%d_%T`挂载失败\\n\" >> \"/backup22/backup_log_local.txt\"\n    echo -e \"`date +%y%m%d_%T`挂载失败\\n\"\nelse\n    echo -e \"`date +%y%m%d_%T`已挂载备份服务器到本地\\n\" >> \"$logFile\"\n    \n    # 9. 复制备份文件到远程共享目录\n    cp $backupToFile $localpath\n    \n    # 10. 删除本地备份文件\n    rm -f $backupToFile\n    \n    # 11. 删除远程3天前的备份文件\n    rm -f $beforeThreeDayFile\n    echo -e \"\\n三天前的文件已删除\"$beforeThreeDayFile >> \"$logFile\"\n    \n    # 12. 记录备份成功日志\n    echo -e \"\\n`date +%y%m%d_%T`备份成功_\"$backupToFile >> \"$logFile\"\n    echo -e \"\\n`date +%y%m%d_%T`备份成功_\"$backupToFile\nfi\n```\n\n## 三、原纪录\n\nhttps://blog.csdn.net/lglglgl/article/details/80334546","source":"_posts/10未分类/10.1.linux系统备份到NAS服务器.md","raw":"---\ntitle: 10.1.linux系统备份到NAS服务器\ndate: 2018-05-16\n\n\n---\n\n## 一、流程步骤解释\n### 1. 定义变量：\n\n设置用于访问远程共享目录的用户名和密码。\n定义远程共享目录路径。\n定义本地挂载点。\n\n### 2. 挂载远程共享目录：\n\n先卸载本地挂载点，避免异常。\n使用 mount 命令将远程共享目录挂载到本地路径。\n\n### 3. 本地备份：\n\n定义本地备份路径和备份文件名。\n检查并创建本地备份目录。\n使用 tar 命令将系统备份到本地备份文件，排除不需要备份的目录。\n\n### 4. 检查挂载：\n\n- 定义远程目录下的日志文件，用于判断路径是否成功挂载。\n- 检查日志文件是否存在以判断挂载是否成功。\n    如果挂载失败，记录失败日志。\n    如果挂载成功，执行以下操作：\n\n        记录挂载成功日志。\n        复制本地备份文件到远程共享目录。\n        删除本地备份文件。\n        删除远程3天前的备份文件，并记录日志。\n        记录备份成功日志。\n\n## 二、详细脚本\n\n```shell\n#!/bin/sh\n#此脚本用于将linux系统备份到windows共享文件夹或NAS服务器，\n#原理是1.备份系统到本地2.挂载远程路径到linux3.将备份文件复制到该路径下4.删除过期的备份文件、断开连接\n\n# 1. 定义变量\nusername='backup'              # 访问远程共享目录的用户名\npassword='backup'              # 访问远程共享目录的密码\nremotepath=\"//172.29.60.22/backup/linux/oracle\"  # 远程共享目录路径\n\nlocalpath=\"/backup22\"          # 本地挂载点\numount $localpath              # 先卸载本地挂载点，避免异常\n\n# 2. 挂载远程共享目录到本地\nmount -t cifs -o username=$username,password=$password $remotepath $localpath\n\n# 3. 定义本地备份路径和文件名\nlocalBackupPath=\"/usr/localbackup\"\nbackupToFile=$localBackupPath/$HOSTNAME\"_backup`date +%y%m%d`.tgz\"\n\n# 4. 定义要删除的3天前的备份文件路径\nbeforeThreeDayFile=\"/backup22/oradb_backup`date -d -8day +%y%m%d`.tgz\"\n\n# 5. 检查并创建本地备份目录\nif [ ! -d \"$localBackupPath\" ]; then\n    mkdir $localBackupPath\nfi\n\n# 6. 备份系统到本地备份文件\ntar -cvpzf $backupToFile --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media --exclude=$localBackupPath --exclude=$localpath /\n\n# 7. 定义远程目录下的日志文件，用于判断路径是否成功挂载\nlogFile=\"/backup22/backup_log_in22.txt\"\n\n# 8. 检查挂载是否成功\nif [ ! -f \"$logFile\" ]; then  \n    echo -e \"`date +%y%m%d_%T`挂载失败\\n\" >> \"/backup22/backup_log_local.txt\"\n    echo -e \"`date +%y%m%d_%T`挂载失败\\n\"\nelse\n    echo -e \"`date +%y%m%d_%T`已挂载备份服务器到本地\\n\" >> \"$logFile\"\n    \n    # 9. 复制备份文件到远程共享目录\n    cp $backupToFile $localpath\n    \n    # 10. 删除本地备份文件\n    rm -f $backupToFile\n    \n    # 11. 删除远程3天前的备份文件\n    rm -f $beforeThreeDayFile\n    echo -e \"\\n三天前的文件已删除\"$beforeThreeDayFile >> \"$logFile\"\n    \n    # 12. 记录备份成功日志\n    echo -e \"\\n`date +%y%m%d_%T`备份成功_\"$backupToFile >> \"$logFile\"\n    echo -e \"\\n`date +%y%m%d_%T`备份成功_\"$backupToFile\nfi\n```\n\n## 三、原纪录\n\nhttps://blog.csdn.net/lglglgl/article/details/80334546","slug":"10未分类/10.1.linux系统备份到NAS服务器","published":1,"updated":"2024-07-19T10:35:35.646Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrb000uj38a41rpa67k","content":"<h2 id=\"一、流程步骤解释\">一、流程步骤解释</h2>\n<h3 id=\"1-定义变量：\">1. 定义变量：</h3>\n<p>设置用于访问远程共享目录的用户名和密码。<br>\n定义远程共享目录路径。<br>\n定义本地挂载点。</p>\n<h3 id=\"2-挂载远程共享目录：\">2. 挂载远程共享目录：</h3>\n<p>先卸载本地挂载点，避免异常。<br>\n使用 mount 命令将远程共享目录挂载到本地路径。</p>\n<h3 id=\"3-本地备份：\">3. 本地备份：</h3>\n<p>定义本地备份路径和备份文件名。<br>\n检查并创建本地备份目录。<br>\n使用 tar 命令将系统备份到本地备份文件，排除不需要备份的目录。</p>\n<h3 id=\"4-检查挂载：\">4. 检查挂载：</h3>\n<ul>\n<li>\n<p>定义远程目录下的日志文件，用于判断路径是否成功挂载。</p>\n</li>\n<li>\n<p>检查日志文件是否存在以判断挂载是否成功。<br>\n如果挂载失败，记录失败日志。<br>\n如果挂载成功，执行以下操作：</p>\n<pre><code>  记录挂载成功日志。\n  复制本地备份文件到远程共享目录。\n  删除本地备份文件。\n  删除远程3天前的备份文件，并记录日志。\n  记录备份成功日志。\n</code></pre>\n</li>\n</ul>\n<h2 id=\"二、详细脚本\">二、详细脚本</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">此脚本用于将linux系统备份到windows共享文件夹或NAS服务器，</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原理是1.备份系统到本地2.挂载远程路径到linux3.将备份文件复制到该路径下4.删除过期的备份文件、断开连接</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 定义变量</span></span><br><span class=\"line\">username=&#x27;backup&#x27;              # 访问远程共享目录的用户名</span><br><span class=\"line\">password=&#x27;backup&#x27;              # 访问远程共享目录的密码</span><br><span class=\"line\">remotepath=&quot;//172.29.60.22/backup/linux/oracle&quot;  # 远程共享目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">localpath=&quot;/backup22&quot;          # 本地挂载点</span><br><span class=\"line\">umount $localpath              # 先卸载本地挂载点，避免异常</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 挂载远程共享目录到本地</span></span><br><span class=\"line\">mount -t cifs -o username=$username,password=$password $remotepath $localpath</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 定义本地备份路径和文件名</span></span><br><span class=\"line\">localBackupPath=&quot;/usr/localbackup&quot;</span><br><span class=\"line\">backupToFile=$localBackupPath/$HOSTNAME&quot;_backup`date +%y%m%d`.tgz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 定义要删除的3天前的备份文件路径</span></span><br><span class=\"line\">beforeThreeDayFile=&quot;/backup22/oradb_backup`date -d -8day +%y%m%d`.tgz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 检查并创建本地备份目录</span></span><br><span class=\"line\">if [ ! -d &quot;$localBackupPath&quot; ]; then</span><br><span class=\"line\">    mkdir $localBackupPath</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6. 备份系统到本地备份文件</span></span><br><span class=\"line\">tar -cvpzf $backupToFile --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media --exclude=$localBackupPath --exclude=$localpath /</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7. 定义远程目录下的日志文件，用于判断路径是否成功挂载</span></span><br><span class=\"line\">logFile=&quot;/backup22/backup_log_in22.txt&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">8. 检查挂载是否成功</span></span><br><span class=\"line\">if [ ! -f &quot;$logFile&quot; ]; then  </span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`挂载失败\\n&quot; &gt;&gt; &quot;/backup22/backup_log_local.txt&quot;</span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`挂载失败\\n&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`已挂载备份服务器到本地\\n&quot; &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 9. 复制备份文件到远程共享目录</span><br><span class=\"line\">    cp $backupToFile $localpath</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 10. 删除本地备份文件</span><br><span class=\"line\">    rm -f $backupToFile</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 11. 删除远程3天前的备份文件</span><br><span class=\"line\">    rm -f $beforeThreeDayFile</span><br><span class=\"line\">    echo -e &quot;\\n三天前的文件已删除&quot;$beforeThreeDayFile &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 12. 记录备份成功日志</span><br><span class=\"line\">    echo -e &quot;\\n`date +%y%m%d_%T`备份成功_&quot;$backupToFile &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    echo -e &quot;\\n`date +%y%m%d_%T`备份成功_&quot;$backupToFile</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、原纪录\">三、原纪录</h2>\n<p><a href=\"https://blog.csdn.net/lglglgl/article/details/80334546\">https://blog.csdn.net/lglglgl/article/details/80334546</a></p>\n","excerpt":"","more":"<h2 id=\"一、流程步骤解释\">一、流程步骤解释</h2>\n<h3 id=\"1-定义变量：\">1. 定义变量：</h3>\n<p>设置用于访问远程共享目录的用户名和密码。<br>\n定义远程共享目录路径。<br>\n定义本地挂载点。</p>\n<h3 id=\"2-挂载远程共享目录：\">2. 挂载远程共享目录：</h3>\n<p>先卸载本地挂载点，避免异常。<br>\n使用 mount 命令将远程共享目录挂载到本地路径。</p>\n<h3 id=\"3-本地备份：\">3. 本地备份：</h3>\n<p>定义本地备份路径和备份文件名。<br>\n检查并创建本地备份目录。<br>\n使用 tar 命令将系统备份到本地备份文件，排除不需要备份的目录。</p>\n<h3 id=\"4-检查挂载：\">4. 检查挂载：</h3>\n<ul>\n<li>\n<p>定义远程目录下的日志文件，用于判断路径是否成功挂载。</p>\n</li>\n<li>\n<p>检查日志文件是否存在以判断挂载是否成功。<br>\n如果挂载失败，记录失败日志。<br>\n如果挂载成功，执行以下操作：</p>\n<pre><code>  记录挂载成功日志。\n  复制本地备份文件到远程共享目录。\n  删除本地备份文件。\n  删除远程3天前的备份文件，并记录日志。\n  记录备份成功日志。\n</code></pre>\n</li>\n</ul>\n<h2 id=\"二、详细脚本\">二、详细脚本</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">此脚本用于将linux系统备份到windows共享文件夹或NAS服务器，</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原理是1.备份系统到本地2.挂载远程路径到linux3.将备份文件复制到该路径下4.删除过期的备份文件、断开连接</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 定义变量</span></span><br><span class=\"line\">username=&#x27;backup&#x27;              # 访问远程共享目录的用户名</span><br><span class=\"line\">password=&#x27;backup&#x27;              # 访问远程共享目录的密码</span><br><span class=\"line\">remotepath=&quot;//172.29.60.22/backup/linux/oracle&quot;  # 远程共享目录路径</span><br><span class=\"line\"></span><br><span class=\"line\">localpath=&quot;/backup22&quot;          # 本地挂载点</span><br><span class=\"line\">umount $localpath              # 先卸载本地挂载点，避免异常</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 挂载远程共享目录到本地</span></span><br><span class=\"line\">mount -t cifs -o username=$username,password=$password $remotepath $localpath</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 定义本地备份路径和文件名</span></span><br><span class=\"line\">localBackupPath=&quot;/usr/localbackup&quot;</span><br><span class=\"line\">backupToFile=$localBackupPath/$HOSTNAME&quot;_backup`date +%y%m%d`.tgz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 定义要删除的3天前的备份文件路径</span></span><br><span class=\"line\">beforeThreeDayFile=&quot;/backup22/oradb_backup`date -d -8day +%y%m%d`.tgz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 检查并创建本地备份目录</span></span><br><span class=\"line\">if [ ! -d &quot;$localBackupPath&quot; ]; then</span><br><span class=\"line\">    mkdir $localBackupPath</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6. 备份系统到本地备份文件</span></span><br><span class=\"line\">tar -cvpzf $backupToFile --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media --exclude=$localBackupPath --exclude=$localpath /</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7. 定义远程目录下的日志文件，用于判断路径是否成功挂载</span></span><br><span class=\"line\">logFile=&quot;/backup22/backup_log_in22.txt&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">8. 检查挂载是否成功</span></span><br><span class=\"line\">if [ ! -f &quot;$logFile&quot; ]; then  </span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`挂载失败\\n&quot; &gt;&gt; &quot;/backup22/backup_log_local.txt&quot;</span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`挂载失败\\n&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;`date +%y%m%d_%T`已挂载备份服务器到本地\\n&quot; &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 9. 复制备份文件到远程共享目录</span><br><span class=\"line\">    cp $backupToFile $localpath</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 10. 删除本地备份文件</span><br><span class=\"line\">    rm -f $backupToFile</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 11. 删除远程3天前的备份文件</span><br><span class=\"line\">    rm -f $beforeThreeDayFile</span><br><span class=\"line\">    echo -e &quot;\\n三天前的文件已删除&quot;$beforeThreeDayFile &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 12. 记录备份成功日志</span><br><span class=\"line\">    echo -e &quot;\\n`date +%y%m%d_%T`备份成功_&quot;$backupToFile &gt;&gt; &quot;$logFile&quot;</span><br><span class=\"line\">    echo -e &quot;\\n`date +%y%m%d_%T`备份成功_&quot;$backupToFile</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、原纪录\">三、原纪录</h2>\n<p><a href=\"https://blog.csdn.net/lglglgl/article/details/80334546\">https://blog.csdn.net/lglglgl/article/details/80334546</a></p>\n"},{"title":"9.1.docker提示磁盘空间不足","author":"空空","_content":"\n## 简述\n1. docker启动异常，发现磁盘空间不足，`/var/lib/docker`目录的使用率过高。\n2. 进一步检查后，发现inode已经用尽，这是问题的根本。\n3. 通过统计根目录下每个目录的文件数量，确认/data目录中的文件数量异常,\n4. 溯源到开发端的一个调度监控插件，频繁写入大量日志记录。\n5. 与开发端沟通后，设置定期清理/data目录中的文件，释放了大量inode。\n6. 重新启动之前无法启动的Docker容器，恢复正常。\n\n\n\n## 1. 尝试启动Docker容器，报错显示磁盘空间不足\n```shell\n[root@dahouzi-dev ~]# docker start 03fc94c2b9d5\nError response from daemon: mkdir /var/lib/docker/overlay2/2409d571b52865348ec99b52e6d3fdca07a2cca7b4cde2be63b6bb264c6adb58/merged: no space left on device\nError: failed to start containers: 03fc94c2b9d5\n```\n\n## 2. 查看磁盘使用情况，发现/var/lib/docker的使用率很高\n```shell\n[root@dahouzi-dev overlay2]# df -h\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        99G   72G   23G  76% /\ndevtmpfs        7.8G     0  7.8G   0% /dev\ntmpfs           7.8G  4.0K  7.8G   1% /dev/shm\ntmpfs           7.8G  1.7M  7.8G   1% /run\ntmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup\ntmpfs           1.6G     0  1.6G   0% /run/user/0\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged\n\n```\n\n## 3. 查看inode使用情况，发现inode已满\n已达到系统默认最大值6553600\n```shell\n[root@dahouzi-dev overlay2]# df -i\nFilesystem      Inodes   IUsed   IFree IUse% Mounted on\n/dev/vda1      6553600 6553600       0  100% /\ndevtmpfs       2030601     360 2030241    1% /dev\ntmpfs          2033290       3 2033287    1% /dev/shm\ntmpfs          2033290     784 2032506    1% /run\ntmpfs          2033290      16 2033274    1% /sys/fs/cgroup\ntmpfs          2033290       1 2033289    1% /run/user/0\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged\n\n```\n\n## 4. 查看所有Docker容器的状态\n```shell\n[root@dahouzi-dev containers]# docker ps -a\nCONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS                          PORTS                                                  NAMES\n196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               \"/usr/bin/docker-ent…\"   42 hours ago   Exited (0) About a minute ago                                                          dev-minio-standalone-04\n03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          \"start-kafka.sh\"         2 days ago     Exited (1) 11 hours ago                                                                dev-kafka-standalone-01\n499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   \"/bin/tini -- /usr/l…\"   2 days ago     Up 47 hours                     0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp         dev-es-standalone-01\nc4639ca30b87   nacos/nacos-server:v2.1.1                              \"bin/docker-startup.…\"   2 days ago     Up 2 days                       0.0.0.0:8848->8848/tcp                                 dev-nacos-standalone-01\n859f688f4f88   mysql:8.0.32                                           \"docker-entrypoint.s…\"   2 days ago     Exited (2) 9 hours ago                                                                 dev-mysql-standalone-01\nf73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 \"/bin/tini -- /usr/l…\"   7 weeks ago    Exited (137) 2 days ago                                                                dev-kibana-standalone-01\nedabda1c3642   zookeeper:3.7.1                                        \"/docker-entrypoint.…\"   7 weeks ago    Up 2 days                       2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp, 8080/tcp   dev-zookeeper-standalone-01\n2269262cd40b   redis:7.0.11                                           \"docker-entrypoint.s…\"   7 weeks ago    Up 2 days                       0.0.0.0:6379->6379/tcp                                 dev-redis-standalone-01\nc2c59fff741c   portainer/portainer                                    \"/portainer\"             5 months ago   Up 2 days                       0.0.0.0:9999->9000/tcp                                 portainer\n```\n\n## 5. 统计根目录下每个目录的文件数量\n关注`/data 5956444`是容器挂载出来的文件夹，进一步统计或进入查看即可发现原因\n```shell\n[root@dahouzi-dev overlay2]# for i in /*; do echo $i; find $i | wc -l; done\n/bin\n1\n/boot\n332\n--------/data 5956444-------\n/dev\n369\n/etc\n2469\n/ftpdir\n146\n/ftpdir1\n12\n/ftpoffline\n1\n/home\n28211\n/lib\n1\n/lib64\n1\n/lost+found\n1\n/media\n1\n/mnt\n1\n/opt\n263923\n/proc\n294447\n/root\n3651\n/run\n649\n/sbin\n1\n/srv\n1\n/sys\n245\n/tmp\n1\n/usr\n475924\n/var\n147674\n```\n\n## 6. 重启之前无法启动的容器\n```shell\n[root@dahouzi-dev ~]# docker start 03fc94c2b9d5\n03fc94c2b9d5\n```\n\n## 7. 验证容器成功启动\n```\n[root@dahouzi-dev ~]# docker ps\nCONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS              PORTS                                                  NAMES\n196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               \"/usr/bin/docker-ent…\"   42 hours ago   Up About a minute                                                          dev-minio-standalone-04\n03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          \"start-kafka.sh\"         2 days ago     Up 2 seconds                                                                dev-kafka-standalone-01\n499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   \"/bin/tini -- /usr/l…\"   2 days ago     Up 47 hours         0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp         dev-es-standalone-01\nc4639ca30b87   nacos/nacos-server:v2.1.1                              \"bin/docker-startup.…\"   2 days ago     Up 2 days           0.0.0.0:8848->8848/tcp                                 dev-nacos-standalone-01\n859f688f4f88   mysql:8.0.32                                           \"docker-entrypoint.s…\"   2 days ago     Up 1 second                                                                 dev-mysql-standalone-01\nf73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 \"/bin/tini -- /usr/l…\"   7 weeks ago    Up About a minute                                                          dev-kibana-standalone-01\nedabda1c3642   zookeeper:3.7.1                                        \"/docker-entrypoint.…\"   7 weeks ago    Up 2 days           2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp, 8080/tcp   dev-zookeeper-standalone-01\n2269262cd40b   redis:7.0.11                                           \"docker-entrypoint.s…\"   7 weeks ago    Up 2 days           0.0.0.0:6379->6379/tcp                                 dev-redis-standalone-01\nc2c59fff741c   portainer/portainer                                    \"/portainer\"             5 months ago   Up 2 days           0.0.0.0:9999->9000/tcp                                 portainer\n```\n\n","source":"_posts/09异常处理/9.1.docker提示磁盘空间不足.md","raw":"\n---\ntitle: 9.1.docker提示磁盘空间不足\nauthor: 空空\n---\n\n## 简述\n1. docker启动异常，发现磁盘空间不足，`/var/lib/docker`目录的使用率过高。\n2. 进一步检查后，发现inode已经用尽，这是问题的根本。\n3. 通过统计根目录下每个目录的文件数量，确认/data目录中的文件数量异常,\n4. 溯源到开发端的一个调度监控插件，频繁写入大量日志记录。\n5. 与开发端沟通后，设置定期清理/data目录中的文件，释放了大量inode。\n6. 重新启动之前无法启动的Docker容器，恢复正常。\n\n\n\n## 1. 尝试启动Docker容器，报错显示磁盘空间不足\n```shell\n[root@dahouzi-dev ~]# docker start 03fc94c2b9d5\nError response from daemon: mkdir /var/lib/docker/overlay2/2409d571b52865348ec99b52e6d3fdca07a2cca7b4cde2be63b6bb264c6adb58/merged: no space left on device\nError: failed to start containers: 03fc94c2b9d5\n```\n\n## 2. 查看磁盘使用情况，发现/var/lib/docker的使用率很高\n```shell\n[root@dahouzi-dev overlay2]# df -h\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        99G   72G   23G  76% /\ndevtmpfs        7.8G     0  7.8G   0% /dev\ntmpfs           7.8G  4.0K  7.8G   1% /dev/shm\ntmpfs           7.8G  1.7M  7.8G   1% /run\ntmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup\ntmpfs           1.6G     0  1.6G   0% /run/user/0\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged\noverlay          99G   72G   23G  76% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged\n\n```\n\n## 3. 查看inode使用情况，发现inode已满\n已达到系统默认最大值6553600\n```shell\n[root@dahouzi-dev overlay2]# df -i\nFilesystem      Inodes   IUsed   IFree IUse% Mounted on\n/dev/vda1      6553600 6553600       0  100% /\ndevtmpfs       2030601     360 2030241    1% /dev\ntmpfs          2033290       3 2033287    1% /dev/shm\ntmpfs          2033290     784 2032506    1% /run\ntmpfs          2033290      16 2033274    1% /sys/fs/cgroup\ntmpfs          2033290       1 2033289    1% /run/user/0\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged\noverlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged\n\n```\n\n## 4. 查看所有Docker容器的状态\n```shell\n[root@dahouzi-dev containers]# docker ps -a\nCONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS                          PORTS                                                  NAMES\n196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               \"/usr/bin/docker-ent…\"   42 hours ago   Exited (0) About a minute ago                                                          dev-minio-standalone-04\n03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          \"start-kafka.sh\"         2 days ago     Exited (1) 11 hours ago                                                                dev-kafka-standalone-01\n499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   \"/bin/tini -- /usr/l…\"   2 days ago     Up 47 hours                     0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp         dev-es-standalone-01\nc4639ca30b87   nacos/nacos-server:v2.1.1                              \"bin/docker-startup.…\"   2 days ago     Up 2 days                       0.0.0.0:8848->8848/tcp                                 dev-nacos-standalone-01\n859f688f4f88   mysql:8.0.32                                           \"docker-entrypoint.s…\"   2 days ago     Exited (2) 9 hours ago                                                                 dev-mysql-standalone-01\nf73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 \"/bin/tini -- /usr/l…\"   7 weeks ago    Exited (137) 2 days ago                                                                dev-kibana-standalone-01\nedabda1c3642   zookeeper:3.7.1                                        \"/docker-entrypoint.…\"   7 weeks ago    Up 2 days                       2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp, 8080/tcp   dev-zookeeper-standalone-01\n2269262cd40b   redis:7.0.11                                           \"docker-entrypoint.s…\"   7 weeks ago    Up 2 days                       0.0.0.0:6379->6379/tcp                                 dev-redis-standalone-01\nc2c59fff741c   portainer/portainer                                    \"/portainer\"             5 months ago   Up 2 days                       0.0.0.0:9999->9000/tcp                                 portainer\n```\n\n## 5. 统计根目录下每个目录的文件数量\n关注`/data 5956444`是容器挂载出来的文件夹，进一步统计或进入查看即可发现原因\n```shell\n[root@dahouzi-dev overlay2]# for i in /*; do echo $i; find $i | wc -l; done\n/bin\n1\n/boot\n332\n--------/data 5956444-------\n/dev\n369\n/etc\n2469\n/ftpdir\n146\n/ftpdir1\n12\n/ftpoffline\n1\n/home\n28211\n/lib\n1\n/lib64\n1\n/lost+found\n1\n/media\n1\n/mnt\n1\n/opt\n263923\n/proc\n294447\n/root\n3651\n/run\n649\n/sbin\n1\n/srv\n1\n/sys\n245\n/tmp\n1\n/usr\n475924\n/var\n147674\n```\n\n## 6. 重启之前无法启动的容器\n```shell\n[root@dahouzi-dev ~]# docker start 03fc94c2b9d5\n03fc94c2b9d5\n```\n\n## 7. 验证容器成功启动\n```\n[root@dahouzi-dev ~]# docker ps\nCONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS              PORTS                                                  NAMES\n196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               \"/usr/bin/docker-ent…\"   42 hours ago   Up About a minute                                                          dev-minio-standalone-04\n03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          \"start-kafka.sh\"         2 days ago     Up 2 seconds                                                                dev-kafka-standalone-01\n499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   \"/bin/tini -- /usr/l…\"   2 days ago     Up 47 hours         0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp         dev-es-standalone-01\nc4639ca30b87   nacos/nacos-server:v2.1.1                              \"bin/docker-startup.…\"   2 days ago     Up 2 days           0.0.0.0:8848->8848/tcp                                 dev-nacos-standalone-01\n859f688f4f88   mysql:8.0.32                                           \"docker-entrypoint.s…\"   2 days ago     Up 1 second                                                                 dev-mysql-standalone-01\nf73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 \"/bin/tini -- /usr/l…\"   7 weeks ago    Up About a minute                                                          dev-kibana-standalone-01\nedabda1c3642   zookeeper:3.7.1                                        \"/docker-entrypoint.…\"   7 weeks ago    Up 2 days           2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp, 8080/tcp   dev-zookeeper-standalone-01\n2269262cd40b   redis:7.0.11                                           \"docker-entrypoint.s…\"   7 weeks ago    Up 2 days           0.0.0.0:6379->6379/tcp                                 dev-redis-standalone-01\nc2c59fff741c   portainer/portainer                                    \"/portainer\"             5 months ago   Up 2 days           0.0.0.0:9999->9000/tcp                                 portainer\n```\n\n","slug":"09异常处理/9.1.docker提示磁盘空间不足","published":1,"date":"2024-07-18T04:50:27.016Z","updated":"2024-07-20T07:25:40.783Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrc000vj38a4in9fwlk","content":"<h2 id=\"简述\">简述</h2>\n<ol>\n<li>docker启动异常，发现磁盘空间不足，<code>/var/lib/docker</code>目录的使用率过高。</li>\n<li>进一步检查后，发现inode已经用尽，这是问题的根本。</li>\n<li>通过统计根目录下每个目录的文件数量，确认/data目录中的文件数量异常,</li>\n<li>溯源到开发端的一个调度监控插件，频繁写入大量日志记录。</li>\n<li>与开发端沟通后，设置定期清理/data目录中的文件，释放了大量inode。</li>\n<li>重新启动之前无法启动的Docker容器，恢复正常。</li>\n</ol>\n<h2 id=\"1-尝试启动Docker容器，报错显示磁盘空间不足\">1. 尝试启动Docker容器，报错显示磁盘空间不足</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker start 03fc94c2b9d5</span><br><span class=\"line\">Error response from daemon: mkdir /var/lib/docker/overlay2/2409d571b52865348ec99b52e6d3fdca07a2cca7b4cde2be63b6bb264c6adb58/merged: no space left on device</span><br><span class=\"line\">Error: failed to start containers: 03fc94c2b9d5</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-查看磁盘使用情况，发现-var-lib-docker的使用率很高\">2. 查看磁盘使用情况，发现/var/lib/docker的使用率很高</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/vda1        99G   72G   23G  76% /</span><br><span class=\"line\">devtmpfs        7.8G     0  7.8G   0% /dev</span><br><span class=\"line\">tmpfs           7.8G  4.0K  7.8G   1% /dev/shm</span><br><span class=\"line\">tmpfs           7.8G  1.7M  7.8G   1% /run</span><br><span class=\"line\">tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           1.6G     0  1.6G   0% /run/user/0</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-查看inode使用情况，发现inode已满\">3. 查看inode使用情况，发现inode已满</h2>\n<p>已达到系统默认最大值6553600</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# df -i</span><br><span class=\"line\">Filesystem      Inodes   IUsed   IFree IUse% Mounted on</span><br><span class=\"line\">/dev/vda1      6553600 6553600       0  100% /</span><br><span class=\"line\">devtmpfs       2030601     360 2030241    1% /dev</span><br><span class=\"line\">tmpfs          2033290       3 2033287    1% /dev/shm</span><br><span class=\"line\">tmpfs          2033290     784 2032506    1% /run</span><br><span class=\"line\">tmpfs          2033290      16 2033274    1% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs          2033290       1 2033289    1% /run/user/0</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看所有Docker容器的状态\">4. 查看所有Docker容器的状态</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev containers]# docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS                          PORTS                                                  NAMES</span><br><span class=\"line\">196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               &quot;/usr/bin/docker-ent…&quot;   42 hours ago   Exited (0) About a minute ago                                                          dev-minio-standalone-04</span><br><span class=\"line\">03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          &quot;start-kafka.sh&quot;         2 days ago     Exited (1) 11 hours ago                                                                dev-kafka-standalone-01</span><br><span class=\"line\">499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   &quot;/bin/tini -- /usr/l…&quot;   2 days ago     Up 47 hours                     0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp         dev-es-standalone-01</span><br><span class=\"line\">c4639ca30b87   nacos/nacos-server:v2.1.1                              &quot;bin/docker-startup.…&quot;   2 days ago     Up 2 days                       0.0.0.0:8848-&gt;8848/tcp                                 dev-nacos-standalone-01</span><br><span class=\"line\">859f688f4f88   mysql:8.0.32                                           &quot;docker-entrypoint.s…&quot;   2 days ago     Exited (2) 9 hours ago                                                                 dev-mysql-standalone-01</span><br><span class=\"line\">f73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 &quot;/bin/tini -- /usr/l…&quot;   7 weeks ago    Exited (137) 2 days ago                                                                dev-kibana-standalone-01</span><br><span class=\"line\">edabda1c3642   zookeeper:3.7.1                                        &quot;/docker-entrypoint.…&quot;   7 weeks ago    Up 2 days                       2888/tcp, 3888/tcp, 0.0.0.0:2181-&gt;2181/tcp, 8080/tcp   dev-zookeeper-standalone-01</span><br><span class=\"line\">2269262cd40b   redis:7.0.11                                           &quot;docker-entrypoint.s…&quot;   7 weeks ago    Up 2 days                       0.0.0.0:6379-&gt;6379/tcp                                 dev-redis-standalone-01</span><br><span class=\"line\">c2c59fff741c   portainer/portainer                                    &quot;/portainer&quot;             5 months ago   Up 2 days                       0.0.0.0:9999-&gt;9000/tcp                                 portainer</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-统计根目录下每个目录的文件数量\">5. 统计根目录下每个目录的文件数量</h2>\n<p>关注<code>/data 5956444</code>是容器挂载出来的文件夹，进一步统计或进入查看即可发现原因</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# for i in /*; do echo $i; find $i | wc -l; done</span><br><span class=\"line\">/bin</span><br><span class=\"line\">1</span><br><span class=\"line\">/boot</span><br><span class=\"line\">332</span><br><span class=\"line\">--------/data 5956444-------</span><br><span class=\"line\">/dev</span><br><span class=\"line\">369</span><br><span class=\"line\">/etc</span><br><span class=\"line\">2469</span><br><span class=\"line\">/ftpdir</span><br><span class=\"line\">146</span><br><span class=\"line\">/ftpdir1</span><br><span class=\"line\">12</span><br><span class=\"line\">/ftpoffline</span><br><span class=\"line\">1</span><br><span class=\"line\">/home</span><br><span class=\"line\">28211</span><br><span class=\"line\">/lib</span><br><span class=\"line\">1</span><br><span class=\"line\">/lib64</span><br><span class=\"line\">1</span><br><span class=\"line\">/lost+found</span><br><span class=\"line\">1</span><br><span class=\"line\">/media</span><br><span class=\"line\">1</span><br><span class=\"line\">/mnt</span><br><span class=\"line\">1</span><br><span class=\"line\">/opt</span><br><span class=\"line\">263923</span><br><span class=\"line\">/proc</span><br><span class=\"line\">294447</span><br><span class=\"line\">/root</span><br><span class=\"line\">3651</span><br><span class=\"line\">/run</span><br><span class=\"line\">649</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">1</span><br><span class=\"line\">/srv</span><br><span class=\"line\">1</span><br><span class=\"line\">/sys</span><br><span class=\"line\">245</span><br><span class=\"line\">/tmp</span><br><span class=\"line\">1</span><br><span class=\"line\">/usr</span><br><span class=\"line\">475924</span><br><span class=\"line\">/var</span><br><span class=\"line\">147674</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-重启之前无法启动的容器\">6. 重启之前无法启动的容器</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker start 03fc94c2b9d5</span><br><span class=\"line\">03fc94c2b9d5</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-验证容器成功启动\">7. 验证容器成功启动</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS              PORTS                                                  NAMES</span><br><span class=\"line\">196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               &quot;/usr/bin/docker-ent…&quot;   42 hours ago   Up About a minute                                                          dev-minio-standalone-04</span><br><span class=\"line\">03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          &quot;start-kafka.sh&quot;         2 days ago     Up 2 seconds                                                                dev-kafka-standalone-01</span><br><span class=\"line\">499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   &quot;/bin/tini -- /usr/l…&quot;   2 days ago     Up 47 hours         0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp         dev-es-standalone-01</span><br><span class=\"line\">c4639ca30b87   nacos/nacos-server:v2.1.1                              &quot;bin/docker-startup.…&quot;   2 days ago     Up 2 days           0.0.0.0:8848-&gt;8848/tcp                                 dev-nacos-standalone-01</span><br><span class=\"line\">859f688f4f88   mysql:8.0.32                                           &quot;docker-entrypoint.s…&quot;   2 days ago     Up 1 second                                                                 dev-mysql-standalone-01</span><br><span class=\"line\">f73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 &quot;/bin/tini -- /usr/l…&quot;   7 weeks ago    Up About a minute                                                          dev-kibana-standalone-01</span><br><span class=\"line\">edabda1c3642   zookeeper:3.7.1                                        &quot;/docker-entrypoint.…&quot;   7 weeks ago    Up 2 days           2888/tcp, 3888/tcp, 0.0.0.0:2181-&gt;2181/tcp, 8080/tcp   dev-zookeeper-standalone-01</span><br><span class=\"line\">2269262cd40b   redis:7.0.11                                           &quot;docker-entrypoint.s…&quot;   7 weeks ago    Up 2 days           0.0.0.0:6379-&gt;6379/tcp                                 dev-redis-standalone-01</span><br><span class=\"line\">c2c59fff741c   portainer/portainer                                    &quot;/portainer&quot;             5 months ago   Up 2 days           0.0.0.0:9999-&gt;9000/tcp                                 portainer</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"简述\">简述</h2>\n<ol>\n<li>docker启动异常，发现磁盘空间不足，<code>/var/lib/docker</code>目录的使用率过高。</li>\n<li>进一步检查后，发现inode已经用尽，这是问题的根本。</li>\n<li>通过统计根目录下每个目录的文件数量，确认/data目录中的文件数量异常,</li>\n<li>溯源到开发端的一个调度监控插件，频繁写入大量日志记录。</li>\n<li>与开发端沟通后，设置定期清理/data目录中的文件，释放了大量inode。</li>\n<li>重新启动之前无法启动的Docker容器，恢复正常。</li>\n</ol>\n<h2 id=\"1-尝试启动Docker容器，报错显示磁盘空间不足\">1. 尝试启动Docker容器，报错显示磁盘空间不足</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker start 03fc94c2b9d5</span><br><span class=\"line\">Error response from daemon: mkdir /var/lib/docker/overlay2/2409d571b52865348ec99b52e6d3fdca07a2cca7b4cde2be63b6bb264c6adb58/merged: no space left on device</span><br><span class=\"line\">Error: failed to start containers: 03fc94c2b9d5</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-查看磁盘使用情况，发现-var-lib-docker的使用率很高\">2. 查看磁盘使用情况，发现/var/lib/docker的使用率很高</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/vda1        99G   72G   23G  76% /</span><br><span class=\"line\">devtmpfs        7.8G     0  7.8G   0% /dev</span><br><span class=\"line\">tmpfs           7.8G  4.0K  7.8G   1% /dev/shm</span><br><span class=\"line\">tmpfs           7.8G  1.7M  7.8G   1% /run</span><br><span class=\"line\">tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs           1.6G     0  1.6G   0% /run/user/0</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged</span><br><span class=\"line\">overlay          99G   72G   23G  76% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-查看inode使用情况，发现inode已满\">3. 查看inode使用情况，发现inode已满</h2>\n<p>已达到系统默认最大值6553600</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# df -i</span><br><span class=\"line\">Filesystem      Inodes   IUsed   IFree IUse% Mounted on</span><br><span class=\"line\">/dev/vda1      6553600 6553600       0  100% /</span><br><span class=\"line\">devtmpfs       2030601     360 2030241    1% /dev</span><br><span class=\"line\">tmpfs          2033290       3 2033287    1% /dev/shm</span><br><span class=\"line\">tmpfs          2033290     784 2032506    1% /run</span><br><span class=\"line\">tmpfs          2033290      16 2033274    1% /sys/fs/cgroup</span><br><span class=\"line\">tmpfs          2033290       1 2033289    1% /run/user/0</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/16cc70551c2811f5821775984a801cdb4f06f825a557edb347862650628f66d5/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/1f9c213147c08ea2f6e7ad953043f4ae96279be391d223d5cedb769fc2f7e6bf/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b285f624b11407a137448e1c6e74759b52d59b2d049c84ee344247ee7136df05/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/412ab0e2af0495c08968d6ae14d3b6777ba33d15e3d59fe7d1eef5f474e2d81d/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/e4e4f808f6685ff3f525244ea2122c3de054c3ebd828a6c343dd6180a942758e/merged</span><br><span class=\"line\">overlay        6553600 6553600       0  100% /var/lib/docker/overlay2/b9a4fa2196a6980a21d59c4d14737e0fe566a82b8ce55c8e5d3a9452cc3d8419/merged</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看所有Docker容器的状态\">4. 查看所有Docker容器的状态</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev containers]# docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS                          PORTS                                                  NAMES</span><br><span class=\"line\">196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               &quot;/usr/bin/docker-ent…&quot;   42 hours ago   Exited (0) About a minute ago                                                          dev-minio-standalone-04</span><br><span class=\"line\">03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          &quot;start-kafka.sh&quot;         2 days ago     Exited (1) 11 hours ago                                                                dev-kafka-standalone-01</span><br><span class=\"line\">499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   &quot;/bin/tini -- /usr/l…&quot;   2 days ago     Up 47 hours                     0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp         dev-es-standalone-01</span><br><span class=\"line\">c4639ca30b87   nacos/nacos-server:v2.1.1                              &quot;bin/docker-startup.…&quot;   2 days ago     Up 2 days                       0.0.0.0:8848-&gt;8848/tcp                                 dev-nacos-standalone-01</span><br><span class=\"line\">859f688f4f88   mysql:8.0.32                                           &quot;docker-entrypoint.s…&quot;   2 days ago     Exited (2) 9 hours ago                                                                 dev-mysql-standalone-01</span><br><span class=\"line\">f73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 &quot;/bin/tini -- /usr/l…&quot;   7 weeks ago    Exited (137) 2 days ago                                                                dev-kibana-standalone-01</span><br><span class=\"line\">edabda1c3642   zookeeper:3.7.1                                        &quot;/docker-entrypoint.…&quot;   7 weeks ago    Up 2 days                       2888/tcp, 3888/tcp, 0.0.0.0:2181-&gt;2181/tcp, 8080/tcp   dev-zookeeper-standalone-01</span><br><span class=\"line\">2269262cd40b   redis:7.0.11                                           &quot;docker-entrypoint.s…&quot;   7 weeks ago    Up 2 days                       0.0.0.0:6379-&gt;6379/tcp                                 dev-redis-standalone-01</span><br><span class=\"line\">c2c59fff741c   portainer/portainer                                    &quot;/portainer&quot;             5 months ago   Up 2 days                       0.0.0.0:9999-&gt;9000/tcp                                 portainer</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-统计根目录下每个目录的文件数量\">5. 统计根目录下每个目录的文件数量</h2>\n<p>关注<code>/data 5956444</code>是容器挂载出来的文件夹，进一步统计或进入查看即可发现原因</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev overlay2]# for i in /*; do echo $i; find $i | wc -l; done</span><br><span class=\"line\">/bin</span><br><span class=\"line\">1</span><br><span class=\"line\">/boot</span><br><span class=\"line\">332</span><br><span class=\"line\">--------/data 5956444-------</span><br><span class=\"line\">/dev</span><br><span class=\"line\">369</span><br><span class=\"line\">/etc</span><br><span class=\"line\">2469</span><br><span class=\"line\">/ftpdir</span><br><span class=\"line\">146</span><br><span class=\"line\">/ftpdir1</span><br><span class=\"line\">12</span><br><span class=\"line\">/ftpoffline</span><br><span class=\"line\">1</span><br><span class=\"line\">/home</span><br><span class=\"line\">28211</span><br><span class=\"line\">/lib</span><br><span class=\"line\">1</span><br><span class=\"line\">/lib64</span><br><span class=\"line\">1</span><br><span class=\"line\">/lost+found</span><br><span class=\"line\">1</span><br><span class=\"line\">/media</span><br><span class=\"line\">1</span><br><span class=\"line\">/mnt</span><br><span class=\"line\">1</span><br><span class=\"line\">/opt</span><br><span class=\"line\">263923</span><br><span class=\"line\">/proc</span><br><span class=\"line\">294447</span><br><span class=\"line\">/root</span><br><span class=\"line\">3651</span><br><span class=\"line\">/run</span><br><span class=\"line\">649</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">1</span><br><span class=\"line\">/srv</span><br><span class=\"line\">1</span><br><span class=\"line\">/sys</span><br><span class=\"line\">245</span><br><span class=\"line\">/tmp</span><br><span class=\"line\">1</span><br><span class=\"line\">/usr</span><br><span class=\"line\">475924</span><br><span class=\"line\">/var</span><br><span class=\"line\">147674</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-重启之前无法启动的容器\">6. 重启之前无法启动的容器</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker start 03fc94c2b9d5</span><br><span class=\"line\">03fc94c2b9d5</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-验证容器成功启动\">7. 验证容器成功启动</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dahouzi-dev ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE                                                  COMMAND                  CREATED        STATUS              PORTS                                                  NAMES</span><br><span class=\"line\">196fe0f44767   minio/minio:RELEASE.2023-05-04T21-44-30Z               &quot;/usr/bin/docker-ent…&quot;   42 hours ago   Up About a minute                                                          dev-minio-standalone-04</span><br><span class=\"line\">03fc94c2b9d5   wurstmeister/kafka:2.13-2.8.1                          &quot;start-kafka.sh&quot;         2 days ago     Up 2 seconds                                                                dev-kafka-standalone-01</span><br><span class=\"line\">499cda90bd18   docker.elastic.co/elasticsearch/elasticsearch:7.15.2   &quot;/bin/tini -- /usr/l…&quot;   2 days ago     Up 47 hours         0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp         dev-es-standalone-01</span><br><span class=\"line\">c4639ca30b87   nacos/nacos-server:v2.1.1                              &quot;bin/docker-startup.…&quot;   2 days ago     Up 2 days           0.0.0.0:8848-&gt;8848/tcp                                 dev-nacos-standalone-01</span><br><span class=\"line\">859f688f4f88   mysql:8.0.32                                           &quot;docker-entrypoint.s…&quot;   2 days ago     Up 1 second                                                                 dev-mysql-standalone-01</span><br><span class=\"line\">f73314fd956e   docker.elastic.co/kibana/kibana:7.15.2                 &quot;/bin/tini -- /usr/l…&quot;   7 weeks ago    Up About a minute                                                          dev-kibana-standalone-01</span><br><span class=\"line\">edabda1c3642   zookeeper:3.7.1                                        &quot;/docker-entrypoint.…&quot;   7 weeks ago    Up 2 days           2888/tcp, 3888/tcp, 0.0.0.0:2181-&gt;2181/tcp, 8080/tcp   dev-zookeeper-standalone-01</span><br><span class=\"line\">2269262cd40b   redis:7.0.11                                           &quot;docker-entrypoint.s…&quot;   7 weeks ago    Up 2 days           0.0.0.0:6379-&gt;6379/tcp                                 dev-redis-standalone-01</span><br><span class=\"line\">c2c59fff741c   portainer/portainer                                    &quot;/portainer&quot;             5 months ago   Up 2 days           0.0.0.0:9999-&gt;9000/tcp                                 portainer</span><br></pre></td></tr></table></figure>\n"},{"_content":"\n### 1.前置说明\n仅挂载一个文件夹作为存储区。\n\n\n\n```\nmkdir -p /docker_data/minio/{config,data}\n\n\ndocker run -d --name prod_minio_cluster_01 \\\n--restart=always --net=host \\\n-e \"MINIO_ROOT_USER=minioadmin\" \\\n-e \"MINIO_ROOT_PASSWORD=minioadmin\" \\\n-e \"MINIO_PROMETHEUS_AUTH_TYPE=public\" \\\n-v /docker_data/minio/data:/data \\\n-v /docker_data/minio/config:/root/.minio \\\n minio/minio:RELEASE.2023-05-04T21-44-30Z server \\\n --address 192.168.10.181:9000 http://192.168.10.18{1...6}/data\n\n\n\n\nUse `mc admin info` to look for latest server/drive info\n Status:         3 Online, 3 Offline.\nS3-API: http://192.168.10.181:9000\nConsole: http://192.168.10.181:35788 http://172.17.0.1:35788 http://192.168.122.1:35788 http://127.0.0.1:35788\n\nDocumentation: https://min.io/docs/minio/linux/index.html\n\n```\n\n\ndocker stop prod_minio_cluster_01 && docker rm prod_minio_cluster_01\n\n\n### 2.防火墙配置\n```\nfirewall-cmd  --permanent --zone=public --add-port=9000/tcp\nfirewall-cmd  --state\nfirewall-cmd  --reload\n```\n\n\n### 3.使用docker compose部署\n\n```shell\nversion: '3'\nservices:\n  minio1:\n    image: minio/minio:RELEASE.2023-05-04T21-44-30Z\n    hostname: prod_minio_cluster_01\n    volumes:\n      - /docker_data/minio/data:/data\n      - /docker_data/minio/config:/root/.minio\n    expose:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n      MINIO_PROMETHEUS_AUTH_TYPE: public\n    command: server --address 192.168.10.181:9000 http://192.168.10.18{1...6}/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n```\n\n### 4.其它参考（docker部署）\n```bash\ndocker run  --name prod_minio_cluster_06 \\\n--restart=always --net=host \\\n-e \"MINIO_ROOT_USER=minioadmin\" \\\n-e \"MINIO_ROOT_PASSWORD=minioadmin\" \\\n-e \"MINIO_PROMETHEUS_AUTH_TYPE=public\" \\\n-v /data/middleware/minio/data:/data \\\n-v /data/middleware/minio/config:/root/.minio \\\n minio/minio:RELEASE.2023-05-04T21-44-30Z server  http://192.168.139.1{1...4}/data\n\n```","source":"_posts/07中间件/7.6.Minio集群容器部署.md","raw":"\n### 1.前置说明\n仅挂载一个文件夹作为存储区。\n\n\n\n```\nmkdir -p /docker_data/minio/{config,data}\n\n\ndocker run -d --name prod_minio_cluster_01 \\\n--restart=always --net=host \\\n-e \"MINIO_ROOT_USER=minioadmin\" \\\n-e \"MINIO_ROOT_PASSWORD=minioadmin\" \\\n-e \"MINIO_PROMETHEUS_AUTH_TYPE=public\" \\\n-v /docker_data/minio/data:/data \\\n-v /docker_data/minio/config:/root/.minio \\\n minio/minio:RELEASE.2023-05-04T21-44-30Z server \\\n --address 192.168.10.181:9000 http://192.168.10.18{1...6}/data\n\n\n\n\nUse `mc admin info` to look for latest server/drive info\n Status:         3 Online, 3 Offline.\nS3-API: http://192.168.10.181:9000\nConsole: http://192.168.10.181:35788 http://172.17.0.1:35788 http://192.168.122.1:35788 http://127.0.0.1:35788\n\nDocumentation: https://min.io/docs/minio/linux/index.html\n\n```\n\n\ndocker stop prod_minio_cluster_01 && docker rm prod_minio_cluster_01\n\n\n### 2.防火墙配置\n```\nfirewall-cmd  --permanent --zone=public --add-port=9000/tcp\nfirewall-cmd  --state\nfirewall-cmd  --reload\n```\n\n\n### 3.使用docker compose部署\n\n```shell\nversion: '3'\nservices:\n  minio1:\n    image: minio/minio:RELEASE.2023-05-04T21-44-30Z\n    hostname: prod_minio_cluster_01\n    volumes:\n      - /docker_data/minio/data:/data\n      - /docker_data/minio/config:/root/.minio\n    expose:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n      MINIO_PROMETHEUS_AUTH_TYPE: public\n    command: server --address 192.168.10.181:9000 http://192.168.10.18{1...6}/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n```\n\n### 4.其它参考（docker部署）\n```bash\ndocker run  --name prod_minio_cluster_06 \\\n--restart=always --net=host \\\n-e \"MINIO_ROOT_USER=minioadmin\" \\\n-e \"MINIO_ROOT_PASSWORD=minioadmin\" \\\n-e \"MINIO_PROMETHEUS_AUTH_TYPE=public\" \\\n-v /data/middleware/minio/data:/data \\\n-v /data/middleware/minio/config:/root/.minio \\\n minio/minio:RELEASE.2023-05-04T21-44-30Z server  http://192.168.139.1{1...4}/data\n\n```","slug":"07中间件/7.6.Minio集群容器部署","published":1,"date":"2024-07-20T08:37:20.883Z","updated":"2024-07-20T08:39:46.529Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrd000xj38af4wdds7q","content":"<h3 id=\"1-前置说明\">1.前置说明</h3>\n<p>仅挂载一个文件夹作为存储区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /docker_data/minio/&#123;config,data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name prod_minio_cluster_01 \\</span><br><span class=\"line\">--restart=always --net=host \\</span><br><span class=\"line\">-e &quot;MINIO_ROOT_USER=minioadmin&quot; \\</span><br><span class=\"line\">-e &quot;MINIO_ROOT_PASSWORD=minioadmin&quot; \\</span><br><span class=\"line\">-e &quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot; \\</span><br><span class=\"line\">-v /docker_data/minio/data:/data \\</span><br><span class=\"line\">-v /docker_data/minio/config:/root/.minio \\</span><br><span class=\"line\"> minio/minio:RELEASE.2023-05-04T21-44-30Z server \\</span><br><span class=\"line\"> --address 192.168.10.181:9000 http://192.168.10.18&#123;1...6&#125;/data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Use `mc admin info` to look for latest server/drive info</span><br><span class=\"line\"> Status:         3 Online, 3 Offline.</span><br><span class=\"line\">S3-API: http://192.168.10.181:9000</span><br><span class=\"line\">Console: http://192.168.10.181:35788 http://172.17.0.1:35788 http://192.168.122.1:35788 http://127.0.0.1:35788</span><br><span class=\"line\"></span><br><span class=\"line\">Documentation: https://min.io/docs/minio/linux/index.html</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>docker stop prod_minio_cluster_01 &amp;&amp; docker rm prod_minio_cluster_01</p>\n<h3 id=\"2-防火墙配置\">2.防火墙配置</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd  --permanent --zone=public --add-port=9000/tcp</span><br><span class=\"line\">firewall-cmd  --state</span><br><span class=\"line\">firewall-cmd  --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用docker-compose部署\">3.使用docker compose部署</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  minio1:</span><br><span class=\"line\">    image: minio/minio:RELEASE.2023-05-04T21-44-30Z</span><br><span class=\"line\">    hostname: prod_minio_cluster_01</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /docker_data/minio/data:/data</span><br><span class=\"line\">      - /docker_data/minio/config:/root/.minio</span><br><span class=\"line\">    expose:</span><br><span class=\"line\">      - &quot;9000:9000&quot;</span><br><span class=\"line\">      - &quot;9001:9001&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MINIO_ROOT_USER: minioadmin</span><br><span class=\"line\">      MINIO_ROOT_PASSWORD: minioadmin</span><br><span class=\"line\">      MINIO_PROMETHEUS_AUTH_TYPE: public</span><br><span class=\"line\">    command: server --address 192.168.10.181:9000 http://192.168.10.18&#123;1...6&#125;/data</span><br><span class=\"line\">    healthcheck:</span><br><span class=\"line\">      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><span class=\"line\">      interval: 30s</span><br><span class=\"line\">      timeout: 20s</span><br><span class=\"line\">      retries: 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-其它参考（docker部署）\">4.其它参考（docker部署）</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --name prod_minio_cluster_06 \\</span><br><span class=\"line\">--restart=always --net=host \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot;</span> \\</span><br><span class=\"line\">-v /data/middleware/minio/data:/data \\</span><br><span class=\"line\">-v /data/middleware/minio/config:/root/.minio \\</span><br><span class=\"line\"> minio/minio:RELEASE.2023-05-04T21-44-30Z server  http://192.168.139.1&#123;1...4&#125;/data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"1-前置说明\">1.前置说明</h3>\n<p>仅挂载一个文件夹作为存储区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /docker_data/minio/&#123;config,data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name prod_minio_cluster_01 \\</span><br><span class=\"line\">--restart=always --net=host \\</span><br><span class=\"line\">-e &quot;MINIO_ROOT_USER=minioadmin&quot; \\</span><br><span class=\"line\">-e &quot;MINIO_ROOT_PASSWORD=minioadmin&quot; \\</span><br><span class=\"line\">-e &quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot; \\</span><br><span class=\"line\">-v /docker_data/minio/data:/data \\</span><br><span class=\"line\">-v /docker_data/minio/config:/root/.minio \\</span><br><span class=\"line\"> minio/minio:RELEASE.2023-05-04T21-44-30Z server \\</span><br><span class=\"line\"> --address 192.168.10.181:9000 http://192.168.10.18&#123;1...6&#125;/data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Use `mc admin info` to look for latest server/drive info</span><br><span class=\"line\"> Status:         3 Online, 3 Offline.</span><br><span class=\"line\">S3-API: http://192.168.10.181:9000</span><br><span class=\"line\">Console: http://192.168.10.181:35788 http://172.17.0.1:35788 http://192.168.122.1:35788 http://127.0.0.1:35788</span><br><span class=\"line\"></span><br><span class=\"line\">Documentation: https://min.io/docs/minio/linux/index.html</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>docker stop prod_minio_cluster_01 &amp;&amp; docker rm prod_minio_cluster_01</p>\n<h3 id=\"2-防火墙配置\">2.防火墙配置</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd  --permanent --zone=public --add-port=9000/tcp</span><br><span class=\"line\">firewall-cmd  --state</span><br><span class=\"line\">firewall-cmd  --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用docker-compose部署\">3.使用docker compose部署</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  minio1:</span><br><span class=\"line\">    image: minio/minio:RELEASE.2023-05-04T21-44-30Z</span><br><span class=\"line\">    hostname: prod_minio_cluster_01</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /docker_data/minio/data:/data</span><br><span class=\"line\">      - /docker_data/minio/config:/root/.minio</span><br><span class=\"line\">    expose:</span><br><span class=\"line\">      - &quot;9000:9000&quot;</span><br><span class=\"line\">      - &quot;9001:9001&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MINIO_ROOT_USER: minioadmin</span><br><span class=\"line\">      MINIO_ROOT_PASSWORD: minioadmin</span><br><span class=\"line\">      MINIO_PROMETHEUS_AUTH_TYPE: public</span><br><span class=\"line\">    command: server --address 192.168.10.181:9000 http://192.168.10.18&#123;1...6&#125;/data</span><br><span class=\"line\">    healthcheck:</span><br><span class=\"line\">      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><span class=\"line\">      interval: 30s</span><br><span class=\"line\">      timeout: 20s</span><br><span class=\"line\">      retries: 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-其它参考（docker部署）\">4.其它参考（docker部署）</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --name prod_minio_cluster_06 \\</span><br><span class=\"line\">--restart=always --net=host \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot;</span> \\</span><br><span class=\"line\">-v /data/middleware/minio/data:/data \\</span><br><span class=\"line\">-v /data/middleware/minio/config:/root/.minio \\</span><br><span class=\"line\"> minio/minio:RELEASE.2023-05-04T21-44-30Z server  http://192.168.139.1&#123;1...4&#125;/data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"数字取证","_content":"## 1. Final Exam\n`考加粗部分`\n\n- **了解数字取证和调查的原理和先进技术。**\n\n- 组织计算机取证、移动取证、网络取证和大数据取证方面的数字调查。\n\n- **评估符合专业标准和调查流程的数字调查：识别、保存、检查和分析。**\n\n- 报告违反法律、伦理、道德、政策和/或社会标准的计算机数据潜在安全漏洞。\n\n\n## 2. 题目类型\n- EXPLAIN FIVE (5) design goals of Advance Forensics Format (AFF). (10 marks)\n`回答：一个点+一个解释`\n    - 1 design goal = 1 mark\n    - Good explanation of design goal = 1 mark\n    - 5 design goals with explanation = 10 marks\n\n\n\n","source":"_posts/21数字取证/考试内容.md","raw":"\n---\ntitle: 数字取证\n---\n## 1. Final Exam\n`考加粗部分`\n\n- **了解数字取证和调查的原理和先进技术。**\n\n- 组织计算机取证、移动取证、网络取证和大数据取证方面的数字调查。\n\n- **评估符合专业标准和调查流程的数字调查：识别、保存、检查和分析。**\n\n- 报告违反法律、伦理、道德、政策和/或社会标准的计算机数据潜在安全漏洞。\n\n\n## 2. 题目类型\n- EXPLAIN FIVE (5) design goals of Advance Forensics Format (AFF). (10 marks)\n`回答：一个点+一个解释`\n    - 1 design goal = 1 mark\n    - Good explanation of design goal = 1 mark\n    - 5 design goals with explanation = 10 marks\n\n\n\n","slug":"21数字取证/考试内容","published":1,"date":"2024-07-13T06:36:50.749Z","updated":"2024-07-13T06:49:25.923Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqre000zj38a5w9vd329","content":"<h2 id=\"1-Final-Exam\">1. Final Exam</h2>\n<p><code>考加粗部分</code></p>\n<ul>\n<li>\n<p><strong>了解数字取证和调查的原理和先进技术。</strong></p>\n</li>\n<li>\n<p>组织计算机取证、移动取证、网络取证和大数据取证方面的数字调查。</p>\n</li>\n<li>\n<p><strong>评估符合专业标准和调查流程的数字调查：识别、保存、检查和分析。</strong></p>\n</li>\n<li>\n<p>报告违反法律、伦理、道德、政策和/或社会标准的计算机数据潜在安全漏洞。</p>\n</li>\n</ul>\n<h2 id=\"2-题目类型\">2. 题目类型</h2>\n<ul>\n<li>EXPLAIN FIVE (5) design goals of Advance Forensics Format (AFF). (10 marks)<br>\n<code>回答：一个点+一个解释</code>\n<ul>\n<li>1 design goal = 1 mark</li>\n<li>Good explanation of design goal = 1 mark</li>\n<li>5 design goals with explanation = 10 marks</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1-Final-Exam\">1. Final Exam</h2>\n<p><code>考加粗部分</code></p>\n<ul>\n<li>\n<p><strong>了解数字取证和调查的原理和先进技术。</strong></p>\n</li>\n<li>\n<p>组织计算机取证、移动取证、网络取证和大数据取证方面的数字调查。</p>\n</li>\n<li>\n<p><strong>评估符合专业标准和调查流程的数字调查：识别、保存、检查和分析。</strong></p>\n</li>\n<li>\n<p>报告违反法律、伦理、道德、政策和/或社会标准的计算机数据潜在安全漏洞。</p>\n</li>\n</ul>\n<h2 id=\"2-题目类型\">2. 题目类型</h2>\n<ul>\n<li>EXPLAIN FIVE (5) design goals of Advance Forensics Format (AFF). (10 marks)<br>\n<code>回答：一个点+一个解释</code>\n<ul>\n<li>1 design goal = 1 mark</li>\n<li>Good explanation of design goal = 1 mark</li>\n<li>5 design goals with explanation = 10 marks</li>\n</ul>\n</li>\n</ul>\n"},{"title":"01.linux系列","_content":"\n## 阐述Linux权限\n\n\n## 1. 熟悉linux操作系统安装、配置\n1、制作引导U盘\n2、了解服务器型号，和如何进入引导\n3、确定业务类型，和分区规划\n4、每特殊要求就最小化安装和配置网络，管理网测试连通性（如果是dell iDrac口远程进来的另说）\n5、打补丁，加固\n\n\n\n\n\n## 2. 各种操作命令\n如编写各种脚本用于监控，备份，部署，\n\n监控的重点是监控指标，不在脚本，因为监控脚本会根根监控平台的变化而改变。\n\n之前的zabbix、nagios到现在的prometheus，2017年以前是zabbix使用最普遍，因为界面好看，社区活跃。\nnagios免费版没有图形化界面。prometheus随着云原生而兴起。\n\n这些监控平台我都搭建过，这两年以prometheus+grafana为主\n\n\n## 3. 备份\n1、确认网络传输协议SMB路径，NAS的用户名密码作为变量，\n2、卸载卸载本地挂载点再mount\n3、tar -cvpzf压缩文件，文件名加时间标签，复制到NAS的挂载点等待\n4、检查、删除过期备份，关闭链接\n5、对重要系统定期测试恢复情况，异常要有告警日志\n\n\n## 4. 磁盘管理\n### RAID\nRAID0无冗余，速度双倍\nRAID1一比一备份，速度是一倍的磁盘\nRAID10是先组0再组1\nRAID5多用于NAS大容量存储器，用的是奇偶校验码原理，恢复较慢，且有一定风险，同样的奇偶校验码原理还有在储存中间件minio里面用到。\n\n### 卷管理\n磁盘管理涉及到的是磁盘、物理卷、逻辑卷。\n磁盘底层raid容灾，一般固态和机械硬盘的性能差三倍。\n物理卷是关联的磁盘物理分区。\n卷组将分区合并，随后再划分逻辑卷。\n每一层的拆分和组合都是为了功能多样化。\n\n### 空间缩扩容\n最近一次是安装系统是给根分区划小了，只有200G，因为docker的一些数据默认留在根分区没挂到其他分区。\n\n后面需要从home划过来1300G。\n流程是：\n1、测试环境先模拟，写出处理流程在文档\n2、df -h 查看分区情况，确认可转移的空间\n3、确定从/home分区划走1300G给根分区\n4、确认home分区没有业务数据写入，复制一份数据到其他分区，umount\n5、lvreduce -L划出空间，重新格式化，数据迁移回来\n6、lvextend 1300G到centos-root,然后xfs_growfs拓展空间\n7、最后df -hT确认\n\n如果是云服务器，那买一块空白盘添加或者停机扩容，不用自己操作。\n\n\n## 5. 系统跟踪管理\nprometheus有对Linux监控的探针\n\n## 6. 常用指令\n\n| 分类             | 功能                      | 命令                     | 说明                                                                                      |\n|------------------|---------------------------|--------------------------|-----------------------------------------------------------------------------------------|\n| **系统管理**     | 查看系统信息              | `uname -a`               | 显示系统信息，包括内核版本和系统架构                                                      |\n|                  | 查看内核版本              | `uname -r`               | 显示当前运行的内核版本                                                                    |\n|                  | 查看系统发行版信息        | `cat /etc/centos-release`| 显示当前的 CentOS 版本信息                                                                |\n|                  | 查看当前用户              | `whoami`                 | 显示当前登录用户                                                                          |\n|                  | 切换用户                  | `su - [username]`        | 切换到指定用户                                                                            |\n|                  | 查看登录历史              | `last`                   | 显示系统最近的登录记录                                                                    |\n|                  | 系统重启                  | `reboot`                 | 重启系统                                                                                  |\n|                  | 系统关机                  | `shutdown -h now`        | 立即关机                                                                                  |\n|                  | 定时关机                  | `shutdown -h +30`        | 系统将在 30 分钟后关机                                                                    |\n|                  | 查看系统启动时间          | `uptime`                 | 显示系统的启动时间、当前时间、运行时间、用户数和系统负载                                 |\n| **进程管理**     | 查看进程                  | `ps -aux`                | 显示所有进程的详细信息                                                                    |\n|                  | 实时监控进程              | `top`                    | 实时显示系统进程状态和资源使用情况                                                        |\n|                  | 结束进程                  | `kill [PID]`             | 结束指定的进程                                                                            |\n|                  | 强制结束进程              | `kill -9 [PID]`          | 强制结束指定的进程                                                                        |\n|                  | 查看进程树                | `pstree`                 | 以树状图显示进程                                                                          |\n| **磁盘管理**     | 查看磁盘使用情况          | `df -h`                  | 显示磁盘分区的挂载信息和使用情况                                                          |\n|                  | 查看目录大小              | `du -sh [directory]`     | 显示指定目录的大小                                                                        |\n|                  | 挂载文件系统              | `mount`                  | 挂载文件系统                                                                              |\n|                  | 卸载文件系统              | `umount`                 | 卸载文件系统                                                                              |\n|                  | 格式化磁盘                | `mkfs.ext4 /dev/sdX`     | 格式化指定的磁盘分区为 ext4 文件系统                                                      |\n|                  | 检查和修复文件系统        | `fsck`                   | 检查和修复文件系统                                                                        |\n| **网络管理**     | 查看网络配置              | `ifconfig`               | 显示网络接口的配置信息                                                                    |\n|                  | 配置网络接口              | `nmcli`                  | 使用 NetworkManager 命令行工具配置网络接口                                                |\n|                  | 查看路由表                | `route -n`               | 显示路由表信息                                                                            |\n|                  | 测试网络连通性            | `ping`                   | 发送 ICMP 回显请求以测试网络连通性                                                        |\n|                  | 显示网络连接              | `netstat -tunlp`         | 显示系统的所有网络连接                                                                    |\n|                  | 解析 DNS                  | `dig [domain]`           | 进行 DNS 解析查询                                                                         |\n| **用户管理**     | 添加用户                  | `useradd [username]`     | 创建新用户                                                                                |\n|                  | 删除用户                  | `userdel [username]`     | 删除用户                                                                                  |\n|                  | 修改用户密码              | `passwd [username]`      | 修改指定用户的密码                                                                        |\n|                  | 添加组                    | `groupadd [groupname]`   | 创建新组                                                                                  |\n|                  | 删除组                    | `groupdel [groupname]`   | 删除组                                                                                    |\n| **文件管理**     | 查看文件内容              | `cat [file]`             | 显示文件内容                                                                              |\n|                  | 分页查看文件内容          | `less [file]`            | 分页查看文件内容                                                                          |\n|                  | 创建文件                  | `touch [file]`           | 创建一个空文件                                                                            |\n|                  | 删除文件                  | `rm [file]`              | 删除文件                                                                                  |\n|                  | 复制文件                  | `cp [source] [destination]` | 复制文件                                                                              |\n|                  | 移动文件                  | `mv [source] [destination]` | 移动或重命名文件                                                                       |\n|                  | 查找文件                  | `find [path] -name [name]` | 查找文件                                                                                |\n| **包管理**       | 安装软件包                | `yum install [package]`  | 使用 YUM 包管理器安装软件包                                                               |\n|                  | 删除软件包                | `yum remove [package]`   | 使用 YUM 包管理器删除软件包                                                               |\n|                  | 更新系统                  | `yum update`             | 更新系统所有已安装的软件包                                                                |\n|                  | 列出已安装的软件包        | `yum list installed`     | 列出系统中所有已安装的软件包                                                              |\n| **日志管理**     | 查看系统日志              | `journalctl`             | 查看使用 systemd 管理的系统日志                                                           |\n|                  | 查看特定服务日志          | `journalctl -u [service]` | 查看特定服务的日志                                                                       |\n|                  | 实时查看日志              | `tail -f [logfile]`      | 实时查看日志文件内容                                                                      |\n| **性能监控**     | 查看系统性能              | `vmstat`                 | 显示系统的进程、内存、分页、块 I/O、陷阱和 CPU 活动信息                                    |\n|                  | 查看磁盘 I/O 性能         | `iostat`                 | 显示 CPU 使用情况和磁盘 I/O 性能信息                                                      |\n|                  | 跟踪系统调用              | `strace [command]`       | 跟踪指定命令的系统调用                                                                    |\n|                  | 分析系统性能              | `perf`                   | 强大的 Linux 性能分析工具，用于分析 CPU 性能瓶颈、跟踪系统调用等                          |\n| **安全管理**     | 配置防火墙                | `firewall-cmd`           | 使用 firewalld 管理和配置防火墙                                                           |\n|                  | 检查端口状态              | `nmap`                   | 网络扫描工具，用于检查开放端口和服务                                                      |\n|                  | 查看和设置 SELinux 模式   | `sestatus` / `setenforce` | 查看和设置 SELinux 模式                                                                 |\n|                  | 配置 SSH 服务             | `sshd`                   | 配置和管理 SSH 服务                                                                       |\n","source":"_posts/99关于面试/99.1.linux.md","raw":"---\ntitle: 01.linux系列\n\n---\n\n## 阐述Linux权限\n\n\n## 1. 熟悉linux操作系统安装、配置\n1、制作引导U盘\n2、了解服务器型号，和如何进入引导\n3、确定业务类型，和分区规划\n4、每特殊要求就最小化安装和配置网络，管理网测试连通性（如果是dell iDrac口远程进来的另说）\n5、打补丁，加固\n\n\n\n\n\n## 2. 各种操作命令\n如编写各种脚本用于监控，备份，部署，\n\n监控的重点是监控指标，不在脚本，因为监控脚本会根根监控平台的变化而改变。\n\n之前的zabbix、nagios到现在的prometheus，2017年以前是zabbix使用最普遍，因为界面好看，社区活跃。\nnagios免费版没有图形化界面。prometheus随着云原生而兴起。\n\n这些监控平台我都搭建过，这两年以prometheus+grafana为主\n\n\n## 3. 备份\n1、确认网络传输协议SMB路径，NAS的用户名密码作为变量，\n2、卸载卸载本地挂载点再mount\n3、tar -cvpzf压缩文件，文件名加时间标签，复制到NAS的挂载点等待\n4、检查、删除过期备份，关闭链接\n5、对重要系统定期测试恢复情况，异常要有告警日志\n\n\n## 4. 磁盘管理\n### RAID\nRAID0无冗余，速度双倍\nRAID1一比一备份，速度是一倍的磁盘\nRAID10是先组0再组1\nRAID5多用于NAS大容量存储器，用的是奇偶校验码原理，恢复较慢，且有一定风险，同样的奇偶校验码原理还有在储存中间件minio里面用到。\n\n### 卷管理\n磁盘管理涉及到的是磁盘、物理卷、逻辑卷。\n磁盘底层raid容灾，一般固态和机械硬盘的性能差三倍。\n物理卷是关联的磁盘物理分区。\n卷组将分区合并，随后再划分逻辑卷。\n每一层的拆分和组合都是为了功能多样化。\n\n### 空间缩扩容\n最近一次是安装系统是给根分区划小了，只有200G，因为docker的一些数据默认留在根分区没挂到其他分区。\n\n后面需要从home划过来1300G。\n流程是：\n1、测试环境先模拟，写出处理流程在文档\n2、df -h 查看分区情况，确认可转移的空间\n3、确定从/home分区划走1300G给根分区\n4、确认home分区没有业务数据写入，复制一份数据到其他分区，umount\n5、lvreduce -L划出空间，重新格式化，数据迁移回来\n6、lvextend 1300G到centos-root,然后xfs_growfs拓展空间\n7、最后df -hT确认\n\n如果是云服务器，那买一块空白盘添加或者停机扩容，不用自己操作。\n\n\n## 5. 系统跟踪管理\nprometheus有对Linux监控的探针\n\n## 6. 常用指令\n\n| 分类             | 功能                      | 命令                     | 说明                                                                                      |\n|------------------|---------------------------|--------------------------|-----------------------------------------------------------------------------------------|\n| **系统管理**     | 查看系统信息              | `uname -a`               | 显示系统信息，包括内核版本和系统架构                                                      |\n|                  | 查看内核版本              | `uname -r`               | 显示当前运行的内核版本                                                                    |\n|                  | 查看系统发行版信息        | `cat /etc/centos-release`| 显示当前的 CentOS 版本信息                                                                |\n|                  | 查看当前用户              | `whoami`                 | 显示当前登录用户                                                                          |\n|                  | 切换用户                  | `su - [username]`        | 切换到指定用户                                                                            |\n|                  | 查看登录历史              | `last`                   | 显示系统最近的登录记录                                                                    |\n|                  | 系统重启                  | `reboot`                 | 重启系统                                                                                  |\n|                  | 系统关机                  | `shutdown -h now`        | 立即关机                                                                                  |\n|                  | 定时关机                  | `shutdown -h +30`        | 系统将在 30 分钟后关机                                                                    |\n|                  | 查看系统启动时间          | `uptime`                 | 显示系统的启动时间、当前时间、运行时间、用户数和系统负载                                 |\n| **进程管理**     | 查看进程                  | `ps -aux`                | 显示所有进程的详细信息                                                                    |\n|                  | 实时监控进程              | `top`                    | 实时显示系统进程状态和资源使用情况                                                        |\n|                  | 结束进程                  | `kill [PID]`             | 结束指定的进程                                                                            |\n|                  | 强制结束进程              | `kill -9 [PID]`          | 强制结束指定的进程                                                                        |\n|                  | 查看进程树                | `pstree`                 | 以树状图显示进程                                                                          |\n| **磁盘管理**     | 查看磁盘使用情况          | `df -h`                  | 显示磁盘分区的挂载信息和使用情况                                                          |\n|                  | 查看目录大小              | `du -sh [directory]`     | 显示指定目录的大小                                                                        |\n|                  | 挂载文件系统              | `mount`                  | 挂载文件系统                                                                              |\n|                  | 卸载文件系统              | `umount`                 | 卸载文件系统                                                                              |\n|                  | 格式化磁盘                | `mkfs.ext4 /dev/sdX`     | 格式化指定的磁盘分区为 ext4 文件系统                                                      |\n|                  | 检查和修复文件系统        | `fsck`                   | 检查和修复文件系统                                                                        |\n| **网络管理**     | 查看网络配置              | `ifconfig`               | 显示网络接口的配置信息                                                                    |\n|                  | 配置网络接口              | `nmcli`                  | 使用 NetworkManager 命令行工具配置网络接口                                                |\n|                  | 查看路由表                | `route -n`               | 显示路由表信息                                                                            |\n|                  | 测试网络连通性            | `ping`                   | 发送 ICMP 回显请求以测试网络连通性                                                        |\n|                  | 显示网络连接              | `netstat -tunlp`         | 显示系统的所有网络连接                                                                    |\n|                  | 解析 DNS                  | `dig [domain]`           | 进行 DNS 解析查询                                                                         |\n| **用户管理**     | 添加用户                  | `useradd [username]`     | 创建新用户                                                                                |\n|                  | 删除用户                  | `userdel [username]`     | 删除用户                                                                                  |\n|                  | 修改用户密码              | `passwd [username]`      | 修改指定用户的密码                                                                        |\n|                  | 添加组                    | `groupadd [groupname]`   | 创建新组                                                                                  |\n|                  | 删除组                    | `groupdel [groupname]`   | 删除组                                                                                    |\n| **文件管理**     | 查看文件内容              | `cat [file]`             | 显示文件内容                                                                              |\n|                  | 分页查看文件内容          | `less [file]`            | 分页查看文件内容                                                                          |\n|                  | 创建文件                  | `touch [file]`           | 创建一个空文件                                                                            |\n|                  | 删除文件                  | `rm [file]`              | 删除文件                                                                                  |\n|                  | 复制文件                  | `cp [source] [destination]` | 复制文件                                                                              |\n|                  | 移动文件                  | `mv [source] [destination]` | 移动或重命名文件                                                                       |\n|                  | 查找文件                  | `find [path] -name [name]` | 查找文件                                                                                |\n| **包管理**       | 安装软件包                | `yum install [package]`  | 使用 YUM 包管理器安装软件包                                                               |\n|                  | 删除软件包                | `yum remove [package]`   | 使用 YUM 包管理器删除软件包                                                               |\n|                  | 更新系统                  | `yum update`             | 更新系统所有已安装的软件包                                                                |\n|                  | 列出已安装的软件包        | `yum list installed`     | 列出系统中所有已安装的软件包                                                              |\n| **日志管理**     | 查看系统日志              | `journalctl`             | 查看使用 systemd 管理的系统日志                                                           |\n|                  | 查看特定服务日志          | `journalctl -u [service]` | 查看特定服务的日志                                                                       |\n|                  | 实时查看日志              | `tail -f [logfile]`      | 实时查看日志文件内容                                                                      |\n| **性能监控**     | 查看系统性能              | `vmstat`                 | 显示系统的进程、内存、分页、块 I/O、陷阱和 CPU 活动信息                                    |\n|                  | 查看磁盘 I/O 性能         | `iostat`                 | 显示 CPU 使用情况和磁盘 I/O 性能信息                                                      |\n|                  | 跟踪系统调用              | `strace [command]`       | 跟踪指定命令的系统调用                                                                    |\n|                  | 分析系统性能              | `perf`                   | 强大的 Linux 性能分析工具，用于分析 CPU 性能瓶颈、跟踪系统调用等                          |\n| **安全管理**     | 配置防火墙                | `firewall-cmd`           | 使用 firewalld 管理和配置防火墙                                                           |\n|                  | 检查端口状态              | `nmap`                   | 网络扫描工具，用于检查开放端口和服务                                                      |\n|                  | 查看和设置 SELinux 模式   | `sestatus` / `setenforce` | 查看和设置 SELinux 模式                                                                 |\n|                  | 配置 SSH 服务             | `sshd`                   | 配置和管理 SSH 服务                                                                       |\n","slug":"99关于面试/99.1.linux","published":1,"date":"2024-07-19T09:33:22.954Z","updated":"2024-07-19T16:39:28.856Z","comments":1,"layout":"post","photos":[],"_id":"clyv5dqri0011j38ahgg06kyd","content":"<h2 id=\"阐述Linux权限\">阐述Linux权限</h2>\n<h2 id=\"1-熟悉linux操作系统安装、配置\">1. 熟悉linux操作系统安装、配置</h2>\n<p>1、制作引导U盘<br>\n2、了解服务器型号，和如何进入引导<br>\n3、确定业务类型，和分区规划<br>\n4、每特殊要求就最小化安装和配置网络，管理网测试连通性（如果是dell iDrac口远程进来的另说）<br>\n5、打补丁，加固</p>\n<h2 id=\"2-各种操作命令\">2. 各种操作命令</h2>\n<p>如编写各种脚本用于监控，备份，部署，</p>\n<p>监控的重点是监控指标，不在脚本，因为监控脚本会根根监控平台的变化而改变。</p>\n<p>之前的zabbix、nagios到现在的prometheus，2017年以前是zabbix使用最普遍，因为界面好看，社区活跃。<br>\nnagios免费版没有图形化界面。prometheus随着云原生而兴起。</p>\n<p>这些监控平台我都搭建过，这两年以prometheus+grafana为主</p>\n<h2 id=\"3-备份\">3. 备份</h2>\n<p>1、确认网络传输协议SMB路径，NAS的用户名密码作为变量，<br>\n2、卸载卸载本地挂载点再mount<br>\n3、tar -cvpzf压缩文件，文件名加时间标签，复制到NAS的挂载点等待<br>\n4、检查、删除过期备份，关闭链接<br>\n5、对重要系统定期测试恢复情况，异常要有告警日志</p>\n<h2 id=\"4-磁盘管理\">4. 磁盘管理</h2>\n<h3 id=\"RAID\">RAID</h3>\n<p>RAID0无冗余，速度双倍<br>\nRAID1一比一备份，速度是一倍的磁盘<br>\nRAID10是先组0再组1<br>\nRAID5多用于NAS大容量存储器，用的是奇偶校验码原理，恢复较慢，且有一定风险，同样的奇偶校验码原理还有在储存中间件minio里面用到。</p>\n<h3 id=\"卷管理\">卷管理</h3>\n<p>磁盘管理涉及到的是磁盘、物理卷、逻辑卷。<br>\n磁盘底层raid容灾，一般固态和机械硬盘的性能差三倍。<br>\n物理卷是关联的磁盘物理分区。<br>\n卷组将分区合并，随后再划分逻辑卷。<br>\n每一层的拆分和组合都是为了功能多样化。</p>\n<h3 id=\"空间缩扩容\">空间缩扩容</h3>\n<p>最近一次是安装系统是给根分区划小了，只有200G，因为docker的一些数据默认留在根分区没挂到其他分区。</p>\n<p>后面需要从home划过来1300G。<br>\n流程是：<br>\n1、测试环境先模拟，写出处理流程在文档<br>\n2、df -h 查看分区情况，确认可转移的空间<br>\n3、确定从/home分区划走1300G给根分区<br>\n4、确认home分区没有业务数据写入，复制一份数据到其他分区，umount<br>\n5、lvreduce -L划出空间，重新格式化，数据迁移回来<br>\n6、lvextend 1300G到centos-root,然后xfs_growfs拓展空间<br>\n7、最后df -hT确认</p>\n<p>如果是云服务器，那买一块空白盘添加或者停机扩容，不用自己操作。</p>\n<h2 id=\"5-系统跟踪管理\">5. 系统跟踪管理</h2>\n<p>prometheus有对Linux监控的探针</p>\n<h2 id=\"6-常用指令\">6. 常用指令</h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>功能</th>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>系统管理</strong></td>\n<td>查看系统信息</td>\n<td><code>uname -a</code></td>\n<td>显示系统信息，包括内核版本和系统架构</td>\n</tr>\n<tr>\n<td></td>\n<td>查看内核版本</td>\n<td><code>uname -r</code></td>\n<td>显示当前运行的内核版本</td>\n</tr>\n<tr>\n<td></td>\n<td>查看系统发行版信息</td>\n<td><code>cat /etc/centos-release</code></td>\n<td>显示当前的 CentOS 版本信息</td>\n</tr>\n<tr>\n<td></td>\n<td>查看当前用户</td>\n<td><code>whoami</code></td>\n<td>显示当前登录用户</td>\n</tr>\n<tr>\n<td></td>\n<td>切换用户</td>\n<td><code>su - [username]</code></td>\n<td>切换到指定用户</td>\n</tr>\n<tr>\n<td></td>\n<td>查看登录历史</td>\n<td><code>last</code></td>\n<td>显示系统最近的登录记录</td>\n</tr>\n<tr>\n<td></td>\n<td>系统重启</td>\n<td><code>reboot</code></td>\n<td>重启系统</td>\n</tr>\n<tr>\n<td></td>\n<td>系统关机</td>\n<td><code>shutdown -h now</code></td>\n<td>立即关机</td>\n</tr>\n<tr>\n<td></td>\n<td>定时关机</td>\n<td><code>shutdown -h +30</code></td>\n<td>系统将在 30 分钟后关机</td>\n</tr>\n<tr>\n<td></td>\n<td>查看系统启动时间</td>\n<td><code>uptime</code></td>\n<td>显示系统的启动时间、当前时间、运行时间、用户数和系统负载</td>\n</tr>\n<tr>\n<td><strong>进程管理</strong></td>\n<td>查看进程</td>\n<td><code>ps -aux</code></td>\n<td>显示所有进程的详细信息</td>\n</tr>\n<tr>\n<td></td>\n<td>实时监控进程</td>\n<td><code>top</code></td>\n<td>实时显示系统进程状态和资源使用情况</td>\n</tr>\n<tr>\n<td></td>\n<td>结束进程</td>\n<td><code>kill [PID]</code></td>\n<td>结束指定的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>强制结束进程</td>\n<td><code>kill -9 [PID]</code></td>\n<td>强制结束指定的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>查看进程树</td>\n<td><code>pstree</code></td>\n<td>以树状图显示进程</td>\n</tr>\n<tr>\n<td><strong>磁盘管理</strong></td>\n<td>查看磁盘使用情况</td>\n<td><code>df -h</code></td>\n<td>显示磁盘分区的挂载信息和使用情况</td>\n</tr>\n<tr>\n<td></td>\n<td>查看目录大小</td>\n<td><code>du -sh [directory]</code></td>\n<td>显示指定目录的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>挂载文件系统</td>\n<td><code>mount</code></td>\n<td>挂载文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>卸载文件系统</td>\n<td><code>umount</code></td>\n<td>卸载文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>格式化磁盘</td>\n<td><code>mkfs.ext4 /dev/sdX</code></td>\n<td>格式化指定的磁盘分区为 ext4 文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>检查和修复文件系统</td>\n<td><code>fsck</code></td>\n<td>检查和修复文件系统</td>\n</tr>\n<tr>\n<td><strong>网络管理</strong></td>\n<td>查看网络配置</td>\n<td><code>ifconfig</code></td>\n<td>显示网络接口的配置信息</td>\n</tr>\n<tr>\n<td></td>\n<td>配置网络接口</td>\n<td><code>nmcli</code></td>\n<td>使用 NetworkManager 命令行工具配置网络接口</td>\n</tr>\n<tr>\n<td></td>\n<td>查看路由表</td>\n<td><code>route -n</code></td>\n<td>显示路由表信息</td>\n</tr>\n<tr>\n<td></td>\n<td>测试网络连通性</td>\n<td><code>ping</code></td>\n<td>发送 ICMP 回显请求以测试网络连通性</td>\n</tr>\n<tr>\n<td></td>\n<td>显示网络连接</td>\n<td><code>netstat -tunlp</code></td>\n<td>显示系统的所有网络连接</td>\n</tr>\n<tr>\n<td></td>\n<td>解析 DNS</td>\n<td><code>dig [domain]</code></td>\n<td>进行 DNS 解析查询</td>\n</tr>\n<tr>\n<td><strong>用户管理</strong></td>\n<td>添加用户</td>\n<td><code>useradd [username]</code></td>\n<td>创建新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>删除用户</td>\n<td><code>userdel [username]</code></td>\n<td>删除用户</td>\n</tr>\n<tr>\n<td></td>\n<td>修改用户密码</td>\n<td><code>passwd [username]</code></td>\n<td>修改指定用户的密码</td>\n</tr>\n<tr>\n<td></td>\n<td>添加组</td>\n<td><code>groupadd [groupname]</code></td>\n<td>创建新组</td>\n</tr>\n<tr>\n<td></td>\n<td>删除组</td>\n<td><code>groupdel [groupname]</code></td>\n<td>删除组</td>\n</tr>\n<tr>\n<td><strong>文件管理</strong></td>\n<td>查看文件内容</td>\n<td><code>cat [file]</code></td>\n<td>显示文件内容</td>\n</tr>\n<tr>\n<td></td>\n<td>分页查看文件内容</td>\n<td><code>less [file]</code></td>\n<td>分页查看文件内容</td>\n</tr>\n<tr>\n<td></td>\n<td>创建文件</td>\n<td><code>touch [file]</code></td>\n<td>创建一个空文件</td>\n</tr>\n<tr>\n<td></td>\n<td>删除文件</td>\n<td><code>rm [file]</code></td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td></td>\n<td>复制文件</td>\n<td><code>cp [source] [destination]</code></td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td></td>\n<td>移动文件</td>\n<td><code>mv [source] [destination]</code></td>\n<td>移动或重命名文件</td>\n</tr>\n<tr>\n<td></td>\n<td>查找文件</td>\n<td><code>find [path] -name [name]</code></td>\n<td>查找文件</td>\n</tr>\n<tr>\n<td><strong>包管理</strong></td>\n<td>安装软件包</td>\n<td><code>yum install [package]</code></td>\n<td>使用 YUM 包管理器安装软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>删除软件包</td>\n<td><code>yum remove [package]</code></td>\n<td>使用 YUM 包管理器删除软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>更新系统</td>\n<td><code>yum update</code></td>\n<td>更新系统所有已安装的软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>列出已安装的软件包</td>\n<td><code>yum list installed</code></td>\n<td>列出系统中所有已安装的软件包</td>\n</tr>\n<tr>\n<td><strong>日志管理</strong></td>\n<td>查看系统日志</td>\n<td><code>journalctl</code></td>\n<td>查看使用 systemd 管理的系统日志</td>\n</tr>\n<tr>\n<td></td>\n<td>查看特定服务日志</td>\n<td><code>journalctl -u [service]</code></td>\n<td>查看特定服务的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>实时查看日志</td>\n<td><code>tail -f [logfile]</code></td>\n<td>实时查看日志文件内容</td>\n</tr>\n<tr>\n<td><strong>性能监控</strong></td>\n<td>查看系统性能</td>\n<td><code>vmstat</code></td>\n<td>显示系统的进程、内存、分页、块 I/O、陷阱和 CPU 活动信息</td>\n</tr>\n<tr>\n<td></td>\n<td>查看磁盘 I/O 性能</td>\n<td><code>iostat</code></td>\n<td>显示 CPU 使用情况和磁盘 I/O 性能信息</td>\n</tr>\n<tr>\n<td></td>\n<td>跟踪系统调用</td>\n<td><code>strace [command]</code></td>\n<td>跟踪指定命令的系统调用</td>\n</tr>\n<tr>\n<td></td>\n<td>分析系统性能</td>\n<td><code>perf</code></td>\n<td>强大的 Linux 性能分析工具，用于分析 CPU 性能瓶颈、跟踪系统调用等</td>\n</tr>\n<tr>\n<td><strong>安全管理</strong></td>\n<td>配置防火墙</td>\n<td><code>firewall-cmd</code></td>\n<td>使用 firewalld 管理和配置防火墙</td>\n</tr>\n<tr>\n<td></td>\n<td>检查端口状态</td>\n<td><code>nmap</code></td>\n<td>网络扫描工具，用于检查开放端口和服务</td>\n</tr>\n<tr>\n<td></td>\n<td>查看和设置 SELinux 模式</td>\n<td><code>sestatus</code> / <code>setenforce</code></td>\n<td>查看和设置 SELinux 模式</td>\n</tr>\n<tr>\n<td></td>\n<td>配置 SSH 服务</td>\n<td><code>sshd</code></td>\n<td>配置和管理 SSH 服务</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"阐述Linux权限\">阐述Linux权限</h2>\n<h2 id=\"1-熟悉linux操作系统安装、配置\">1. 熟悉linux操作系统安装、配置</h2>\n<p>1、制作引导U盘<br>\n2、了解服务器型号，和如何进入引导<br>\n3、确定业务类型，和分区规划<br>\n4、每特殊要求就最小化安装和配置网络，管理网测试连通性（如果是dell iDrac口远程进来的另说）<br>\n5、打补丁，加固</p>\n<h2 id=\"2-各种操作命令\">2. 各种操作命令</h2>\n<p>如编写各种脚本用于监控，备份，部署，</p>\n<p>监控的重点是监控指标，不在脚本，因为监控脚本会根根监控平台的变化而改变。</p>\n<p>之前的zabbix、nagios到现在的prometheus，2017年以前是zabbix使用最普遍，因为界面好看，社区活跃。<br>\nnagios免费版没有图形化界面。prometheus随着云原生而兴起。</p>\n<p>这些监控平台我都搭建过，这两年以prometheus+grafana为主</p>\n<h2 id=\"3-备份\">3. 备份</h2>\n<p>1、确认网络传输协议SMB路径，NAS的用户名密码作为变量，<br>\n2、卸载卸载本地挂载点再mount<br>\n3、tar -cvpzf压缩文件，文件名加时间标签，复制到NAS的挂载点等待<br>\n4、检查、删除过期备份，关闭链接<br>\n5、对重要系统定期测试恢复情况，异常要有告警日志</p>\n<h2 id=\"4-磁盘管理\">4. 磁盘管理</h2>\n<h3 id=\"RAID\">RAID</h3>\n<p>RAID0无冗余，速度双倍<br>\nRAID1一比一备份，速度是一倍的磁盘<br>\nRAID10是先组0再组1<br>\nRAID5多用于NAS大容量存储器，用的是奇偶校验码原理，恢复较慢，且有一定风险，同样的奇偶校验码原理还有在储存中间件minio里面用到。</p>\n<h3 id=\"卷管理\">卷管理</h3>\n<p>磁盘管理涉及到的是磁盘、物理卷、逻辑卷。<br>\n磁盘底层raid容灾，一般固态和机械硬盘的性能差三倍。<br>\n物理卷是关联的磁盘物理分区。<br>\n卷组将分区合并，随后再划分逻辑卷。<br>\n每一层的拆分和组合都是为了功能多样化。</p>\n<h3 id=\"空间缩扩容\">空间缩扩容</h3>\n<p>最近一次是安装系统是给根分区划小了，只有200G，因为docker的一些数据默认留在根分区没挂到其他分区。</p>\n<p>后面需要从home划过来1300G。<br>\n流程是：<br>\n1、测试环境先模拟，写出处理流程在文档<br>\n2、df -h 查看分区情况，确认可转移的空间<br>\n3、确定从/home分区划走1300G给根分区<br>\n4、确认home分区没有业务数据写入，复制一份数据到其他分区，umount<br>\n5、lvreduce -L划出空间，重新格式化，数据迁移回来<br>\n6、lvextend 1300G到centos-root,然后xfs_growfs拓展空间<br>\n7、最后df -hT确认</p>\n<p>如果是云服务器，那买一块空白盘添加或者停机扩容，不用自己操作。</p>\n<h2 id=\"5-系统跟踪管理\">5. 系统跟踪管理</h2>\n<p>prometheus有对Linux监控的探针</p>\n<h2 id=\"6-常用指令\">6. 常用指令</h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>功能</th>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>系统管理</strong></td>\n<td>查看系统信息</td>\n<td><code>uname -a</code></td>\n<td>显示系统信息，包括内核版本和系统架构</td>\n</tr>\n<tr>\n<td></td>\n<td>查看内核版本</td>\n<td><code>uname -r</code></td>\n<td>显示当前运行的内核版本</td>\n</tr>\n<tr>\n<td></td>\n<td>查看系统发行版信息</td>\n<td><code>cat /etc/centos-release</code></td>\n<td>显示当前的 CentOS 版本信息</td>\n</tr>\n<tr>\n<td></td>\n<td>查看当前用户</td>\n<td><code>whoami</code></td>\n<td>显示当前登录用户</td>\n</tr>\n<tr>\n<td></td>\n<td>切换用户</td>\n<td><code>su - [username]</code></td>\n<td>切换到指定用户</td>\n</tr>\n<tr>\n<td></td>\n<td>查看登录历史</td>\n<td><code>last</code></td>\n<td>显示系统最近的登录记录</td>\n</tr>\n<tr>\n<td></td>\n<td>系统重启</td>\n<td><code>reboot</code></td>\n<td>重启系统</td>\n</tr>\n<tr>\n<td></td>\n<td>系统关机</td>\n<td><code>shutdown -h now</code></td>\n<td>立即关机</td>\n</tr>\n<tr>\n<td></td>\n<td>定时关机</td>\n<td><code>shutdown -h +30</code></td>\n<td>系统将在 30 分钟后关机</td>\n</tr>\n<tr>\n<td></td>\n<td>查看系统启动时间</td>\n<td><code>uptime</code></td>\n<td>显示系统的启动时间、当前时间、运行时间、用户数和系统负载</td>\n</tr>\n<tr>\n<td><strong>进程管理</strong></td>\n<td>查看进程</td>\n<td><code>ps -aux</code></td>\n<td>显示所有进程的详细信息</td>\n</tr>\n<tr>\n<td></td>\n<td>实时监控进程</td>\n<td><code>top</code></td>\n<td>实时显示系统进程状态和资源使用情况</td>\n</tr>\n<tr>\n<td></td>\n<td>结束进程</td>\n<td><code>kill [PID]</code></td>\n<td>结束指定的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>强制结束进程</td>\n<td><code>kill -9 [PID]</code></td>\n<td>强制结束指定的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>查看进程树</td>\n<td><code>pstree</code></td>\n<td>以树状图显示进程</td>\n</tr>\n<tr>\n<td><strong>磁盘管理</strong></td>\n<td>查看磁盘使用情况</td>\n<td><code>df -h</code></td>\n<td>显示磁盘分区的挂载信息和使用情况</td>\n</tr>\n<tr>\n<td></td>\n<td>查看目录大小</td>\n<td><code>du -sh [directory]</code></td>\n<td>显示指定目录的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>挂载文件系统</td>\n<td><code>mount</code></td>\n<td>挂载文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>卸载文件系统</td>\n<td><code>umount</code></td>\n<td>卸载文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>格式化磁盘</td>\n<td><code>mkfs.ext4 /dev/sdX</code></td>\n<td>格式化指定的磁盘分区为 ext4 文件系统</td>\n</tr>\n<tr>\n<td></td>\n<td>检查和修复文件系统</td>\n<td><code>fsck</code></td>\n<td>检查和修复文件系统</td>\n</tr>\n<tr>\n<td><strong>网络管理</strong></td>\n<td>查看网络配置</td>\n<td><code>ifconfig</code></td>\n<td>显示网络接口的配置信息</td>\n</tr>\n<tr>\n<td></td>\n<td>配置网络接口</td>\n<td><code>nmcli</code></td>\n<td>使用 NetworkManager 命令行工具配置网络接口</td>\n</tr>\n<tr>\n<td></td>\n<td>查看路由表</td>\n<td><code>route -n</code></td>\n<td>显示路由表信息</td>\n</tr>\n<tr>\n<td></td>\n<td>测试网络连通性</td>\n<td><code>ping</code></td>\n<td>发送 ICMP 回显请求以测试网络连通性</td>\n</tr>\n<tr>\n<td></td>\n<td>显示网络连接</td>\n<td><code>netstat -tunlp</code></td>\n<td>显示系统的所有网络连接</td>\n</tr>\n<tr>\n<td></td>\n<td>解析 DNS</td>\n<td><code>dig [domain]</code></td>\n<td>进行 DNS 解析查询</td>\n</tr>\n<tr>\n<td><strong>用户管理</strong></td>\n<td>添加用户</td>\n<td><code>useradd [username]</code></td>\n<td>创建新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>删除用户</td>\n<td><code>userdel [username]</code></td>\n<td>删除用户</td>\n</tr>\n<tr>\n<td></td>\n<td>修改用户密码</td>\n<td><code>passwd [username]</code></td>\n<td>修改指定用户的密码</td>\n</tr>\n<tr>\n<td></td>\n<td>添加组</td>\n<td><code>groupadd [groupname]</code></td>\n<td>创建新组</td>\n</tr>\n<tr>\n<td></td>\n<td>删除组</td>\n<td><code>groupdel [groupname]</code></td>\n<td>删除组</td>\n</tr>\n<tr>\n<td><strong>文件管理</strong></td>\n<td>查看文件内容</td>\n<td><code>cat [file]</code></td>\n<td>显示文件内容</td>\n</tr>\n<tr>\n<td></td>\n<td>分页查看文件内容</td>\n<td><code>less [file]</code></td>\n<td>分页查看文件内容</td>\n</tr>\n<tr>\n<td></td>\n<td>创建文件</td>\n<td><code>touch [file]</code></td>\n<td>创建一个空文件</td>\n</tr>\n<tr>\n<td></td>\n<td>删除文件</td>\n<td><code>rm [file]</code></td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td></td>\n<td>复制文件</td>\n<td><code>cp [source] [destination]</code></td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td></td>\n<td>移动文件</td>\n<td><code>mv [source] [destination]</code></td>\n<td>移动或重命名文件</td>\n</tr>\n<tr>\n<td></td>\n<td>查找文件</td>\n<td><code>find [path] -name [name]</code></td>\n<td>查找文件</td>\n</tr>\n<tr>\n<td><strong>包管理</strong></td>\n<td>安装软件包</td>\n<td><code>yum install [package]</code></td>\n<td>使用 YUM 包管理器安装软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>删除软件包</td>\n<td><code>yum remove [package]</code></td>\n<td>使用 YUM 包管理器删除软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>更新系统</td>\n<td><code>yum update</code></td>\n<td>更新系统所有已安装的软件包</td>\n</tr>\n<tr>\n<td></td>\n<td>列出已安装的软件包</td>\n<td><code>yum list installed</code></td>\n<td>列出系统中所有已安装的软件包</td>\n</tr>\n<tr>\n<td><strong>日志管理</strong></td>\n<td>查看系统日志</td>\n<td><code>journalctl</code></td>\n<td>查看使用 systemd 管理的系统日志</td>\n</tr>\n<tr>\n<td></td>\n<td>查看特定服务日志</td>\n<td><code>journalctl -u [service]</code></td>\n<td>查看特定服务的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>实时查看日志</td>\n<td><code>tail -f [logfile]</code></td>\n<td>实时查看日志文件内容</td>\n</tr>\n<tr>\n<td><strong>性能监控</strong></td>\n<td>查看系统性能</td>\n<td><code>vmstat</code></td>\n<td>显示系统的进程、内存、分页、块 I/O、陷阱和 CPU 活动信息</td>\n</tr>\n<tr>\n<td></td>\n<td>查看磁盘 I/O 性能</td>\n<td><code>iostat</code></td>\n<td>显示 CPU 使用情况和磁盘 I/O 性能信息</td>\n</tr>\n<tr>\n<td></td>\n<td>跟踪系统调用</td>\n<td><code>strace [command]</code></td>\n<td>跟踪指定命令的系统调用</td>\n</tr>\n<tr>\n<td></td>\n<td>分析系统性能</td>\n<td><code>perf</code></td>\n<td>强大的 Linux 性能分析工具，用于分析 CPU 性能瓶颈、跟踪系统调用等</td>\n</tr>\n<tr>\n<td><strong>安全管理</strong></td>\n<td>配置防火墙</td>\n<td><code>firewall-cmd</code></td>\n<td>使用 firewalld 管理和配置防火墙</td>\n</tr>\n<tr>\n<td></td>\n<td>检查端口状态</td>\n<td><code>nmap</code></td>\n<td>网络扫描工具，用于检查开放端口和服务</td>\n</tr>\n<tr>\n<td></td>\n<td>查看和设置 SELinux 模式</td>\n<td><code>sestatus</code> / <code>setenforce</code></td>\n<td>查看和设置 SELinux 模式</td>\n</tr>\n<tr>\n<td></td>\n<td>配置 SSH 服务</td>\n<td><code>sshd</code></td>\n<td>配置和管理 SSH 服务</td>\n</tr>\n</tbody>\n</table>\n"},{"author":"空空","_content":"\n### 1.分发文件到所有主机\n\n```\nansible all -m copy -a \"src=/etc/hosts dest=/tmp\"\n```\n\n\n\n\n\n","source":"_posts/08自动化工具/8.2.Ansible基础使用.md","raw":"---\nauthor: 空空\n---\n\n### 1.分发文件到所有主机\n\n```\nansible all -m copy -a \"src=/etc/hosts dest=/tmp\"\n```\n\n\n\n\n\n","slug":"08自动化工具/8.2.Ansible基础使用","published":1,"date":"2024-07-18T05:45:45.202Z","updated":"2024-07-20T07:29:19.405Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqri0012j38aebsy55st","content":"<h3 id=\"1-分发文件到所有主机\">1.分发文件到所有主机</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"1-分发文件到所有主机\">1.分发文件到所有主机</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/etc/hosts dest=/tmp&quot;</span><br></pre></td></tr></table></figure>\n"},{"_content":"\n\n## 网络协议\n\n| 层次 | 功能 | 协议 |\n| ---- | ---- | ---- |\n| 第七层 应用层 (Application Layer) | 为应用软件提供服务，例如电子邮件、文件传输等 | HTTP, FTP, SMTP, POP3, IMAP, DNS |\n| 第六层 表示层 (Presentation Layer) | 数据的格式化、加密和解密 | JPEG, MPEG, SSL, TLS |\n| 第五层 会话层 (Session Layer) | 建立、管理和终止会话 | NetBIOS, PPTP |\n| 第四层 传输层 (Transport Layer) | 提供可靠的消息传递和错误恢复 | TCP, UDP |\n| 第三层 网络层 (Network Layer) | 数据包转发，包括路由通过不同的路由器 | IP, ICMP, ARP, RIP, OSPF, BGP |\n| 第二层 数据链路层 (Data Link Layer) | 负责节点之间的可靠数据传输 | Ethernet, PPP, Switch, Bridge |\n| 第一层 物理层 (Physical Layer) | 通过物理介质传输比特流 | RJ45, Ethernet (IEEE 802.3), Token Ring, FDDI |\n\n\n### 1.物理层\n物理接口层，RJ45，光纤口，电话口，都属于这一层，同样的接口才能连接\n\n\n### 2.数据链路层\n负责数据传输可靠性，实际上这一层在流量控制上，通过Mac地址就可通信。\n\n### 3.网络层\nRIP、OSPF、BGP这些协议，做的是不同网络间的寻址。\n\n### 4.传输层\nTCP/UDP的可靠性传输\n\n### 5.会话层\nPPTP，session layer，很容易理解，就是像登录页面时打开一个session连接，结束就断开\n\n### 6.表示层\n展示，数据格式化，和加解密，压缩都可以在这一层，比如高层的加密SSL，也有ipsec是在网络层的。\n\n### 7.应用层\n可以不说，因为dns，ftp等等都是，包括qq。","source":"_posts/99关于面试/99.2.网络知识.md","raw":"\n\n## 网络协议\n\n| 层次 | 功能 | 协议 |\n| ---- | ---- | ---- |\n| 第七层 应用层 (Application Layer) | 为应用软件提供服务，例如电子邮件、文件传输等 | HTTP, FTP, SMTP, POP3, IMAP, DNS |\n| 第六层 表示层 (Presentation Layer) | 数据的格式化、加密和解密 | JPEG, MPEG, SSL, TLS |\n| 第五层 会话层 (Session Layer) | 建立、管理和终止会话 | NetBIOS, PPTP |\n| 第四层 传输层 (Transport Layer) | 提供可靠的消息传递和错误恢复 | TCP, UDP |\n| 第三层 网络层 (Network Layer) | 数据包转发，包括路由通过不同的路由器 | IP, ICMP, ARP, RIP, OSPF, BGP |\n| 第二层 数据链路层 (Data Link Layer) | 负责节点之间的可靠数据传输 | Ethernet, PPP, Switch, Bridge |\n| 第一层 物理层 (Physical Layer) | 通过物理介质传输比特流 | RJ45, Ethernet (IEEE 802.3), Token Ring, FDDI |\n\n\n### 1.物理层\n物理接口层，RJ45，光纤口，电话口，都属于这一层，同样的接口才能连接\n\n\n### 2.数据链路层\n负责数据传输可靠性，实际上这一层在流量控制上，通过Mac地址就可通信。\n\n### 3.网络层\nRIP、OSPF、BGP这些协议，做的是不同网络间的寻址。\n\n### 4.传输层\nTCP/UDP的可靠性传输\n\n### 5.会话层\nPPTP，session layer，很容易理解，就是像登录页面时打开一个session连接，结束就断开\n\n### 6.表示层\n展示，数据格式化，和加解密，压缩都可以在这一层，比如高层的加密SSL，也有ipsec是在网络层的。\n\n### 7.应用层\n可以不说，因为dns，ftp等等都是，包括qq。","slug":"99关于面试/99.2.网络知识","published":1,"date":"2024-07-20T08:49:06.888Z","updated":"2024-07-20T09:10:29.870Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrj0013j38aah76fulb","content":"<h2 id=\"网络协议\">网络协议</h2>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>功能</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第七层 应用层 (Application Layer)</td>\n<td>为应用软件提供服务，例如电子邮件、文件传输等</td>\n<td>HTTP, FTP, SMTP, POP3, IMAP, DNS</td>\n</tr>\n<tr>\n<td>第六层 表示层 (Presentation Layer)</td>\n<td>数据的格式化、加密和解密</td>\n<td>JPEG, MPEG, SSL, TLS</td>\n</tr>\n<tr>\n<td>第五层 会话层 (Session Layer)</td>\n<td>建立、管理和终止会话</td>\n<td>NetBIOS, PPTP</td>\n</tr>\n<tr>\n<td>第四层 传输层 (Transport Layer)</td>\n<td>提供可靠的消息传递和错误恢复</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>第三层 网络层 (Network Layer)</td>\n<td>数据包转发，包括路由通过不同的路由器</td>\n<td>IP, ICMP, ARP, RIP, OSPF, BGP</td>\n</tr>\n<tr>\n<td>第二层 数据链路层 (Data Link Layer)</td>\n<td>负责节点之间的可靠数据传输</td>\n<td>Ethernet, PPP, Switch, Bridge</td>\n</tr>\n<tr>\n<td>第一层 物理层 (Physical Layer)</td>\n<td>通过物理介质传输比特流</td>\n<td>RJ45, Ethernet (IEEE 802.3), Token Ring, FDDI</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-物理层\">1.物理层</h3>\n<p>物理接口层，RJ45，光纤口，电话口，都属于这一层，同样的接口才能连接</p>\n<h3 id=\"2-数据链路层\">2.数据链路层</h3>\n<p>负责数据传输可靠性，实际上这一层在流量控制上，通过Mac地址就可通信。</p>\n<h3 id=\"3-网络层\">3.网络层</h3>\n<p>RIP、OSPF、BGP这些协议，做的是不同网络间的寻址。</p>\n<h3 id=\"4-传输层\">4.传输层</h3>\n<p>TCP/UDP的可靠性传输</p>\n<h3 id=\"5-会话层\">5.会话层</h3>\n<p>PPTP，session layer，很容易理解，就是像登录页面时打开一个session连接，结束就断开</p>\n<h3 id=\"6-表示层\">6.表示层</h3>\n<p>展示，数据格式化，和加解密，压缩都可以在这一层，比如高层的加密SSL，也有ipsec是在网络层的。</p>\n<h3 id=\"7-应用层\">7.应用层</h3>\n<p>可以不说，因为dns，ftp等等都是，包括qq。</p>\n","excerpt":"","more":"<h2 id=\"网络协议\">网络协议</h2>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>功能</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第七层 应用层 (Application Layer)</td>\n<td>为应用软件提供服务，例如电子邮件、文件传输等</td>\n<td>HTTP, FTP, SMTP, POP3, IMAP, DNS</td>\n</tr>\n<tr>\n<td>第六层 表示层 (Presentation Layer)</td>\n<td>数据的格式化、加密和解密</td>\n<td>JPEG, MPEG, SSL, TLS</td>\n</tr>\n<tr>\n<td>第五层 会话层 (Session Layer)</td>\n<td>建立、管理和终止会话</td>\n<td>NetBIOS, PPTP</td>\n</tr>\n<tr>\n<td>第四层 传输层 (Transport Layer)</td>\n<td>提供可靠的消息传递和错误恢复</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>第三层 网络层 (Network Layer)</td>\n<td>数据包转发，包括路由通过不同的路由器</td>\n<td>IP, ICMP, ARP, RIP, OSPF, BGP</td>\n</tr>\n<tr>\n<td>第二层 数据链路层 (Data Link Layer)</td>\n<td>负责节点之间的可靠数据传输</td>\n<td>Ethernet, PPP, Switch, Bridge</td>\n</tr>\n<tr>\n<td>第一层 物理层 (Physical Layer)</td>\n<td>通过物理介质传输比特流</td>\n<td>RJ45, Ethernet (IEEE 802.3), Token Ring, FDDI</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-物理层\">1.物理层</h3>\n<p>物理接口层，RJ45，光纤口，电话口，都属于这一层，同样的接口才能连接</p>\n<h3 id=\"2-数据链路层\">2.数据链路层</h3>\n<p>负责数据传输可靠性，实际上这一层在流量控制上，通过Mac地址就可通信。</p>\n<h3 id=\"3-网络层\">3.网络层</h3>\n<p>RIP、OSPF、BGP这些协议，做的是不同网络间的寻址。</p>\n<h3 id=\"4-传输层\">4.传输层</h3>\n<p>TCP/UDP的可靠性传输</p>\n<h3 id=\"5-会话层\">5.会话层</h3>\n<p>PPTP，session layer，很容易理解，就是像登录页面时打开一个session连接，结束就断开</p>\n<h3 id=\"6-表示层\">6.表示层</h3>\n<p>展示，数据格式化，和加解密，压缩都可以在这一层，比如高层的加密SSL，也有ipsec是在网络层的。</p>\n<h3 id=\"7-应用层\">7.应用层</h3>\n<p>可以不说，因为dns，ftp等等都是，包括qq。</p>\n"},{"_content":"## 阐述Linux权限\n\n## 熟悉linux操作系统安装、配置\ncentos7\n\n\n\n\n\n## 各种操作命令，如编写各种脚本用于监控，备份，部署，\n\n## 系统跟踪管理，空间缩扩容","source":"_posts/99关于面试/nginx.md","raw":"## 阐述Linux权限\n\n## 熟悉linux操作系统安装、配置\ncentos7\n\n\n\n\n\n## 各种操作命令，如编写各种脚本用于监控，备份，部署，\n\n## 系统跟踪管理，空间缩扩容","slug":"99关于面试/nginx","published":1,"date":"2024-07-19T09:36:15.767Z","updated":"2024-07-19T09:49:58.802Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrk0016j38a90vldr6p","content":"<h2 id=\"阐述Linux权限\">阐述Linux权限</h2>\n<h2 id=\"熟悉linux操作系统安装、配置\">熟悉linux操作系统安装、配置</h2>\n<p>centos7</p>\n<h2 id=\"各种操作命令，如编写各种脚本用于监控，备份，部署，\">各种操作命令，如编写各种脚本用于监控，备份，部署，</h2>\n<h2 id=\"系统跟踪管理，空间缩扩容\">系统跟踪管理，空间缩扩容</h2>\n","excerpt":"","more":"<h2 id=\"阐述Linux权限\">阐述Linux权限</h2>\n<h2 id=\"熟悉linux操作系统安装、配置\">熟悉linux操作系统安装、配置</h2>\n<p>centos7</p>\n<h2 id=\"各种操作命令，如编写各种脚本用于监控，备份，部署，\">各种操作命令，如编写各种脚本用于监控，备份，部署，</h2>\n<h2 id=\"系统跟踪管理，空间缩扩容\">系统跟踪管理，空间缩扩容</h2>\n"},{"_content":"## 面试准备\n\n职责描述：\n1、负责vmware虚拟化、阿里云及其他公有云系统的日常管理及运维\n2、负责服务器、存储等系统服务类设备的日常管理和运维\n3、了解docker容器及k8s架构，负责容器系统管理和运维\n4、负责搭建并维护混合云自动化管理平台\n任职要求：\n1、统招本科及以上学历，计算机相关专业，5年以上计算机相关工作经验\n2、具备维护和管理vmware集群架构的实战经验和能力\n3、具备容器系统及容器管理架构的维护能力\n4、具备5年以上linux系统管理经验\n5、具备系统服务类设备维护及维保的经验能力\n6、了解TCP/IP、网络架构及原理、MySQL数据库、中间件等\n7、有计划性，执行力强，对技术有热情，具备较强的工作责任感和团队意识\n\n\n## 网络七层模型\n\n\n## 三剑客","source":"_posts/99关于面试/传音控股.md","raw":"## 面试准备\n\n职责描述：\n1、负责vmware虚拟化、阿里云及其他公有云系统的日常管理及运维\n2、负责服务器、存储等系统服务类设备的日常管理和运维\n3、了解docker容器及k8s架构，负责容器系统管理和运维\n4、负责搭建并维护混合云自动化管理平台\n任职要求：\n1、统招本科及以上学历，计算机相关专业，5年以上计算机相关工作经验\n2、具备维护和管理vmware集群架构的实战经验和能力\n3、具备容器系统及容器管理架构的维护能力\n4、具备5年以上linux系统管理经验\n5、具备系统服务类设备维护及维保的经验能力\n6、了解TCP/IP、网络架构及原理、MySQL数据库、中间件等\n7、有计划性，执行力强，对技术有热情，具备较强的工作责任感和团队意识\n\n\n## 网络七层模型\n\n\n## 三剑客","slug":"99关于面试/传音控股","published":1,"date":"2024-07-15T08:55:52.067Z","updated":"2024-07-18T03:22:27.213Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrl0019j38a8kl9ggfl","content":"<h2 id=\"面试准备\">面试准备</h2>\n<p>职责描述：<br>\n1、负责vmware虚拟化、阿里云及其他公有云系统的日常管理及运维<br>\n2、负责服务器、存储等系统服务类设备的日常管理和运维<br>\n3、了解docker容器及k8s架构，负责容器系统管理和运维<br>\n4、负责搭建并维护混合云自动化管理平台<br>\n任职要求：<br>\n1、统招本科及以上学历，计算机相关专业，5年以上计算机相关工作经验<br>\n2、具备维护和管理vmware集群架构的实战经验和能力<br>\n3、具备容器系统及容器管理架构的维护能力<br>\n4、具备5年以上linux系统管理经验<br>\n5、具备系统服务类设备维护及维保的经验能力<br>\n6、了解TCP/IP、网络架构及原理、MySQL数据库、中间件等<br>\n7、有计划性，执行力强，对技术有热情，具备较强的工作责任感和团队意识</p>\n<h2 id=\"网络七层模型\">网络七层模型</h2>\n<h2 id=\"三剑客\">三剑客</h2>\n","excerpt":"","more":"<h2 id=\"面试准备\">面试准备</h2>\n<p>职责描述：<br>\n1、负责vmware虚拟化、阿里云及其他公有云系统的日常管理及运维<br>\n2、负责服务器、存储等系统服务类设备的日常管理和运维<br>\n3、了解docker容器及k8s架构，负责容器系统管理和运维<br>\n4、负责搭建并维护混合云自动化管理平台<br>\n任职要求：<br>\n1、统招本科及以上学历，计算机相关专业，5年以上计算机相关工作经验<br>\n2、具备维护和管理vmware集群架构的实战经验和能力<br>\n3、具备容器系统及容器管理架构的维护能力<br>\n4、具备5年以上linux系统管理经验<br>\n5、具备系统服务类设备维护及维保的经验能力<br>\n6、了解TCP/IP、网络架构及原理、MySQL数据库、中间件等<br>\n7、有计划性，执行力强，对技术有热情，具备较强的工作责任感和团队意识</p>\n<h2 id=\"网络七层模型\">网络七层模型</h2>\n<h2 id=\"三剑客\">三剑客</h2>\n"},{"_content":"## 1. 三剑客\n\ngrep：从文本中提取匹配模式的行。\nsed：解决对文本流进行编辑和修改的问题。\nawk：处理、分析和格式化结构化文本数据，适合复杂的数据操作。\n\n### GREP\ngrep（Global Regular Expression Print）用于在文件中搜索符合条件的文本行。使用正则表达式来解决\n\n多条件搜索：grep -e \"pattern1\" -e \"pattern2\" file 查找同时匹配pattern1和pattern2的行。\n反向匹配：grep -v \"pattern\" file 只输出不包含pattern的行。\n递归搜索：grep -r \"pattern\" directory 在目录及其子目录中搜索。\n高亮显示匹配：grep --color=auto \"pattern\" file 使匹配的文本高亮显示。\n\n\n### SED\nsed（Stream Editor）是一种流编辑器，用于对文件进行文本处理和转换，替换、删除、插入等操作。\n\n替换文本：sed 's/old/new/g' file 将文件中所有的old替换为new。\n删除行：sed 'd' file 删除所有行；sed '2d' file 删除第二行。\n插入文本：sed '2i\\New line' file 在第二行之前插入New line。\n使用正则表达式：sed -n '/pattern/p' file 只输出匹配pattern的行。\n\n\n### AWK\nAWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool.\nLike sed and grep, it is a filter,and is a standard feature of most Unix-like operating systems.\nAWK 是一种特定于领域的语言，专为文本处理而设计，通常用作数据提取和报告工具。\n与 sed 和 grep 一样，它是一种过滤器，并且是大多数类 Unix 操作系统的一个标准功能。\n\n\n既然是语言，那与Python无异，只是针对的领域不同，处理不同问题的性能不同而已。\n\n\n打印特定字段：awk '{print $1, $3}' file 打印文件中每行的第一个和第三个字段。\n条件处理：awk '$1 == \"value\" {print $2}' file 仅当第一列等于value时打印第二列。\n计算统计信息：awk '{sum += $1} END {print sum}' file 计算第一列的总和。\n模式匹配：awk '/pattern/ {print $0}' file 打印所有包含pattern的行。\n\n\n\n","source":"_posts/99关于面试/99.3.基础脚本.md","raw":"## 1. 三剑客\n\ngrep：从文本中提取匹配模式的行。\nsed：解决对文本流进行编辑和修改的问题。\nawk：处理、分析和格式化结构化文本数据，适合复杂的数据操作。\n\n### GREP\ngrep（Global Regular Expression Print）用于在文件中搜索符合条件的文本行。使用正则表达式来解决\n\n多条件搜索：grep -e \"pattern1\" -e \"pattern2\" file 查找同时匹配pattern1和pattern2的行。\n反向匹配：grep -v \"pattern\" file 只输出不包含pattern的行。\n递归搜索：grep -r \"pattern\" directory 在目录及其子目录中搜索。\n高亮显示匹配：grep --color=auto \"pattern\" file 使匹配的文本高亮显示。\n\n\n### SED\nsed（Stream Editor）是一种流编辑器，用于对文件进行文本处理和转换，替换、删除、插入等操作。\n\n替换文本：sed 's/old/new/g' file 将文件中所有的old替换为new。\n删除行：sed 'd' file 删除所有行；sed '2d' file 删除第二行。\n插入文本：sed '2i\\New line' file 在第二行之前插入New line。\n使用正则表达式：sed -n '/pattern/p' file 只输出匹配pattern的行。\n\n\n### AWK\nAWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool.\nLike sed and grep, it is a filter,and is a standard feature of most Unix-like operating systems.\nAWK 是一种特定于领域的语言，专为文本处理而设计，通常用作数据提取和报告工具。\n与 sed 和 grep 一样，它是一种过滤器，并且是大多数类 Unix 操作系统的一个标准功能。\n\n\n既然是语言，那与Python无异，只是针对的领域不同，处理不同问题的性能不同而已。\n\n\n打印特定字段：awk '{print $1, $3}' file 打印文件中每行的第一个和第三个字段。\n条件处理：awk '$1 == \"value\" {print $2}' file 仅当第一列等于value时打印第二列。\n计算统计信息：awk '{sum += $1} END {print sum}' file 计算第一列的总和。\n模式匹配：awk '/pattern/ {print $0}' file 打印所有包含pattern的行。\n\n\n\n","slug":"99关于面试/99.3.基础脚本","published":1,"date":"2024-07-20T09:11:17.712Z","updated":"2024-07-20T09:30:52.633Z","title":"","comments":1,"layout":"post","photos":[],"_id":"clyv5dqrm001bj38ab1j6245s","content":"<h2 id=\"1-三剑客\">1. 三剑客</h2>\n<p>grep：从文本中提取匹配模式的行。<br>\nsed：解决对文本流进行编辑和修改的问题。<br>\nawk：处理、分析和格式化结构化文本数据，适合复杂的数据操作。</p>\n<h3 id=\"GREP\">GREP</h3>\n<p>grep（Global Regular Expression Print）用于在文件中搜索符合条件的文本行。使用正则表达式来解决</p>\n<p>多条件搜索：grep -e “pattern1” -e “pattern2” file 查找同时匹配pattern1和pattern2的行。<br>\n反向匹配：grep -v “pattern” file 只输出不包含pattern的行。<br>\n递归搜索：grep -r “pattern” directory 在目录及其子目录中搜索。<br>\n高亮显示匹配：grep --color=auto “pattern” file 使匹配的文本高亮显示。</p>\n<h3 id=\"SED\">SED</h3>\n<p>sed（Stream Editor）是一种流编辑器，用于对文件进行文本处理和转换，替换、删除、插入等操作。</p>\n<p>替换文本：sed ‘s/old/new/g’ file 将文件中所有的old替换为new。<br>\n删除行：sed ‘d’ file 删除所有行；sed ‘2d’ file 删除第二行。<br>\n插入文本：sed ‘2i\\New line’ file 在第二行之前插入New line。<br>\n使用正则表达式：sed -n ‘/pattern/p’ file 只输出匹配pattern的行。</p>\n<h3 id=\"AWK\">AWK</h3>\n<p>AWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool.<br>\nLike sed and grep, it is a filter,and is a standard feature of most Unix-like operating systems.<br>\nAWK 是一种特定于领域的语言，专为文本处理而设计，通常用作数据提取和报告工具。<br>\n与 sed 和 grep 一样，它是一种过滤器，并且是大多数类 Unix 操作系统的一个标准功能。</p>\n<p>既然是语言，那与Python无异，只是针对的领域不同，处理不同问题的性能不同而已。</p>\n<p>打印特定字段：awk ‘{print $1, $3}’ file 打印文件中每行的第一个和第三个字段。<br>\n条件处理：awk ‘$1 == “value” {print $2}’ file 仅当第一列等于value时打印第二列。<br>\n计算统计信息：awk ‘{sum += $1} END {print sum}’ file 计算第一列的总和。<br>\n模式匹配：awk ‘/pattern/ {print $0}’ file 打印所有包含pattern的行。</p>\n","excerpt":"","more":"<h2 id=\"1-三剑客\">1. 三剑客</h2>\n<p>grep：从文本中提取匹配模式的行。<br>\nsed：解决对文本流进行编辑和修改的问题。<br>\nawk：处理、分析和格式化结构化文本数据，适合复杂的数据操作。</p>\n<h3 id=\"GREP\">GREP</h3>\n<p>grep（Global Regular Expression Print）用于在文件中搜索符合条件的文本行。使用正则表达式来解决</p>\n<p>多条件搜索：grep -e “pattern1” -e “pattern2” file 查找同时匹配pattern1和pattern2的行。<br>\n反向匹配：grep -v “pattern” file 只输出不包含pattern的行。<br>\n递归搜索：grep -r “pattern” directory 在目录及其子目录中搜索。<br>\n高亮显示匹配：grep --color=auto “pattern” file 使匹配的文本高亮显示。</p>\n<h3 id=\"SED\">SED</h3>\n<p>sed（Stream Editor）是一种流编辑器，用于对文件进行文本处理和转换，替换、删除、插入等操作。</p>\n<p>替换文本：sed ‘s/old/new/g’ file 将文件中所有的old替换为new。<br>\n删除行：sed ‘d’ file 删除所有行；sed ‘2d’ file 删除第二行。<br>\n插入文本：sed ‘2i\\New line’ file 在第二行之前插入New line。<br>\n使用正则表达式：sed -n ‘/pattern/p’ file 只输出匹配pattern的行。</p>\n<h3 id=\"AWK\">AWK</h3>\n<p>AWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool.<br>\nLike sed and grep, it is a filter,and is a standard feature of most Unix-like operating systems.<br>\nAWK 是一种特定于领域的语言，专为文本处理而设计，通常用作数据提取和报告工具。<br>\n与 sed 和 grep 一样，它是一种过滤器，并且是大多数类 Unix 操作系统的一个标准功能。</p>\n<p>既然是语言，那与Python无异，只是针对的领域不同，处理不同问题的性能不同而已。</p>\n<p>打印特定字段：awk ‘{print $1, $3}’ file 打印文件中每行的第一个和第三个字段。<br>\n条件处理：awk ‘$1 == “value” {print $2}’ file 仅当第一列等于value时打印第二列。<br>\n计算统计信息：awk ‘{sum += $1} END {print sum}’ file 计算第一列的总和。<br>\n模式匹配：awk ‘/pattern/ {print $0}’ file 打印所有包含pattern的行。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clyv5dqqy000pj38a1vqcajeh","category_id":"clyv5dqqz000rj38a88ir1lzx","_id":"clyv5dqrk0014j38afx2qa865"},{"post_id":"clyv5dqqy000pj38a1vqcajeh","category_id":"clyv5dqrd000yj38a1fk483sf","_id":"clyv5dqrk0017j38a3avz5pks"}],"PostTag":[{"post_id":"clyv5dqqy000pj38a1vqcajeh","tag_id":"clyv5dqr7000sj38aevvd7xui","_id":"clyv5dqrk0015j38aapzb7aco"},{"post_id":"clyv5dqqy000pj38a1vqcajeh","tag_id":"clyv5dqrc000wj38a4cny69yl","_id":"clyv5dqrl0018j38afp2oh1tx"},{"post_id":"clyv5dqqy000pj38a1vqcajeh","tag_id":"clyv5dqre0010j38a7bs9ahy6","_id":"clyv5dqrm001aj38a53kr1t4v"}],"Tag":[{"name":"Docker","_id":"clyv5dqr7000sj38aevvd7xui"},{"name":"Docker Compose","_id":"clyv5dqrc000wj38a4cny69yl"},{"name":"安装指南","_id":"clyv5dqre0010j38a7bs9ahy6"}]}}